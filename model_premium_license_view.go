/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PremiumLicenseView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremiumLicenseView{}

// PremiumLicenseView struct for PremiumLicenseView
type PremiumLicenseView struct {
	ActivationDate *int64 `json:"activationDate,omitempty"`
	Code *string `json:"code,omitempty"`
	CreationDate *int64 `json:"creationDate,omitempty"`
	Days *int32 `json:"days,omitempty"`
	Receiver *UsernameView `json:"receiver,omitempty"`
}

// NewPremiumLicenseView instantiates a new PremiumLicenseView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremiumLicenseView() *PremiumLicenseView {
	this := PremiumLicenseView{}
	return &this
}

// NewPremiumLicenseViewWithDefaults instantiates a new PremiumLicenseView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremiumLicenseViewWithDefaults() *PremiumLicenseView {
	this := PremiumLicenseView{}
	return &this
}

// GetActivationDate returns the ActivationDate field value if set, zero value otherwise.
func (o *PremiumLicenseView) GetActivationDate() int64 {
	if o == nil || IsNil(o.ActivationDate) {
		var ret int64
		return ret
	}
	return *o.ActivationDate
}

// GetActivationDateOk returns a tuple with the ActivationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumLicenseView) GetActivationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ActivationDate) {
		return nil, false
	}
	return o.ActivationDate, true
}

// HasActivationDate returns a boolean if a field has been set.
func (o *PremiumLicenseView) HasActivationDate() bool {
	if o != nil && !IsNil(o.ActivationDate) {
		return true
	}

	return false
}

// SetActivationDate gets a reference to the given int64 and assigns it to the ActivationDate field.
func (o *PremiumLicenseView) SetActivationDate(v int64) {
	o.ActivationDate = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PremiumLicenseView) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumLicenseView) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PremiumLicenseView) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PremiumLicenseView) SetCode(v string) {
	o.Code = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *PremiumLicenseView) GetCreationDate() int64 {
	if o == nil || IsNil(o.CreationDate) {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumLicenseView) GetCreationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *PremiumLicenseView) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *PremiumLicenseView) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *PremiumLicenseView) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumLicenseView) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *PremiumLicenseView) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *PremiumLicenseView) SetDays(v int32) {
	o.Days = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *PremiumLicenseView) GetReceiver() UsernameView {
	if o == nil || IsNil(o.Receiver) {
		var ret UsernameView
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumLicenseView) GetReceiverOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *PremiumLicenseView) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given UsernameView and assigns it to the Receiver field.
func (o *PremiumLicenseView) SetReceiver(v UsernameView) {
	o.Receiver = &v
}

func (o PremiumLicenseView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremiumLicenseView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActivationDate) {
		toSerialize["activationDate"] = o.ActivationDate
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	return toSerialize, nil
}

type NullablePremiumLicenseView struct {
	value *PremiumLicenseView
	isSet bool
}

func (v NullablePremiumLicenseView) Get() *PremiumLicenseView {
	return v.value
}

func (v *NullablePremiumLicenseView) Set(val *PremiumLicenseView) {
	v.value = val
	v.isSet = true
}

func (v NullablePremiumLicenseView) IsSet() bool {
	return v.isSet
}

func (v *NullablePremiumLicenseView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremiumLicenseView(val *PremiumLicenseView) *NullablePremiumLicenseView {
	return &NullablePremiumLicenseView{value: val, isSet: true}
}

func (v NullablePremiumLicenseView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremiumLicenseView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


