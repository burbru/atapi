/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the ShareholderStake type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareholderStake{}

// ShareholderStake struct for ShareholderStake
type ShareholderStake struct {
	AveragePrice *float32 `json:"averagePrice,omitempty"`
	NumberOfShares *int64 `json:"numberOfShares,omitempty"`
	StakeInPercent *float32 `json:"stakeInPercent,omitempty"`
}

// NewShareholderStake instantiates a new ShareholderStake object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareholderStake() *ShareholderStake {
	this := ShareholderStake{}
	return &this
}

// NewShareholderStakeWithDefaults instantiates a new ShareholderStake object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareholderStakeWithDefaults() *ShareholderStake {
	this := ShareholderStake{}
	return &this
}

// GetAveragePrice returns the AveragePrice field value if set, zero value otherwise.
func (o *ShareholderStake) GetAveragePrice() float32 {
	if o == nil || IsNil(o.AveragePrice) {
		var ret float32
		return ret
	}
	return *o.AveragePrice
}

// GetAveragePriceOk returns a tuple with the AveragePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderStake) GetAveragePriceOk() (*float32, bool) {
	if o == nil || IsNil(o.AveragePrice) {
		return nil, false
	}
	return o.AveragePrice, true
}

// HasAveragePrice returns a boolean if a field has been set.
func (o *ShareholderStake) HasAveragePrice() bool {
	if o != nil && !IsNil(o.AveragePrice) {
		return true
	}

	return false
}

// SetAveragePrice gets a reference to the given float32 and assigns it to the AveragePrice field.
func (o *ShareholderStake) SetAveragePrice(v float32) {
	o.AveragePrice = &v
}

// GetNumberOfShares returns the NumberOfShares field value if set, zero value otherwise.
func (o *ShareholderStake) GetNumberOfShares() int64 {
	if o == nil || IsNil(o.NumberOfShares) {
		var ret int64
		return ret
	}
	return *o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderStake) GetNumberOfSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfShares) {
		return nil, false
	}
	return o.NumberOfShares, true
}

// HasNumberOfShares returns a boolean if a field has been set.
func (o *ShareholderStake) HasNumberOfShares() bool {
	if o != nil && !IsNil(o.NumberOfShares) {
		return true
	}

	return false
}

// SetNumberOfShares gets a reference to the given int64 and assigns it to the NumberOfShares field.
func (o *ShareholderStake) SetNumberOfShares(v int64) {
	o.NumberOfShares = &v
}

// GetStakeInPercent returns the StakeInPercent field value if set, zero value otherwise.
func (o *ShareholderStake) GetStakeInPercent() float32 {
	if o == nil || IsNil(o.StakeInPercent) {
		var ret float32
		return ret
	}
	return *o.StakeInPercent
}

// GetStakeInPercentOk returns a tuple with the StakeInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderStake) GetStakeInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.StakeInPercent) {
		return nil, false
	}
	return o.StakeInPercent, true
}

// HasStakeInPercent returns a boolean if a field has been set.
func (o *ShareholderStake) HasStakeInPercent() bool {
	if o != nil && !IsNil(o.StakeInPercent) {
		return true
	}

	return false
}

// SetStakeInPercent gets a reference to the given float32 and assigns it to the StakeInPercent field.
func (o *ShareholderStake) SetStakeInPercent(v float32) {
	o.StakeInPercent = &v
}

func (o ShareholderStake) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareholderStake) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AveragePrice) {
		toSerialize["averagePrice"] = o.AveragePrice
	}
	if !IsNil(o.NumberOfShares) {
		toSerialize["numberOfShares"] = o.NumberOfShares
	}
	if !IsNil(o.StakeInPercent) {
		toSerialize["stakeInPercent"] = o.StakeInPercent
	}
	return toSerialize, nil
}

type NullableShareholderStake struct {
	value *ShareholderStake
	isSet bool
}

func (v NullableShareholderStake) Get() *ShareholderStake {
	return v.value
}

func (v *NullableShareholderStake) Set(val *ShareholderStake) {
	v.value = val
	v.isSet = true
}

func (v NullableShareholderStake) IsSet() bool {
	return v.isSet
}

func (v *NullableShareholderStake) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareholderStake(val *ShareholderStake) *NullableShareholderStake {
	return &NullableShareholderStake{value: val, isSet: true}
}

func (v NullableShareholderStake) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareholderStake) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


