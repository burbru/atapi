/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the AsinWithNameView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsinWithNameView{}

// AsinWithNameView struct for AsinWithNameView
type AsinWithNameView struct {
	Asin *string `json:"asin,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewAsinWithNameView instantiates a new AsinWithNameView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsinWithNameView() *AsinWithNameView {
	this := AsinWithNameView{}
	return &this
}

// NewAsinWithNameViewWithDefaults instantiates a new AsinWithNameView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsinWithNameViewWithDefaults() *AsinWithNameView {
	this := AsinWithNameView{}
	return &this
}

// GetAsin returns the Asin field value if set, zero value otherwise.
func (o *AsinWithNameView) GetAsin() string {
	if o == nil || IsNil(o.Asin) {
		var ret string
		return ret
	}
	return *o.Asin
}

// GetAsinOk returns a tuple with the Asin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsinWithNameView) GetAsinOk() (*string, bool) {
	if o == nil || IsNil(o.Asin) {
		return nil, false
	}
	return o.Asin, true
}

// HasAsin returns a boolean if a field has been set.
func (o *AsinWithNameView) HasAsin() bool {
	if o != nil && !IsNil(o.Asin) {
		return true
	}

	return false
}

// SetAsin gets a reference to the given string and assigns it to the Asin field.
func (o *AsinWithNameView) SetAsin(v string) {
	o.Asin = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AsinWithNameView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsinWithNameView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AsinWithNameView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AsinWithNameView) SetName(v string) {
	o.Name = &v
}

func (o AsinWithNameView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsinWithNameView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asin) {
		toSerialize["asin"] = o.Asin
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableAsinWithNameView struct {
	value *AsinWithNameView
	isSet bool
}

func (v NullableAsinWithNameView) Get() *AsinWithNameView {
	return v.value
}

func (v *NullableAsinWithNameView) Set(val *AsinWithNameView) {
	v.value = val
	v.isSet = true
}

func (v NullableAsinWithNameView) IsSet() bool {
	return v.isSet
}

func (v *NullableAsinWithNameView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsinWithNameView(val *AsinWithNameView) *NullableAsinWithNameView {
	return &NullableAsinWithNameView{value: val, isSet: true}
}

func (v NullableAsinWithNameView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsinWithNameView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


