/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the EmploymentAgreementView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmploymentAgreementView{}

// EmploymentAgreementView struct for EmploymentAgreementView
type EmploymentAgreementView struct {
	DailyWage *float32 `json:"dailyWage,omitempty"`
	Id *string `json:"id,omitempty"`
	PayAutomatically *bool `json:"payAutomatically,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewEmploymentAgreementView instantiates a new EmploymentAgreementView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmploymentAgreementView() *EmploymentAgreementView {
	this := EmploymentAgreementView{}
	return &this
}

// NewEmploymentAgreementViewWithDefaults instantiates a new EmploymentAgreementView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmploymentAgreementViewWithDefaults() *EmploymentAgreementView {
	this := EmploymentAgreementView{}
	return &this
}

// GetDailyWage returns the DailyWage field value if set, zero value otherwise.
func (o *EmploymentAgreementView) GetDailyWage() float32 {
	if o == nil || IsNil(o.DailyWage) {
		var ret float32
		return ret
	}
	return *o.DailyWage
}

// GetDailyWageOk returns a tuple with the DailyWage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementView) GetDailyWageOk() (*float32, bool) {
	if o == nil || IsNil(o.DailyWage) {
		return nil, false
	}
	return o.DailyWage, true
}

// HasDailyWage returns a boolean if a field has been set.
func (o *EmploymentAgreementView) HasDailyWage() bool {
	if o != nil && !IsNil(o.DailyWage) {
		return true
	}

	return false
}

// SetDailyWage gets a reference to the given float32 and assigns it to the DailyWage field.
func (o *EmploymentAgreementView) SetDailyWage(v float32) {
	o.DailyWage = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmploymentAgreementView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmploymentAgreementView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmploymentAgreementView) SetId(v string) {
	o.Id = &v
}

// GetPayAutomatically returns the PayAutomatically field value if set, zero value otherwise.
func (o *EmploymentAgreementView) GetPayAutomatically() bool {
	if o == nil || IsNil(o.PayAutomatically) {
		var ret bool
		return ret
	}
	return *o.PayAutomatically
}

// GetPayAutomaticallyOk returns a tuple with the PayAutomatically field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementView) GetPayAutomaticallyOk() (*bool, bool) {
	if o == nil || IsNil(o.PayAutomatically) {
		return nil, false
	}
	return o.PayAutomatically, true
}

// HasPayAutomatically returns a boolean if a field has been set.
func (o *EmploymentAgreementView) HasPayAutomatically() bool {
	if o != nil && !IsNil(o.PayAutomatically) {
		return true
	}

	return false
}

// SetPayAutomatically gets a reference to the given bool and assigns it to the PayAutomatically field.
func (o *EmploymentAgreementView) SetPayAutomatically(v bool) {
	o.PayAutomatically = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EmploymentAgreementView) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementView) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EmploymentAgreementView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *EmploymentAgreementView) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EmploymentAgreementView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EmploymentAgreementView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *EmploymentAgreementView) SetVersion(v int64) {
	o.Version = &v
}

func (o EmploymentAgreementView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmploymentAgreementView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DailyWage) {
		toSerialize["dailyWage"] = o.DailyWage
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PayAutomatically) {
		toSerialize["payAutomatically"] = o.PayAutomatically
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableEmploymentAgreementView struct {
	value *EmploymentAgreementView
	isSet bool
}

func (v NullableEmploymentAgreementView) Get() *EmploymentAgreementView {
	return v.value
}

func (v *NullableEmploymentAgreementView) Set(val *EmploymentAgreementView) {
	v.value = val
	v.isSet = true
}

func (v NullableEmploymentAgreementView) IsSet() bool {
	return v.isSet
}

func (v *NullableEmploymentAgreementView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmploymentAgreementView(val *EmploymentAgreementView) *NullableEmploymentAgreementView {
	return &NullableEmploymentAgreementView{value: val, isSet: true}
}

func (v NullableEmploymentAgreementView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmploymentAgreementView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


