/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PostControllerAPIService PostControllerAPI service
type PostControllerAPIService service

type ApiCreateCommentUsingPOSTRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
	title *string
	content *string
	allianceId *string
	companyId *string
	locale *string
}

// Title
func (r ApiCreateCommentUsingPOSTRequest) Title(title string) ApiCreateCommentUsingPOSTRequest {
	r.title = &title
	return r
}

// content
func (r ApiCreateCommentUsingPOSTRequest) Content(content string) ApiCreateCommentUsingPOSTRequest {
	r.content = &content
	return r
}

// Alliance id
func (r ApiCreateCommentUsingPOSTRequest) AllianceId(allianceId string) ApiCreateCommentUsingPOSTRequest {
	r.allianceId = &allianceId
	return r
}

// Company id
func (r ApiCreateCommentUsingPOSTRequest) CompanyId(companyId string) ApiCreateCommentUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

// Locale (default: logged in user&#39;s locale)
func (r ApiCreateCommentUsingPOSTRequest) Locale(locale string) ApiCreateCommentUsingPOSTRequest {
	r.locale = &locale
	return r
}

func (r ApiCreateCommentUsingPOSTRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.CreateCommentUsingPOSTExecute(r)
}

/*
CreateCommentUsingPOST Creates comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiCreateCommentUsingPOSTRequest
*/
func (a *PostControllerAPIService) CreateCommentUsingPOST(ctx context.Context, postId string) ApiCreateCommentUsingPOSTRequest {
	return ApiCreateCommentUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return PostView
func (a *PostControllerAPIService) CreateCommentUsingPOSTExecute(r ApiCreateCommentUsingPOSTRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.CreateCommentUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts/{postId}/comments"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.content == nil {
		return localVarReturnValue, nil, reportError("content is required and must be specified")
	}

	if r.allianceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allianceId", r.allianceId, "")
	}
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/html", "application/json", "text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.content
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreatePostUsingPOSTRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	title *string
	content *string
	allianceId *string
	asin *string
	companyId *string
	listingPostType *string
	locale *string
	messageBoardId *string
}

// Title
func (r ApiCreatePostUsingPOSTRequest) Title(title string) ApiCreatePostUsingPOSTRequest {
	r.title = &title
	return r
}

// content
func (r ApiCreatePostUsingPOSTRequest) Content(content string) ApiCreatePostUsingPOSTRequest {
	r.content = &content
	return r
}

// Alliance id
func (r ApiCreatePostUsingPOSTRequest) AllianceId(allianceId string) ApiCreatePostUsingPOSTRequest {
	r.allianceId = &allianceId
	return r
}

// ASIN
func (r ApiCreatePostUsingPOSTRequest) Asin(asin string) ApiCreatePostUsingPOSTRequest {
	r.asin = &asin
	return r
}

// Company id
func (r ApiCreatePostUsingPOSTRequest) CompanyId(companyId string) ApiCreatePostUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

// Listing post type
func (r ApiCreatePostUsingPOSTRequest) ListingPostType(listingPostType string) ApiCreatePostUsingPOSTRequest {
	r.listingPostType = &listingPostType
	return r
}

// Locale (default: logged in user&#39;s locale)
func (r ApiCreatePostUsingPOSTRequest) Locale(locale string) ApiCreatePostUsingPOSTRequest {
	r.locale = &locale
	return r
}

// Message board id
func (r ApiCreatePostUsingPOSTRequest) MessageBoardId(messageBoardId string) ApiCreatePostUsingPOSTRequest {
	r.messageBoardId = &messageBoardId
	return r
}

func (r ApiCreatePostUsingPOSTRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.CreatePostUsingPOSTExecute(r)
}

/*
CreatePostUsingPOST Creates post

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreatePostUsingPOSTRequest
*/
func (a *PostControllerAPIService) CreatePostUsingPOST(ctx context.Context) ApiCreatePostUsingPOSTRequest {
	return ApiCreatePostUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostView
func (a *PostControllerAPIService) CreatePostUsingPOSTExecute(r ApiCreatePostUsingPOSTRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.CreatePostUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.content == nil {
		return localVarReturnValue, nil, reportError("content is required and must be specified")
	}

	if r.allianceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allianceId", r.allianceId, "")
	}
	if r.asin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asin", r.asin, "")
	}
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	}
	if r.listingPostType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listingPostType", r.listingPostType, "")
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	}
	if r.messageBoardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "messageBoardId", r.messageBoardId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/html", "application/json", "text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.content
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePostUsingDELETERequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
}

func (r ApiDeletePostUsingDELETERequest) Execute() (*MessagePrototype, *http.Response, error) {
	return r.ApiService.DeletePostUsingDELETEExecute(r)
}

/*
DeletePostUsingDELETE Removes post

The current CEO can remove older company posts of former CEOs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiDeletePostUsingDELETERequest
*/
func (a *PostControllerAPIService) DeletePostUsingDELETE(ctx context.Context, postId string) ApiDeletePostUsingDELETERequest {
	return ApiDeletePostUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return MessagePrototype
func (a *PostControllerAPIService) DeletePostUsingDELETEExecute(r ApiDeletePostUsingDELETERequest) (*MessagePrototype, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessagePrototype
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.DeletePostUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts/{postId}"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditPostUsingPUTRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
	title *string
	content *string
	allianceId *string
	asin *string
	companyId *string
	listingPostType *string
	locale *string
	messageBoardId *string
}

// Title
func (r ApiEditPostUsingPUTRequest) Title(title string) ApiEditPostUsingPUTRequest {
	r.title = &title
	return r
}

// content
func (r ApiEditPostUsingPUTRequest) Content(content string) ApiEditPostUsingPUTRequest {
	r.content = &content
	return r
}

// Alliance id
func (r ApiEditPostUsingPUTRequest) AllianceId(allianceId string) ApiEditPostUsingPUTRequest {
	r.allianceId = &allianceId
	return r
}

// ASIN
func (r ApiEditPostUsingPUTRequest) Asin(asin string) ApiEditPostUsingPUTRequest {
	r.asin = &asin
	return r
}

// Company id
func (r ApiEditPostUsingPUTRequest) CompanyId(companyId string) ApiEditPostUsingPUTRequest {
	r.companyId = &companyId
	return r
}

// Listing post type
func (r ApiEditPostUsingPUTRequest) ListingPostType(listingPostType string) ApiEditPostUsingPUTRequest {
	r.listingPostType = &listingPostType
	return r
}

// Locale (default: logged in user&#39;s locale)
func (r ApiEditPostUsingPUTRequest) Locale(locale string) ApiEditPostUsingPUTRequest {
	r.locale = &locale
	return r
}

// Message board id
func (r ApiEditPostUsingPUTRequest) MessageBoardId(messageBoardId string) ApiEditPostUsingPUTRequest {
	r.messageBoardId = &messageBoardId
	return r
}

func (r ApiEditPostUsingPUTRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.EditPostUsingPUTExecute(r)
}

/*
EditPostUsingPUT Edits post

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiEditPostUsingPUTRequest
*/
func (a *PostControllerAPIService) EditPostUsingPUT(ctx context.Context, postId string) ApiEditPostUsingPUTRequest {
	return ApiEditPostUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return PostView
func (a *PostControllerAPIService) EditPostUsingPUTExecute(r ApiEditPostUsingPUTRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.EditPostUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts/{postId}"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.content == nil {
		return localVarReturnValue, nil, reportError("content is required and must be specified")
	}

	if r.allianceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "allianceId", r.allianceId, "")
	}
	if r.asin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asin", r.asin, "")
	}
	if r.companyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	}
	if r.listingPostType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listingPostType", r.listingPostType, "")
	}
	if r.locale != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	}
	if r.messageBoardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "messageBoardId", r.messageBoardId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "title", r.title, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"text/html", "application/json", "text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.content
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetListingDescriptionUsingGETRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	asin *string
	listingPostType *string
}

// ASIN
func (r ApiGetListingDescriptionUsingGETRequest) Asin(asin string) ApiGetListingDescriptionUsingGETRequest {
	r.asin = &asin
	return r
}

// Listing post type
func (r ApiGetListingDescriptionUsingGETRequest) ListingPostType(listingPostType string) ApiGetListingDescriptionUsingGETRequest {
	r.listingPostType = &listingPostType
	return r
}

func (r ApiGetListingDescriptionUsingGETRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.GetListingDescriptionUsingGETExecute(r)
}

/*
GetListingDescriptionUsingGET Returns listing description

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetListingDescriptionUsingGETRequest
*/
func (a *PostControllerAPIService) GetListingDescriptionUsingGET(ctx context.Context) ApiGetListingDescriptionUsingGETRequest {
	return ApiGetListingDescriptionUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostView
func (a *PostControllerAPIService) GetListingDescriptionUsingGETExecute(r ApiGetListingDescriptionUsingGETRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.GetListingDescriptionUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/listingposts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asin", r.asin, "")
	}
	if r.listingPostType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "listingPostType", r.listingPostType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPersonalInterestInPostUsingGETRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
}

func (r ApiGetPersonalInterestInPostUsingGETRequest) Execute() (*InterestSummary, *http.Response, error) {
	return r.ApiService.GetPersonalInterestInPostUsingGETExecute(r)
}

/*
GetPersonalInterestInPostUsingGET Returns personal interest in post

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiGetPersonalInterestInPostUsingGETRequest
*/
func (a *PostControllerAPIService) GetPersonalInterestInPostUsingGET(ctx context.Context, postId string) ApiGetPersonalInterestInPostUsingGETRequest {
	return ApiGetPersonalInterestInPostUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return InterestSummary
func (a *PostControllerAPIService) GetPersonalInterestInPostUsingGETExecute(r ApiGetPersonalInterestInPostUsingGETRequest) (*InterestSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterestSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.GetPersonalInterestInPostUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/posts/{postId}"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPostUsingGETRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
}

func (r ApiGetPostUsingGETRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.GetPostUsingGETExecute(r)
}

/*
GetPostUsingGET Returns post

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiGetPostUsingGETRequest
*/
func (a *PostControllerAPIService) GetPostUsingGET(ctx context.Context, postId string) ApiGetPostUsingGETRequest {
	return ApiGetPostUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return PostView
func (a *PostControllerAPIService) GetPostUsingGETExecute(r ApiGetPostUsingGETRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.GetPostUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts/{postId}"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCommentsUsingGETRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	postId string
}

func (r ApiListCommentsUsingGETRequest) Execute() ([]PostView, *http.Response, error) {
	return r.ApiService.ListCommentsUsingGETExecute(r)
}

/*
ListCommentsUsingGET Lists post's comments. Shows all comments for root posts and the first level comments for comment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param postId postId
 @return ApiListCommentsUsingGETRequest
*/
func (a *PostControllerAPIService) ListCommentsUsingGET(ctx context.Context, postId string) ApiListCommentsUsingGETRequest {
	return ApiListCommentsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		postId: postId,
	}
}

// Execute executes the request
//  @return []PostView
func (a *PostControllerAPIService) ListCommentsUsingGETExecute(r ApiListCommentsUsingGETRequest) ([]PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.ListCommentsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts/{postId}/comments"
	localVarPath = strings.Replace(localVarPath, "{"+"postId"+"}", url.PathEscape(parameterValueToString(r.postId, "postId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListListingPostsUsingGETRequest struct {
	ctx context.Context
	ApiService *PostControllerAPIService
	asin *string
	page *int32
	size *int32
	sort *[]string
}

// ASIN
func (r ApiListListingPostsUsingGETRequest) Asin(asin string) ApiListListingPostsUsingGETRequest {
	r.asin = &asin
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListListingPostsUsingGETRequest) Page(page int32) ApiListListingPostsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListListingPostsUsingGETRequest) Size(size int32) ApiListListingPostsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListListingPostsUsingGETRequest) Sort(sort []string) ApiListListingPostsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListListingPostsUsingGETRequest) Execute() (*PagePostView, *http.Response, error) {
	return r.ApiService.ListListingPostsUsingGETExecute(r)
}

/*
ListListingPostsUsingGET List all postings regarding listing

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListListingPostsUsingGETRequest
*/
func (a *PostControllerAPIService) ListListingPostsUsingGET(ctx context.Context) ApiListListingPostsUsingGETRequest {
	return ApiListListingPostsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PagePostView
func (a *PostControllerAPIService) ListListingPostsUsingGETExecute(r ApiListListingPostsUsingGETRequest) (*PagePostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PagePostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PostControllerAPIService.ListListingPostsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/posts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "asin", r.asin, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
