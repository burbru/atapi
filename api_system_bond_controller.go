/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SystemBondControllerAPIService SystemBondControllerAPI service
type SystemBondControllerAPIService service

type ApiGetSystemBondBySecIdentUsingGETRequest struct {
	ctx context.Context
	ApiService *SystemBondControllerAPIService
	securityIdentifier string
}

func (r ApiGetSystemBondBySecIdentUsingGETRequest) Execute() (*SystemBondView, *http.Response, error) {
	return r.ApiService.GetSystemBondBySecIdentUsingGETExecute(r)
}

/*
GetSystemBondBySecIdentUsingGET Returns bond by its security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityIdentifier Security Identifier
 @return ApiGetSystemBondBySecIdentUsingGETRequest
*/
func (a *SystemBondControllerAPIService) GetSystemBondBySecIdentUsingGET(ctx context.Context, securityIdentifier string) ApiGetSystemBondBySecIdentUsingGETRequest {
	return ApiGetSystemBondBySecIdentUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		securityIdentifier: securityIdentifier,
	}
}

// Execute executes the request
//  @return SystemBondView
func (a *SystemBondControllerAPIService) GetSystemBondBySecIdentUsingGETExecute(r ApiGetSystemBondBySecIdentUsingGETRequest) (*SystemBondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemBondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemBondControllerAPIService.GetSystemBondBySecIdentUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/systembonds/securityidentifier/{securityIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityIdentifier"+"}", url.PathEscape(parameterValueToString(r.securityIdentifier, "securityIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemBondUsingGETRequest struct {
	ctx context.Context
	ApiService *SystemBondControllerAPIService
	bondId string
}

func (r ApiGetSystemBondUsingGETRequest) Execute() (*SystemBondView, *http.Response, error) {
	return r.ApiService.GetSystemBondUsingGETExecute(r)
}

/*
GetSystemBondUsingGET Returns system bond

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bondId System bond id
 @return ApiGetSystemBondUsingGETRequest
*/
func (a *SystemBondControllerAPIService) GetSystemBondUsingGET(ctx context.Context, bondId string) ApiGetSystemBondUsingGETRequest {
	return ApiGetSystemBondUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		bondId: bondId,
	}
}

// Execute executes the request
//  @return SystemBondView
func (a *SystemBondControllerAPIService) GetSystemBondUsingGETExecute(r ApiGetSystemBondUsingGETRequest) (*SystemBondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemBondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemBondControllerAPIService.GetSystemBondUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/systembonds/{bondId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bondId"+"}", url.PathEscape(parameterValueToString(r.bondId, "bondId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueSystemBondsUsingPOSTRequest struct {
	ctx context.Context
	ApiService *SystemBondControllerAPIService
	companyId *string
	numberOfBonds *string
}

// Company id
func (r ApiIssueSystemBondsUsingPOSTRequest) CompanyId(companyId string) ApiIssueSystemBondsUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

// Number of bonds to emit
func (r ApiIssueSystemBondsUsingPOSTRequest) NumberOfBonds(numberOfBonds string) ApiIssueSystemBondsUsingPOSTRequest {
	r.numberOfBonds = &numberOfBonds
	return r
}

func (r ApiIssueSystemBondsUsingPOSTRequest) Execute() (*SystemBondView, *http.Response, error) {
	return r.ApiService.IssueSystemBondsUsingPOSTExecute(r)
}

/*
IssueSystemBondsUsingPOST Issues new bonds to be bought by the central bank at the current main interest rate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIssueSystemBondsUsingPOSTRequest
*/
func (a *SystemBondControllerAPIService) IssueSystemBondsUsingPOST(ctx context.Context) ApiIssueSystemBondsUsingPOSTRequest {
	return ApiIssueSystemBondsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SystemBondView
func (a *SystemBondControllerAPIService) IssueSystemBondsUsingPOSTExecute(r ApiIssueSystemBondsUsingPOSTRequest) (*SystemBondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemBondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemBondControllerAPIService.IssueSystemBondsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/systembonds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if r.numberOfBonds == nil {
		return localVarReturnValue, nil, reportError("numberOfBonds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfBonds", r.numberOfBonds, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListsBondsUsingGETRequest struct {
	ctx context.Context
	ApiService *SystemBondControllerAPIService
}

func (r ApiListsBondsUsingGETRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.ListsBondsUsingGETExecute(r)
}

/*
ListsBondsUsingGET Lists all bonds

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListsBondsUsingGETRequest
*/
func (a *SystemBondControllerAPIService) ListsBondsUsingGET(ctx context.Context) ApiListsBondsUsingGETRequest {
	return ApiListsBondsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BondView
func (a *SystemBondControllerAPIService) ListsBondsUsingGETExecute(r ApiListsBondsUsingGETRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemBondControllerAPIService.ListsBondsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/systembonds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
