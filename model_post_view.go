/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PostView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostView{}

// PostView struct for PostView
type PostView struct {
	Alliance *AllianceView `json:"alliance,omitempty"`
	Author *UsernameView `json:"author,omitempty"`
	Comment *bool `json:"comment,omitempty"`
	Company *CompactCompanyView `json:"company,omitempty"`
	Content *string `json:"content,omitempty"`
	DateCreated *int64 `json:"dateCreated,omitempty"`
	DateDeleted *int64 `json:"dateDeleted,omitempty"`
	DateEdited *int64 `json:"dateEdited,omitempty"`
	HashTags []HashTag `json:"hashTags,omitempty"`
	Id *string `json:"id,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	ListingPostType *string `json:"listingPostType,omitempty"`
	Locale *string `json:"locale,omitempty"`
	MessageBoard *MessageBoardView `json:"messageBoard,omitempty"`
	News *bool `json:"news,omitempty"`
	NewsPostOrComment *bool `json:"newsPostOrComment,omitempty"`
	NumberOfComments *int64 `json:"numberOfComments,omitempty"`
	NumberOfDislikes *int64 `json:"numberOfDislikes,omitempty"`
	NumberOfLikes *int64 `json:"numberOfLikes,omitempty"`
	Parent *string `json:"parent,omitempty"`
	Root *string `json:"root,omitempty"`
	Title *string `json:"title,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewPostView instantiates a new PostView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostView() *PostView {
	this := PostView{}
	return &this
}

// NewPostViewWithDefaults instantiates a new PostView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostViewWithDefaults() *PostView {
	this := PostView{}
	return &this
}

// GetAlliance returns the Alliance field value if set, zero value otherwise.
func (o *PostView) GetAlliance() AllianceView {
	if o == nil || IsNil(o.Alliance) {
		var ret AllianceView
		return ret
	}
	return *o.Alliance
}

// GetAllianceOk returns a tuple with the Alliance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetAllianceOk() (*AllianceView, bool) {
	if o == nil || IsNil(o.Alliance) {
		return nil, false
	}
	return o.Alliance, true
}

// HasAlliance returns a boolean if a field has been set.
func (o *PostView) HasAlliance() bool {
	if o != nil && !IsNil(o.Alliance) {
		return true
	}

	return false
}

// SetAlliance gets a reference to the given AllianceView and assigns it to the Alliance field.
func (o *PostView) SetAlliance(v AllianceView) {
	o.Alliance = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *PostView) GetAuthor() UsernameView {
	if o == nil || IsNil(o.Author) {
		var ret UsernameView
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetAuthorOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *PostView) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given UsernameView and assigns it to the Author field.
func (o *PostView) SetAuthor(v UsernameView) {
	o.Author = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PostView) GetComment() bool {
	if o == nil || IsNil(o.Comment) {
		var ret bool
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetCommentOk() (*bool, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PostView) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given bool and assigns it to the Comment field.
func (o *PostView) SetComment(v bool) {
	o.Comment = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *PostView) GetCompany() CompactCompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompactCompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetCompanyOk() (*CompactCompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *PostView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompactCompanyView and assigns it to the Company field.
func (o *PostView) SetCompany(v CompactCompanyView) {
	o.Company = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *PostView) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *PostView) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *PostView) SetContent(v string) {
	o.Content = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *PostView) GetDateCreated() int64 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int64
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetDateCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *PostView) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int64 and assigns it to the DateCreated field.
func (o *PostView) SetDateCreated(v int64) {
	o.DateCreated = &v
}

// GetDateDeleted returns the DateDeleted field value if set, zero value otherwise.
func (o *PostView) GetDateDeleted() int64 {
	if o == nil || IsNil(o.DateDeleted) {
		var ret int64
		return ret
	}
	return *o.DateDeleted
}

// GetDateDeletedOk returns a tuple with the DateDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetDateDeletedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateDeleted) {
		return nil, false
	}
	return o.DateDeleted, true
}

// HasDateDeleted returns a boolean if a field has been set.
func (o *PostView) HasDateDeleted() bool {
	if o != nil && !IsNil(o.DateDeleted) {
		return true
	}

	return false
}

// SetDateDeleted gets a reference to the given int64 and assigns it to the DateDeleted field.
func (o *PostView) SetDateDeleted(v int64) {
	o.DateDeleted = &v
}

// GetDateEdited returns the DateEdited field value if set, zero value otherwise.
func (o *PostView) GetDateEdited() int64 {
	if o == nil || IsNil(o.DateEdited) {
		var ret int64
		return ret
	}
	return *o.DateEdited
}

// GetDateEditedOk returns a tuple with the DateEdited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetDateEditedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateEdited) {
		return nil, false
	}
	return o.DateEdited, true
}

// HasDateEdited returns a boolean if a field has been set.
func (o *PostView) HasDateEdited() bool {
	if o != nil && !IsNil(o.DateEdited) {
		return true
	}

	return false
}

// SetDateEdited gets a reference to the given int64 and assigns it to the DateEdited field.
func (o *PostView) SetDateEdited(v int64) {
	o.DateEdited = &v
}

// GetHashTags returns the HashTags field value if set, zero value otherwise.
func (o *PostView) GetHashTags() []HashTag {
	if o == nil || IsNil(o.HashTags) {
		var ret []HashTag
		return ret
	}
	return o.HashTags
}

// GetHashTagsOk returns a tuple with the HashTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetHashTagsOk() ([]HashTag, bool) {
	if o == nil || IsNil(o.HashTags) {
		return nil, false
	}
	return o.HashTags, true
}

// HasHashTags returns a boolean if a field has been set.
func (o *PostView) HasHashTags() bool {
	if o != nil && !IsNil(o.HashTags) {
		return true
	}

	return false
}

// SetHashTags gets a reference to the given []HashTag and assigns it to the HashTags field.
func (o *PostView) SetHashTags(v []HashTag) {
	o.HashTags = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PostView) SetId(v string) {
	o.Id = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *PostView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *PostView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *PostView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetListingPostType returns the ListingPostType field value if set, zero value otherwise.
func (o *PostView) GetListingPostType() string {
	if o == nil || IsNil(o.ListingPostType) {
		var ret string
		return ret
	}
	return *o.ListingPostType
}

// GetListingPostTypeOk returns a tuple with the ListingPostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetListingPostTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ListingPostType) {
		return nil, false
	}
	return o.ListingPostType, true
}

// HasListingPostType returns a boolean if a field has been set.
func (o *PostView) HasListingPostType() bool {
	if o != nil && !IsNil(o.ListingPostType) {
		return true
	}

	return false
}

// SetListingPostType gets a reference to the given string and assigns it to the ListingPostType field.
func (o *PostView) SetListingPostType(v string) {
	o.ListingPostType = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *PostView) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *PostView) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *PostView) SetLocale(v string) {
	o.Locale = &v
}

// GetMessageBoard returns the MessageBoard field value if set, zero value otherwise.
func (o *PostView) GetMessageBoard() MessageBoardView {
	if o == nil || IsNil(o.MessageBoard) {
		var ret MessageBoardView
		return ret
	}
	return *o.MessageBoard
}

// GetMessageBoardOk returns a tuple with the MessageBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetMessageBoardOk() (*MessageBoardView, bool) {
	if o == nil || IsNil(o.MessageBoard) {
		return nil, false
	}
	return o.MessageBoard, true
}

// HasMessageBoard returns a boolean if a field has been set.
func (o *PostView) HasMessageBoard() bool {
	if o != nil && !IsNil(o.MessageBoard) {
		return true
	}

	return false
}

// SetMessageBoard gets a reference to the given MessageBoardView and assigns it to the MessageBoard field.
func (o *PostView) SetMessageBoard(v MessageBoardView) {
	o.MessageBoard = &v
}

// GetNews returns the News field value if set, zero value otherwise.
func (o *PostView) GetNews() bool {
	if o == nil || IsNil(o.News) {
		var ret bool
		return ret
	}
	return *o.News
}

// GetNewsOk returns a tuple with the News field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetNewsOk() (*bool, bool) {
	if o == nil || IsNil(o.News) {
		return nil, false
	}
	return o.News, true
}

// HasNews returns a boolean if a field has been set.
func (o *PostView) HasNews() bool {
	if o != nil && !IsNil(o.News) {
		return true
	}

	return false
}

// SetNews gets a reference to the given bool and assigns it to the News field.
func (o *PostView) SetNews(v bool) {
	o.News = &v
}

// GetNewsPostOrComment returns the NewsPostOrComment field value if set, zero value otherwise.
func (o *PostView) GetNewsPostOrComment() bool {
	if o == nil || IsNil(o.NewsPostOrComment) {
		var ret bool
		return ret
	}
	return *o.NewsPostOrComment
}

// GetNewsPostOrCommentOk returns a tuple with the NewsPostOrComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetNewsPostOrCommentOk() (*bool, bool) {
	if o == nil || IsNil(o.NewsPostOrComment) {
		return nil, false
	}
	return o.NewsPostOrComment, true
}

// HasNewsPostOrComment returns a boolean if a field has been set.
func (o *PostView) HasNewsPostOrComment() bool {
	if o != nil && !IsNil(o.NewsPostOrComment) {
		return true
	}

	return false
}

// SetNewsPostOrComment gets a reference to the given bool and assigns it to the NewsPostOrComment field.
func (o *PostView) SetNewsPostOrComment(v bool) {
	o.NewsPostOrComment = &v
}

// GetNumberOfComments returns the NumberOfComments field value if set, zero value otherwise.
func (o *PostView) GetNumberOfComments() int64 {
	if o == nil || IsNil(o.NumberOfComments) {
		var ret int64
		return ret
	}
	return *o.NumberOfComments
}

// GetNumberOfCommentsOk returns a tuple with the NumberOfComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetNumberOfCommentsOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfComments) {
		return nil, false
	}
	return o.NumberOfComments, true
}

// HasNumberOfComments returns a boolean if a field has been set.
func (o *PostView) HasNumberOfComments() bool {
	if o != nil && !IsNil(o.NumberOfComments) {
		return true
	}

	return false
}

// SetNumberOfComments gets a reference to the given int64 and assigns it to the NumberOfComments field.
func (o *PostView) SetNumberOfComments(v int64) {
	o.NumberOfComments = &v
}

// GetNumberOfDislikes returns the NumberOfDislikes field value if set, zero value otherwise.
func (o *PostView) GetNumberOfDislikes() int64 {
	if o == nil || IsNil(o.NumberOfDislikes) {
		var ret int64
		return ret
	}
	return *o.NumberOfDislikes
}

// GetNumberOfDislikesOk returns a tuple with the NumberOfDislikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetNumberOfDislikesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfDislikes) {
		return nil, false
	}
	return o.NumberOfDislikes, true
}

// HasNumberOfDislikes returns a boolean if a field has been set.
func (o *PostView) HasNumberOfDislikes() bool {
	if o != nil && !IsNil(o.NumberOfDislikes) {
		return true
	}

	return false
}

// SetNumberOfDislikes gets a reference to the given int64 and assigns it to the NumberOfDislikes field.
func (o *PostView) SetNumberOfDislikes(v int64) {
	o.NumberOfDislikes = &v
}

// GetNumberOfLikes returns the NumberOfLikes field value if set, zero value otherwise.
func (o *PostView) GetNumberOfLikes() int64 {
	if o == nil || IsNil(o.NumberOfLikes) {
		var ret int64
		return ret
	}
	return *o.NumberOfLikes
}

// GetNumberOfLikesOk returns a tuple with the NumberOfLikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetNumberOfLikesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfLikes) {
		return nil, false
	}
	return o.NumberOfLikes, true
}

// HasNumberOfLikes returns a boolean if a field has been set.
func (o *PostView) HasNumberOfLikes() bool {
	if o != nil && !IsNil(o.NumberOfLikes) {
		return true
	}

	return false
}

// SetNumberOfLikes gets a reference to the given int64 and assigns it to the NumberOfLikes field.
func (o *PostView) SetNumberOfLikes(v int64) {
	o.NumberOfLikes = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *PostView) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *PostView) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *PostView) SetParent(v string) {
	o.Parent = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *PostView) GetRoot() string {
	if o == nil || IsNil(o.Root) {
		var ret string
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetRootOk() (*string, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *PostView) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given string and assigns it to the Root field.
func (o *PostView) SetRoot(v string) {
	o.Root = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PostView) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PostView) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PostView) SetTitle(v string) {
	o.Title = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PostView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PostView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *PostView) SetVersion(v int64) {
	o.Version = &v
}

func (o PostView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alliance) {
		toSerialize["alliance"] = o.Alliance
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.DateDeleted) {
		toSerialize["dateDeleted"] = o.DateDeleted
	}
	if !IsNil(o.DateEdited) {
		toSerialize["dateEdited"] = o.DateEdited
	}
	if !IsNil(o.HashTags) {
		toSerialize["hashTags"] = o.HashTags
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.ListingPostType) {
		toSerialize["listingPostType"] = o.ListingPostType
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.MessageBoard) {
		toSerialize["messageBoard"] = o.MessageBoard
	}
	if !IsNil(o.News) {
		toSerialize["news"] = o.News
	}
	if !IsNil(o.NewsPostOrComment) {
		toSerialize["newsPostOrComment"] = o.NewsPostOrComment
	}
	if !IsNil(o.NumberOfComments) {
		toSerialize["numberOfComments"] = o.NumberOfComments
	}
	if !IsNil(o.NumberOfDislikes) {
		toSerialize["numberOfDislikes"] = o.NumberOfDislikes
	}
	if !IsNil(o.NumberOfLikes) {
		toSerialize["numberOfLikes"] = o.NumberOfLikes
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePostView struct {
	value *PostView
	isSet bool
}

func (v NullablePostView) Get() *PostView {
	return v.value
}

func (v *NullablePostView) Set(val *PostView) {
	v.value = val
	v.isSet = true
}

func (v NullablePostView) IsSet() bool {
	return v.isSet
}

func (v *NullablePostView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostView(val *PostView) *NullablePostView {
	return &NullablePostView{value: val, isSet: true}
}

func (v NullablePostView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


