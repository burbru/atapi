/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the NotificationView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationView{}

// NotificationView struct for NotificationView
type NotificationView struct {
	Content *MessagePrototype `json:"content,omitempty"`
	Date *int64 `json:"date,omitempty"`
	Id *string `json:"id,omitempty"`
	ReadByReceiver *bool `json:"readByReceiver,omitempty"`
	Receiver *UsernameView `json:"receiver,omitempty"`
	Subject *MessagePrototype `json:"subject,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewNotificationView instantiates a new NotificationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationView() *NotificationView {
	this := NotificationView{}
	return &this
}

// NewNotificationViewWithDefaults instantiates a new NotificationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationViewWithDefaults() *NotificationView {
	this := NotificationView{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *NotificationView) GetContent() MessagePrototype {
	if o == nil || IsNil(o.Content) {
		var ret MessagePrototype
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetContentOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *NotificationView) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given MessagePrototype and assigns it to the Content field.
func (o *NotificationView) SetContent(v MessagePrototype) {
	o.Content = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *NotificationView) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *NotificationView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *NotificationView) SetDate(v int64) {
	o.Date = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationView) SetId(v string) {
	o.Id = &v
}

// GetReadByReceiver returns the ReadByReceiver field value if set, zero value otherwise.
func (o *NotificationView) GetReadByReceiver() bool {
	if o == nil || IsNil(o.ReadByReceiver) {
		var ret bool
		return ret
	}
	return *o.ReadByReceiver
}

// GetReadByReceiverOk returns a tuple with the ReadByReceiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetReadByReceiverOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadByReceiver) {
		return nil, false
	}
	return o.ReadByReceiver, true
}

// HasReadByReceiver returns a boolean if a field has been set.
func (o *NotificationView) HasReadByReceiver() bool {
	if o != nil && !IsNil(o.ReadByReceiver) {
		return true
	}

	return false
}

// SetReadByReceiver gets a reference to the given bool and assigns it to the ReadByReceiver field.
func (o *NotificationView) SetReadByReceiver(v bool) {
	o.ReadByReceiver = &v
}

// GetReceiver returns the Receiver field value if set, zero value otherwise.
func (o *NotificationView) GetReceiver() UsernameView {
	if o == nil || IsNil(o.Receiver) {
		var ret UsernameView
		return ret
	}
	return *o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetReceiverOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Receiver) {
		return nil, false
	}
	return o.Receiver, true
}

// HasReceiver returns a boolean if a field has been set.
func (o *NotificationView) HasReceiver() bool {
	if o != nil && !IsNil(o.Receiver) {
		return true
	}

	return false
}

// SetReceiver gets a reference to the given UsernameView and assigns it to the Receiver field.
func (o *NotificationView) SetReceiver(v UsernameView) {
	o.Receiver = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NotificationView) GetSubject() MessagePrototype {
	if o == nil || IsNil(o.Subject) {
		var ret MessagePrototype
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetSubjectOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NotificationView) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given MessagePrototype and assigns it to the Subject field.
func (o *NotificationView) SetSubject(v MessagePrototype) {
	o.Subject = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NotificationView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NotificationView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *NotificationView) SetVersion(v int64) {
	o.Version = &v
}

func (o NotificationView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReadByReceiver) {
		toSerialize["readByReceiver"] = o.ReadByReceiver
	}
	if !IsNil(o.Receiver) {
		toSerialize["receiver"] = o.Receiver
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableNotificationView struct {
	value *NotificationView
	isSet bool
}

func (v NullableNotificationView) Get() *NotificationView {
	return v.value
}

func (v *NullableNotificationView) Set(val *NotificationView) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationView) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationView(val *NotificationView) *NullableNotificationView {
	return &NullableNotificationView{value: val, isSet: true}
}

func (v NullableNotificationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


