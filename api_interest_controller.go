/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InterestControllerAPIService InterestControllerAPI service
type InterestControllerAPIService service

type ApiGetAuthorInterestUsingGETRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	userId string
}

func (r ApiGetAuthorInterestUsingGETRequest) Execute() (*AuthorInterest, *http.Response, error) {
	return r.ApiService.GetAuthorInterestUsingGETExecute(r)
}

/*
GetAuthorInterestUsingGET Returns personal interest for author

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId userId
 @return ApiGetAuthorInterestUsingGETRequest
*/
func (a *InterestControllerAPIService) GetAuthorInterestUsingGET(ctx context.Context, userId string) ApiGetAuthorInterestUsingGETRequest {
	return ApiGetAuthorInterestUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return AuthorInterest
func (a *InterestControllerAPIService) GetAuthorInterestUsingGETExecute(r ApiGetAuthorInterestUsingGETRequest) (*AuthorInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthorInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.GetAuthorInterestUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/authors/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyInterestUsingGETRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	companyId string
}

func (r ApiGetCompanyInterestUsingGETRequest) Execute() (*CompanyInterest, *http.Response, error) {
	return r.ApiService.GetCompanyInterestUsingGETExecute(r)
}

/*
GetCompanyInterestUsingGET Returns personal interest for company

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId companyId
 @return ApiGetCompanyInterestUsingGETRequest
*/
func (a *InterestControllerAPIService) GetCompanyInterestUsingGET(ctx context.Context, companyId string) ApiGetCompanyInterestUsingGETRequest {
	return ApiGetCompanyInterestUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
	}
}

// Execute executes the request
//  @return CompanyInterest
func (a *InterestControllerAPIService) GetCompanyInterestUsingGETExecute(r ApiGetCompanyInterestUsingGETRequest) (*CompanyInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.GetCompanyInterestUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/companies/{companyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetHashTagInterestUsingGETRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	hashTag string
}

func (r ApiGetHashTagInterestUsingGETRequest) Execute() (*HashTagInterest, *http.Response, error) {
	return r.ApiService.GetHashTagInterestUsingGETExecute(r)
}

/*
GetHashTagInterestUsingGET Returns personal interest for hash tag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hashTag hashTag
 @return ApiGetHashTagInterestUsingGETRequest
*/
func (a *InterestControllerAPIService) GetHashTagInterestUsingGET(ctx context.Context, hashTag string) ApiGetHashTagInterestUsingGETRequest {
	return ApiGetHashTagInterestUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		hashTag: hashTag,
	}
}

// Execute executes the request
//  @return HashTagInterest
func (a *InterestControllerAPIService) GetHashTagInterestUsingGETExecute(r ApiGetHashTagInterestUsingGETRequest) (*HashTagInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HashTagInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.GetHashTagInterestUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/hashtags/{hashTag}"
	localVarPath = strings.Replace(localVarPath, "{"+"hashTag"+"}", url.PathEscape(parameterValueToString(r.hashTag, "hashTag")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAuthorInterestUsingPUTRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	interest *string
	userId string
}

// Interest
func (r ApiPutAuthorInterestUsingPUTRequest) Interest(interest string) ApiPutAuthorInterestUsingPUTRequest {
	r.interest = &interest
	return r
}

func (r ApiPutAuthorInterestUsingPUTRequest) Execute() (*AuthorInterest, *http.Response, error) {
	return r.ApiService.PutAuthorInterestUsingPUTExecute(r)
}

/*
PutAuthorInterestUsingPUT Sets personal interest for author

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId userId
 @return ApiPutAuthorInterestUsingPUTRequest
*/
func (a *InterestControllerAPIService) PutAuthorInterestUsingPUT(ctx context.Context, userId string) ApiPutAuthorInterestUsingPUTRequest {
	return ApiPutAuthorInterestUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return AuthorInterest
func (a *InterestControllerAPIService) PutAuthorInterestUsingPUTExecute(r ApiPutAuthorInterestUsingPUTRequest) (*AuthorInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthorInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.PutAuthorInterestUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/authors/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interest == nil {
		return localVarReturnValue, nil, reportError("interest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "interest", r.interest, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyInterestUsingPUTRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	companyId string
	interest *string
}

// Interest
func (r ApiPutCompanyInterestUsingPUTRequest) Interest(interest string) ApiPutCompanyInterestUsingPUTRequest {
	r.interest = &interest
	return r
}

func (r ApiPutCompanyInterestUsingPUTRequest) Execute() (*CompanyInterest, *http.Response, error) {
	return r.ApiService.PutCompanyInterestUsingPUTExecute(r)
}

/*
PutCompanyInterestUsingPUT Sets personal interest for company

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId companyId
 @return ApiPutCompanyInterestUsingPUTRequest
*/
func (a *InterestControllerAPIService) PutCompanyInterestUsingPUT(ctx context.Context, companyId string) ApiPutCompanyInterestUsingPUTRequest {
	return ApiPutCompanyInterestUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
	}
}

// Execute executes the request
//  @return CompanyInterest
func (a *InterestControllerAPIService) PutCompanyInterestUsingPUTExecute(r ApiPutCompanyInterestUsingPUTRequest) (*CompanyInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.PutCompanyInterestUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/companies/{companyId}"
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interest == nil {
		return localVarReturnValue, nil, reportError("interest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "interest", r.interest, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutHashTagInterestUsingPUTRequest struct {
	ctx context.Context
	ApiService *InterestControllerAPIService
	hashTag string
	interest *string
}

// Interest
func (r ApiPutHashTagInterestUsingPUTRequest) Interest(interest string) ApiPutHashTagInterestUsingPUTRequest {
	r.interest = &interest
	return r
}

func (r ApiPutHashTagInterestUsingPUTRequest) Execute() (*HashTagInterest, *http.Response, error) {
	return r.ApiService.PutHashTagInterestUsingPUTExecute(r)
}

/*
PutHashTagInterestUsingPUT Sets personal interest for hashtag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hashTag hashTag
 @return ApiPutHashTagInterestUsingPUTRequest
*/
func (a *InterestControllerAPIService) PutHashTagInterestUsingPUT(ctx context.Context, hashTag string) ApiPutHashTagInterestUsingPUTRequest {
	return ApiPutHashTagInterestUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		hashTag: hashTag,
	}
}

// Execute executes the request
//  @return HashTagInterest
func (a *InterestControllerAPIService) PutHashTagInterestUsingPUTExecute(r ApiPutHashTagInterestUsingPUTRequest) (*HashTagInterest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HashTagInterest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InterestControllerAPIService.PutHashTagInterestUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/interests/hashtags/{hashTag}"
	localVarPath = strings.Replace(localVarPath, "{"+"hashTag"+"}", url.PathEscape(parameterValueToString(r.hashTag, "hashTag")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.interest == nil {
		return localVarReturnValue, nil, reportError("interest is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "interest", r.interest, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
