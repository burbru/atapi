/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PriceSpreadMininalView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceSpreadMininalView{}

// PriceSpreadMininalView struct for PriceSpreadMininalView
type PriceSpreadMininalView struct {
	AskPrice *float32 `json:"askPrice,omitempty"`
	AskSize *int64 `json:"askSize,omitempty"`
	BidPrice *float32 `json:"bidPrice,omitempty"`
	BidSize *int64 `json:"bidSize,omitempty"`
	LastPrice *SecurityPriceView `json:"lastPrice,omitempty"`
	SpreadAbs *float32 `json:"spreadAbs,omitempty"`
	SpreadPercent *float32 `json:"spreadPercent,omitempty"`
}

// NewPriceSpreadMininalView instantiates a new PriceSpreadMininalView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceSpreadMininalView() *PriceSpreadMininalView {
	this := PriceSpreadMininalView{}
	return &this
}

// NewPriceSpreadMininalViewWithDefaults instantiates a new PriceSpreadMininalView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceSpreadMininalViewWithDefaults() *PriceSpreadMininalView {
	this := PriceSpreadMininalView{}
	return &this
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetAskPrice() float32 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float32
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetAskPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float32 and assigns it to the AskPrice field.
func (o *PriceSpreadMininalView) SetAskPrice(v float32) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetAskSize() int64 {
	if o == nil || IsNil(o.AskSize) {
		var ret int64
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetAskSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int64 and assigns it to the AskSize field.
func (o *PriceSpreadMininalView) SetAskSize(v int64) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetBidPrice() float32 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float32
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetBidPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float32 and assigns it to the BidPrice field.
func (o *PriceSpreadMininalView) SetBidPrice(v float32) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetBidSize() int64 {
	if o == nil || IsNil(o.BidSize) {
		var ret int64
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetBidSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int64 and assigns it to the BidSize field.
func (o *PriceSpreadMininalView) SetBidSize(v int64) {
	o.BidSize = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetLastPrice() SecurityPriceView {
	if o == nil || IsNil(o.LastPrice) {
		var ret SecurityPriceView
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetLastPriceOk() (*SecurityPriceView, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given SecurityPriceView and assigns it to the LastPrice field.
func (o *PriceSpreadMininalView) SetLastPrice(v SecurityPriceView) {
	o.LastPrice = &v
}

// GetSpreadAbs returns the SpreadAbs field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetSpreadAbs() float32 {
	if o == nil || IsNil(o.SpreadAbs) {
		var ret float32
		return ret
	}
	return *o.SpreadAbs
}

// GetSpreadAbsOk returns a tuple with the SpreadAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetSpreadAbsOk() (*float32, bool) {
	if o == nil || IsNil(o.SpreadAbs) {
		return nil, false
	}
	return o.SpreadAbs, true
}

// HasSpreadAbs returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasSpreadAbs() bool {
	if o != nil && !IsNil(o.SpreadAbs) {
		return true
	}

	return false
}

// SetSpreadAbs gets a reference to the given float32 and assigns it to the SpreadAbs field.
func (o *PriceSpreadMininalView) SetSpreadAbs(v float32) {
	o.SpreadAbs = &v
}

// GetSpreadPercent returns the SpreadPercent field value if set, zero value otherwise.
func (o *PriceSpreadMininalView) GetSpreadPercent() float32 {
	if o == nil || IsNil(o.SpreadPercent) {
		var ret float32
		return ret
	}
	return *o.SpreadPercent
}

// GetSpreadPercentOk returns a tuple with the SpreadPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceSpreadMininalView) GetSpreadPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.SpreadPercent) {
		return nil, false
	}
	return o.SpreadPercent, true
}

// HasSpreadPercent returns a boolean if a field has been set.
func (o *PriceSpreadMininalView) HasSpreadPercent() bool {
	if o != nil && !IsNil(o.SpreadPercent) {
		return true
	}

	return false
}

// SetSpreadPercent gets a reference to the given float32 and assigns it to the SpreadPercent field.
func (o *PriceSpreadMininalView) SetSpreadPercent(v float32) {
	o.SpreadPercent = &v
}

func (o PriceSpreadMininalView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceSpreadMininalView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["askSize"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bidSize"] = o.BidSize
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.SpreadAbs) {
		toSerialize["spreadAbs"] = o.SpreadAbs
	}
	if !IsNil(o.SpreadPercent) {
		toSerialize["spreadPercent"] = o.SpreadPercent
	}
	return toSerialize, nil
}

type NullablePriceSpreadMininalView struct {
	value *PriceSpreadMininalView
	isSet bool
}

func (v NullablePriceSpreadMininalView) Get() *PriceSpreadMininalView {
	return v.value
}

func (v *NullablePriceSpreadMininalView) Set(val *PriceSpreadMininalView) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceSpreadMininalView) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceSpreadMininalView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceSpreadMininalView(val *PriceSpreadMininalView) *NullablePriceSpreadMininalView {
	return &NullablePriceSpreadMininalView{value: val, isSet: true}
}

func (v NullablePriceSpreadMininalView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceSpreadMininalView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


