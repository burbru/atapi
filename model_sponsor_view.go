/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the SponsorView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SponsorView{}

// SponsorView struct for SponsorView
type SponsorView struct {
	Hours *int64 `json:"hours,omitempty"`
	Id *string `json:"id,omitempty"`
	User *UsernameView `json:"user,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewSponsorView instantiates a new SponsorView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSponsorView() *SponsorView {
	this := SponsorView{}
	return &this
}

// NewSponsorViewWithDefaults instantiates a new SponsorView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSponsorViewWithDefaults() *SponsorView {
	this := SponsorView{}
	return &this
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *SponsorView) GetHours() int64 {
	if o == nil || IsNil(o.Hours) {
		var ret int64
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsorView) GetHoursOk() (*int64, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *SponsorView) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int64 and assigns it to the Hours field.
func (o *SponsorView) SetHours(v int64) {
	o.Hours = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SponsorView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsorView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SponsorView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SponsorView) SetId(v string) {
	o.Id = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SponsorView) GetUser() UsernameView {
	if o == nil || IsNil(o.User) {
		var ret UsernameView
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsorView) GetUserOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SponsorView) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UsernameView and assigns it to the User field.
func (o *SponsorView) SetUser(v UsernameView) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SponsorView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsorView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SponsorView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SponsorView) SetVersion(v int64) {
	o.Version = &v
}

func (o SponsorView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SponsorView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSponsorView struct {
	value *SponsorView
	isSet bool
}

func (v NullableSponsorView) Get() *SponsorView {
	return v.value
}

func (v *NullableSponsorView) Set(val *SponsorView) {
	v.value = val
	v.isSet = true
}

func (v NullableSponsorView) IsSet() bool {
	return v.isSet
}

func (v *NullableSponsorView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSponsorView(val *SponsorView) *NullableSponsorView {
	return &NullableSponsorView{value: val, isSet: true}
}

func (v NullableSponsorView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSponsorView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


