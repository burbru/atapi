/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the JsonResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonResponse{}

// JsonResponse struct for JsonResponse
type JsonResponse struct {
	Code *int32 `json:"code,omitempty"`
	Message map[string]interface{} `json:"message,omitempty"`
	MessagePrototype *MessagePrototype `json:"messagePrototype,omitempty"`
}

// NewJsonResponse instantiates a new JsonResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonResponse() *JsonResponse {
	this := JsonResponse{}
	return &this
}

// NewJsonResponseWithDefaults instantiates a new JsonResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonResponseWithDefaults() *JsonResponse {
	this := JsonResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *JsonResponse) GetCode() int32 {
	if o == nil || IsNil(o.Code) {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonResponse) GetCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *JsonResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *JsonResponse) SetCode(v int32) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *JsonResponse) GetMessage() map[string]interface{} {
	if o == nil || IsNil(o.Message) {
		var ret map[string]interface{}
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonResponse) GetMessageOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Message) {
		return map[string]interface{}{}, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *JsonResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given map[string]interface{} and assigns it to the Message field.
func (o *JsonResponse) SetMessage(v map[string]interface{}) {
	o.Message = v
}

// GetMessagePrototype returns the MessagePrototype field value if set, zero value otherwise.
func (o *JsonResponse) GetMessagePrototype() MessagePrototype {
	if o == nil || IsNil(o.MessagePrototype) {
		var ret MessagePrototype
		return ret
	}
	return *o.MessagePrototype
}

// GetMessagePrototypeOk returns a tuple with the MessagePrototype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonResponse) GetMessagePrototypeOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.MessagePrototype) {
		return nil, false
	}
	return o.MessagePrototype, true
}

// HasMessagePrototype returns a boolean if a field has been set.
func (o *JsonResponse) HasMessagePrototype() bool {
	if o != nil && !IsNil(o.MessagePrototype) {
		return true
	}

	return false
}

// SetMessagePrototype gets a reference to the given MessagePrototype and assigns it to the MessagePrototype field.
func (o *JsonResponse) SetMessagePrototype(v MessagePrototype) {
	o.MessagePrototype = &v
}

func (o JsonResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.MessagePrototype) {
		toSerialize["messagePrototype"] = o.MessagePrototype
	}
	return toSerialize, nil
}

type NullableJsonResponse struct {
	value *JsonResponse
	isSet bool
}

func (v NullableJsonResponse) Get() *JsonResponse {
	return v.value
}

func (v *NullableJsonResponse) Set(val *JsonResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonResponse(val *JsonResponse) *NullableJsonResponse {
	return &NullableJsonResponse{value: val, isSet: true}
}

func (v NullableJsonResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


