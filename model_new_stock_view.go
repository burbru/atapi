/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the NewStockView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewStockView{}

// NewStockView struct for NewStockView
type NewStockView struct {
	Listing *ListingView `json:"listing,omitempty"`
	PriceDiffInPercent *float32 `json:"priceDiffInPercent,omitempty"`
}

// NewNewStockView instantiates a new NewStockView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewStockView() *NewStockView {
	this := NewStockView{}
	return &this
}

// NewNewStockViewWithDefaults instantiates a new NewStockView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewStockViewWithDefaults() *NewStockView {
	this := NewStockView{}
	return &this
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *NewStockView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewStockView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *NewStockView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *NewStockView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetPriceDiffInPercent returns the PriceDiffInPercent field value if set, zero value otherwise.
func (o *NewStockView) GetPriceDiffInPercent() float32 {
	if o == nil || IsNil(o.PriceDiffInPercent) {
		var ret float32
		return ret
	}
	return *o.PriceDiffInPercent
}

// GetPriceDiffInPercentOk returns a tuple with the PriceDiffInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewStockView) GetPriceDiffInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceDiffInPercent) {
		return nil, false
	}
	return o.PriceDiffInPercent, true
}

// HasPriceDiffInPercent returns a boolean if a field has been set.
func (o *NewStockView) HasPriceDiffInPercent() bool {
	if o != nil && !IsNil(o.PriceDiffInPercent) {
		return true
	}

	return false
}

// SetPriceDiffInPercent gets a reference to the given float32 and assigns it to the PriceDiffInPercent field.
func (o *NewStockView) SetPriceDiffInPercent(v float32) {
	o.PriceDiffInPercent = &v
}

func (o NewStockView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewStockView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.PriceDiffInPercent) {
		toSerialize["priceDiffInPercent"] = o.PriceDiffInPercent
	}
	return toSerialize, nil
}

type NullableNewStockView struct {
	value *NewStockView
	isSet bool
}

func (v NullableNewStockView) Get() *NewStockView {
	return v.value
}

func (v *NullableNewStockView) Set(val *NewStockView) {
	v.value = val
	v.isSet = true
}

func (v NullableNewStockView) IsSet() bool {
	return v.isSet
}

func (v *NullableNewStockView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewStockView(val *NewStockView) *NullableNewStockView {
	return &NullableNewStockView{value: val, isSet: true}
}

func (v NullableNewStockView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewStockView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


