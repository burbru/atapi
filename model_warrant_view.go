/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the WarrantView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WarrantView{}

// WarrantView struct for WarrantView
type WarrantView struct {
	Company *CompanyView `json:"company,omitempty"`
	Id *string `json:"id,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	Ratio *float32 `json:"ratio,omitempty"`
	SubscriptionPeriodDate *int64 `json:"subscriptionPeriodDate,omitempty"`
	Type *string `json:"type,omitempty"`
	Underlying *ListingView `json:"underlying,omitempty"`
	UnderlyingCapValue *float32 `json:"underlyingCapValue,omitempty"`
	UnderlyingValue *float32 `json:"underlyingValue,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewWarrantView instantiates a new WarrantView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWarrantView() *WarrantView {
	this := WarrantView{}
	return &this
}

// NewWarrantViewWithDefaults instantiates a new WarrantView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWarrantViewWithDefaults() *WarrantView {
	this := WarrantView{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *WarrantView) GetCompany() CompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetCompanyOk() (*CompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *WarrantView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompanyView and assigns it to the Company field.
func (o *WarrantView) SetCompany(v CompanyView) {
	o.Company = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WarrantView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WarrantView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WarrantView) SetId(v string) {
	o.Id = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *WarrantView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *WarrantView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *WarrantView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *WarrantView) GetRatio() float32 {
	if o == nil || IsNil(o.Ratio) {
		var ret float32
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.Ratio) {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *WarrantView) HasRatio() bool {
	if o != nil && !IsNil(o.Ratio) {
		return true
	}

	return false
}

// SetRatio gets a reference to the given float32 and assigns it to the Ratio field.
func (o *WarrantView) SetRatio(v float32) {
	o.Ratio = &v
}

// GetSubscriptionPeriodDate returns the SubscriptionPeriodDate field value if set, zero value otherwise.
func (o *WarrantView) GetSubscriptionPeriodDate() int64 {
	if o == nil || IsNil(o.SubscriptionPeriodDate) {
		var ret int64
		return ret
	}
	return *o.SubscriptionPeriodDate
}

// GetSubscriptionPeriodDateOk returns a tuple with the SubscriptionPeriodDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetSubscriptionPeriodDateOk() (*int64, bool) {
	if o == nil || IsNil(o.SubscriptionPeriodDate) {
		return nil, false
	}
	return o.SubscriptionPeriodDate, true
}

// HasSubscriptionPeriodDate returns a boolean if a field has been set.
func (o *WarrantView) HasSubscriptionPeriodDate() bool {
	if o != nil && !IsNil(o.SubscriptionPeriodDate) {
		return true
	}

	return false
}

// SetSubscriptionPeriodDate gets a reference to the given int64 and assigns it to the SubscriptionPeriodDate field.
func (o *WarrantView) SetSubscriptionPeriodDate(v int64) {
	o.SubscriptionPeriodDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WarrantView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WarrantView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WarrantView) SetType(v string) {
	o.Type = &v
}

// GetUnderlying returns the Underlying field value if set, zero value otherwise.
func (o *WarrantView) GetUnderlying() ListingView {
	if o == nil || IsNil(o.Underlying) {
		var ret ListingView
		return ret
	}
	return *o.Underlying
}

// GetUnderlyingOk returns a tuple with the Underlying field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetUnderlyingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Underlying) {
		return nil, false
	}
	return o.Underlying, true
}

// HasUnderlying returns a boolean if a field has been set.
func (o *WarrantView) HasUnderlying() bool {
	if o != nil && !IsNil(o.Underlying) {
		return true
	}

	return false
}

// SetUnderlying gets a reference to the given ListingView and assigns it to the Underlying field.
func (o *WarrantView) SetUnderlying(v ListingView) {
	o.Underlying = &v
}

// GetUnderlyingCapValue returns the UnderlyingCapValue field value if set, zero value otherwise.
func (o *WarrantView) GetUnderlyingCapValue() float32 {
	if o == nil || IsNil(o.UnderlyingCapValue) {
		var ret float32
		return ret
	}
	return *o.UnderlyingCapValue
}

// GetUnderlyingCapValueOk returns a tuple with the UnderlyingCapValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetUnderlyingCapValueOk() (*float32, bool) {
	if o == nil || IsNil(o.UnderlyingCapValue) {
		return nil, false
	}
	return o.UnderlyingCapValue, true
}

// HasUnderlyingCapValue returns a boolean if a field has been set.
func (o *WarrantView) HasUnderlyingCapValue() bool {
	if o != nil && !IsNil(o.UnderlyingCapValue) {
		return true
	}

	return false
}

// SetUnderlyingCapValue gets a reference to the given float32 and assigns it to the UnderlyingCapValue field.
func (o *WarrantView) SetUnderlyingCapValue(v float32) {
	o.UnderlyingCapValue = &v
}

// GetUnderlyingValue returns the UnderlyingValue field value if set, zero value otherwise.
func (o *WarrantView) GetUnderlyingValue() float32 {
	if o == nil || IsNil(o.UnderlyingValue) {
		var ret float32
		return ret
	}
	return *o.UnderlyingValue
}

// GetUnderlyingValueOk returns a tuple with the UnderlyingValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetUnderlyingValueOk() (*float32, bool) {
	if o == nil || IsNil(o.UnderlyingValue) {
		return nil, false
	}
	return o.UnderlyingValue, true
}

// HasUnderlyingValue returns a boolean if a field has been set.
func (o *WarrantView) HasUnderlyingValue() bool {
	if o != nil && !IsNil(o.UnderlyingValue) {
		return true
	}

	return false
}

// SetUnderlyingValue gets a reference to the given float32 and assigns it to the UnderlyingValue field.
func (o *WarrantView) SetUnderlyingValue(v float32) {
	o.UnderlyingValue = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WarrantView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WarrantView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WarrantView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *WarrantView) SetVersion(v int64) {
	o.Version = &v
}

func (o WarrantView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WarrantView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.Ratio) {
		toSerialize["ratio"] = o.Ratio
	}
	if !IsNil(o.SubscriptionPeriodDate) {
		toSerialize["subscriptionPeriodDate"] = o.SubscriptionPeriodDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Underlying) {
		toSerialize["underlying"] = o.Underlying
	}
	if !IsNil(o.UnderlyingCapValue) {
		toSerialize["underlyingCapValue"] = o.UnderlyingCapValue
	}
	if !IsNil(o.UnderlyingValue) {
		toSerialize["underlyingValue"] = o.UnderlyingValue
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableWarrantView struct {
	value *WarrantView
	isSet bool
}

func (v NullableWarrantView) Get() *WarrantView {
	return v.value
}

func (v *NullableWarrantView) Set(val *WarrantView) {
	v.value = val
	v.isSet = true
}

func (v NullableWarrantView) IsSet() bool {
	return v.isSet
}

func (v *NullableWarrantView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWarrantView(val *WarrantView) *NullableWarrantView {
	return &NullableWarrantView{value: val, isSet: true}
}

func (v NullableWarrantView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWarrantView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


