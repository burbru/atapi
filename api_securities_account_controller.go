/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecuritiesAccountControllerAPIService SecuritiesAccountControllerAPI service
type SecuritiesAccountControllerAPIService service

type ApiFindSecuritiesAccountDetailsUsingGETRequest struct {
	ctx context.Context
	ApiService *SecuritiesAccountControllerAPIService
	search *string
}

// Fulltext search
func (r ApiFindSecuritiesAccountDetailsUsingGETRequest) Search(search string) ApiFindSecuritiesAccountDetailsUsingGETRequest {
	r.search = &search
	return r
}

func (r ApiFindSecuritiesAccountDetailsUsingGETRequest) Execute() (*SecuritiesAccountDetailsView, *http.Response, error) {
	return r.ApiService.FindSecuritiesAccountDetailsUsingGETExecute(r)
}

/*
FindSecuritiesAccountDetailsUsingGET Finds securities account details for OTC orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFindSecuritiesAccountDetailsUsingGETRequest
*/
func (a *SecuritiesAccountControllerAPIService) FindSecuritiesAccountDetailsUsingGET(ctx context.Context) ApiFindSecuritiesAccountDetailsUsingGETRequest {
	return ApiFindSecuritiesAccountDetailsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecuritiesAccountDetailsView
func (a *SecuritiesAccountControllerAPIService) FindSecuritiesAccountDetailsUsingGETExecute(r ApiFindSecuritiesAccountDetailsUsingGETRequest) (*SecuritiesAccountDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecuritiesAccountDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritiesAccountControllerAPIService.FindSecuritiesAccountDetailsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/securitiesaccountdetails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.search == nil {
		return localVarReturnValue, nil, reportError("search is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecuritiesAccountDetailsUsingGETRequest struct {
	ctx context.Context
	ApiService *SecuritiesAccountControllerAPIService
	securitiesAccountId string
}

func (r ApiGetSecuritiesAccountDetailsUsingGETRequest) Execute() (*SecuritiesAccountDetailsView, *http.Response, error) {
	return r.ApiService.GetSecuritiesAccountDetailsUsingGETExecute(r)
}

/*
GetSecuritiesAccountDetailsUsingGET Returns securities account details for OTC orders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securitiesAccountId ID of securities account
 @return ApiGetSecuritiesAccountDetailsUsingGETRequest
*/
func (a *SecuritiesAccountControllerAPIService) GetSecuritiesAccountDetailsUsingGET(ctx context.Context, securitiesAccountId string) ApiGetSecuritiesAccountDetailsUsingGETRequest {
	return ApiGetSecuritiesAccountDetailsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		securitiesAccountId: securitiesAccountId,
	}
}

// Execute executes the request
//  @return SecuritiesAccountDetailsView
func (a *SecuritiesAccountControllerAPIService) GetSecuritiesAccountDetailsUsingGETExecute(r ApiGetSecuritiesAccountDetailsUsingGETRequest) (*SecuritiesAccountDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecuritiesAccountDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritiesAccountControllerAPIService.GetSecuritiesAccountDetailsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/securitiesaccountdetails/{securitiesAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securitiesAccountId"+"}", url.PathEscape(parameterValueToString(r.securitiesAccountId, "securitiesAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecuritiesAccountUsingGETRequest struct {
	ctx context.Context
	ApiService *SecuritiesAccountControllerAPIService
}

func (r ApiGetSecuritiesAccountUsingGETRequest) Execute() (*SecuritiesAccountView, *http.Response, error) {
	return r.ApiService.GetSecuritiesAccountUsingGETExecute(r)
}

/*
GetSecuritiesAccountUsingGET Returns private securities account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSecuritiesAccountUsingGETRequest
*/
func (a *SecuritiesAccountControllerAPIService) GetSecuritiesAccountUsingGET(ctx context.Context) ApiGetSecuritiesAccountUsingGETRequest {
	return ApiGetSecuritiesAccountUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecuritiesAccountView
func (a *SecuritiesAccountControllerAPIService) GetSecuritiesAccountUsingGETExecute(r ApiGetSecuritiesAccountUsingGETRequest) (*SecuritiesAccountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecuritiesAccountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecuritiesAccountControllerAPIService.GetSecuritiesAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/securitiesaccount"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
