/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PostLikeView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostLikeView{}

// PostLikeView struct for PostLikeView
type PostLikeView struct {
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	User *CompactUsernameView `json:"user,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewPostLikeView instantiates a new PostLikeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostLikeView() *PostLikeView {
	this := PostLikeView{}
	return &this
}

// NewPostLikeViewWithDefaults instantiates a new PostLikeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostLikeViewWithDefaults() *PostLikeView {
	this := PostLikeView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PostLikeView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLikeView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PostLikeView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PostLikeView) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostLikeView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLikeView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostLikeView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostLikeView) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PostLikeView) GetUser() CompactUsernameView {
	if o == nil || IsNil(o.User) {
		var ret CompactUsernameView
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLikeView) GetUserOk() (*CompactUsernameView, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PostLikeView) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given CompactUsernameView and assigns it to the User field.
func (o *PostLikeView) SetUser(v CompactUsernameView) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PostLikeView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostLikeView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PostLikeView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *PostLikeView) SetVersion(v int64) {
	o.Version = &v
}

func (o PostLikeView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostLikeView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePostLikeView struct {
	value *PostLikeView
	isSet bool
}

func (v NullablePostLikeView) Get() *PostLikeView {
	return v.value
}

func (v *NullablePostLikeView) Set(val *PostLikeView) {
	v.value = val
	v.isSet = true
}

func (v NullablePostLikeView) IsSet() bool {
	return v.isSet
}

func (v *NullablePostLikeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostLikeView(val *PostLikeView) *NullablePostLikeView {
	return &NullablePostLikeView{value: val, isSet: true}
}

func (v NullablePostLikeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostLikeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


