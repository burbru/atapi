/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BankAccountControllerAPIService BankAccountControllerAPI service
type BankAccountControllerAPIService service

type ApiGetBankAccountUsingGETRequest struct {
	ctx context.Context
	ApiService *BankAccountControllerAPIService
	bankAccountId string
}

func (r ApiGetBankAccountUsingGETRequest) Execute() (*BankAccountView, *http.Response, error) {
	return r.ApiService.GetBankAccountUsingGETExecute(r)
}

/*
GetBankAccountUsingGET Returns bank account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Bank account id
 @return ApiGetBankAccountUsingGETRequest
*/
func (a *BankAccountControllerAPIService) GetBankAccountUsingGET(ctx context.Context, bankAccountId string) ApiGetBankAccountUsingGETRequest {
	return ApiGetBankAccountUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
	}
}

// Execute executes the request
//  @return BankAccountView
func (a *BankAccountControllerAPIService) GetBankAccountUsingGETExecute(r ApiGetBankAccountUsingGETRequest) (*BankAccountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankAccountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankAccountControllerAPIService.GetBankAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bankaccounts/{bankAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMyBankAccountUsingGETRequest struct {
	ctx context.Context
	ApiService *BankAccountControllerAPIService
}

func (r ApiGetMyBankAccountUsingGETRequest) Execute() ([]BankAccountView, *http.Response, error) {
	return r.ApiService.GetMyBankAccountUsingGETExecute(r)
}

/*
GetMyBankAccountUsingGET Returns user's bank accounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMyBankAccountUsingGETRequest
*/
func (a *BankAccountControllerAPIService) GetMyBankAccountUsingGET(ctx context.Context) ApiGetMyBankAccountUsingGETRequest {
	return ApiGetMyBankAccountUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BankAccountView
func (a *BankAccountControllerAPIService) GetMyBankAccountUsingGETExecute(r ApiGetMyBankAccountUsingGETRequest) ([]BankAccountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BankAccountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankAccountControllerAPIService.GetMyBankAccountUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/bankaccounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMyBankAccountV1UsingGETRequest struct {
	ctx context.Context
	ApiService *BankAccountControllerAPIService
}

func (r ApiGetMyBankAccountV1UsingGETRequest) Execute() (*BankAccountView, *http.Response, error) {
	return r.ApiService.GetMyBankAccountV1UsingGETExecute(r)
}

/*
GetMyBankAccountV1UsingGET Returns user's bank account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMyBankAccountV1UsingGETRequest

Deprecated
*/
func (a *BankAccountControllerAPIService) GetMyBankAccountV1UsingGET(ctx context.Context) ApiGetMyBankAccountV1UsingGETRequest {
	return ApiGetMyBankAccountV1UsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankAccountView
// Deprecated
func (a *BankAccountControllerAPIService) GetMyBankAccountV1UsingGETExecute(r ApiGetMyBankAccountV1UsingGETRequest) (*BankAccountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankAccountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankAccountControllerAPIService.GetMyBankAccountV1UsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bankaccounts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendMoneyUsingPUTRequest struct {
	ctx context.Context
	ApiService *BankAccountControllerAPIService
	cashAmount *string
	receiverBankAccountId *string
	senderBankAccountId string
}

// Cash amount
func (r ApiSendMoneyUsingPUTRequest) CashAmount(cashAmount string) ApiSendMoneyUsingPUTRequest {
	r.cashAmount = &cashAmount
	return r
}

// Receiver bank account id
func (r ApiSendMoneyUsingPUTRequest) ReceiverBankAccountId(receiverBankAccountId string) ApiSendMoneyUsingPUTRequest {
	r.receiverBankAccountId = &receiverBankAccountId
	return r
}

func (r ApiSendMoneyUsingPUTRequest) Execute() (*MessagePrototype, *http.Response, error) {
	return r.ApiService.SendMoneyUsingPUTExecute(r)
}

/*
SendMoneyUsingPUT Bank transfer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param senderBankAccountId Sender bank account id
 @return ApiSendMoneyUsingPUTRequest
*/
func (a *BankAccountControllerAPIService) SendMoneyUsingPUT(ctx context.Context, senderBankAccountId string) ApiSendMoneyUsingPUTRequest {
	return ApiSendMoneyUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		senderBankAccountId: senderBankAccountId,
	}
}

// Execute executes the request
//  @return MessagePrototype
func (a *BankAccountControllerAPIService) SendMoneyUsingPUTExecute(r ApiSendMoneyUsingPUTRequest) (*MessagePrototype, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessagePrototype
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankAccountControllerAPIService.SendMoneyUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/banktransfer/{senderBankAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"senderBankAccountId"+"}", url.PathEscape(parameterValueToString(r.senderBankAccountId, "senderBankAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cashAmount == nil {
		return localVarReturnValue, nil, reportError("cashAmount is required and must be specified")
	}
	if r.receiverBankAccountId == nil {
		return localVarReturnValue, nil, reportError("receiverBankAccountId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "cashAmount", r.cashAmount, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "receiverBankAccountId", r.receiverBankAccountId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
