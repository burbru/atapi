/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BankingLicenseControllerAPIService BankingLicenseControllerAPI service
type BankingLicenseControllerAPIService service

type ApiCreateBankingLicenseUsingPOSTRequest struct {
	ctx context.Context
	ApiService *BankingLicenseControllerAPIService
	companyId *string
}

// Company id
func (r ApiCreateBankingLicenseUsingPOSTRequest) CompanyId(companyId string) ApiCreateBankingLicenseUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

func (r ApiCreateBankingLicenseUsingPOSTRequest) Execute() (*BankingLicenseView, *http.Response, error) {
	return r.ApiService.CreateBankingLicenseUsingPOSTExecute(r)
}

/*
CreateBankingLicenseUsingPOST Create banking license

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateBankingLicenseUsingPOSTRequest
*/
func (a *BankingLicenseControllerAPIService) CreateBankingLicenseUsingPOST(ctx context.Context) ApiCreateBankingLicenseUsingPOSTRequest {
	return ApiCreateBankingLicenseUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankingLicenseView
func (a *BankingLicenseControllerAPIService) CreateBankingLicenseUsingPOSTExecute(r ApiCreateBankingLicenseUsingPOSTRequest) (*BankingLicenseView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankingLicenseView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankingLicenseControllerAPIService.CreateBankingLicenseUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bankinglicense"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBankingLicenseUsingGETRequest struct {
	ctx context.Context
	ApiService *BankingLicenseControllerAPIService
	bankingLicenseId string
}

func (r ApiGetBankingLicenseUsingGETRequest) Execute() (*BankingLicenseView, *http.Response, error) {
	return r.ApiService.GetBankingLicenseUsingGETExecute(r)
}

/*
GetBankingLicenseUsingGET Returns banking license

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankingLicenseId Banking License id
 @return ApiGetBankingLicenseUsingGETRequest
*/
func (a *BankingLicenseControllerAPIService) GetBankingLicenseUsingGET(ctx context.Context, bankingLicenseId string) ApiGetBankingLicenseUsingGETRequest {
	return ApiGetBankingLicenseUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		bankingLicenseId: bankingLicenseId,
	}
}

// Execute executes the request
//  @return BankingLicenseView
func (a *BankingLicenseControllerAPIService) GetBankingLicenseUsingGETExecute(r ApiGetBankingLicenseUsingGETRequest) (*BankingLicenseView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankingLicenseView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankingLicenseControllerAPIService.GetBankingLicenseUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bankinglicense/{bankingLicenseId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bankingLicenseId"+"}", url.PathEscape(parameterValueToString(r.bankingLicenseId, "bankingLicenseId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyBankingLicenseUsingGETRequest struct {
	ctx context.Context
	ApiService *BankingLicenseControllerAPIService
	companyId *string
}

// Company id
func (r ApiGetCompanyBankingLicenseUsingGETRequest) CompanyId(companyId string) ApiGetCompanyBankingLicenseUsingGETRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGetCompanyBankingLicenseUsingGETRequest) Execute() (*BankingLicenseView, *http.Response, error) {
	return r.ApiService.GetCompanyBankingLicenseUsingGETExecute(r)
}

/*
GetCompanyBankingLicenseUsingGET Returns company's banking license

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyBankingLicenseUsingGETRequest
*/
func (a *BankingLicenseControllerAPIService) GetCompanyBankingLicenseUsingGET(ctx context.Context) ApiGetCompanyBankingLicenseUsingGETRequest {
	return ApiGetCompanyBankingLicenseUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BankingLicenseView
func (a *BankingLicenseControllerAPIService) GetCompanyBankingLicenseUsingGETExecute(r ApiGetCompanyBankingLicenseUsingGETRequest) (*BankingLicenseView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BankingLicenseView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BankingLicenseControllerAPIService.GetCompanyBankingLicenseUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bankinglicense"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
