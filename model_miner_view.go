/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the MinerView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MinerView{}

// MinerView struct for MinerView
type MinerView struct {
	CoinsPerHour *float32 `json:"coinsPerHour,omitempty"`
	Id *string `json:"id,omitempty"`
	MaximumCapacity *float32 `json:"maximumCapacity,omitempty"`
	NextLevelCoinsPerHour *float32 `json:"nextLevelCoinsPerHour,omitempty"`
	NextLevelCosts *float32 `json:"nextLevelCosts,omitempty"`
	Owner *SecuritiesAccountView `json:"owner,omitempty"`
	Storage *float32 `json:"storage,omitempty"`
	TransferableCoins *int64 `json:"transferableCoins,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewMinerView instantiates a new MinerView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMinerView() *MinerView {
	this := MinerView{}
	return &this
}

// NewMinerViewWithDefaults instantiates a new MinerView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMinerViewWithDefaults() *MinerView {
	this := MinerView{}
	return &this
}

// GetCoinsPerHour returns the CoinsPerHour field value if set, zero value otherwise.
func (o *MinerView) GetCoinsPerHour() float32 {
	if o == nil || IsNil(o.CoinsPerHour) {
		var ret float32
		return ret
	}
	return *o.CoinsPerHour
}

// GetCoinsPerHourOk returns a tuple with the CoinsPerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetCoinsPerHourOk() (*float32, bool) {
	if o == nil || IsNil(o.CoinsPerHour) {
		return nil, false
	}
	return o.CoinsPerHour, true
}

// HasCoinsPerHour returns a boolean if a field has been set.
func (o *MinerView) HasCoinsPerHour() bool {
	if o != nil && !IsNil(o.CoinsPerHour) {
		return true
	}

	return false
}

// SetCoinsPerHour gets a reference to the given float32 and assigns it to the CoinsPerHour field.
func (o *MinerView) SetCoinsPerHour(v float32) {
	o.CoinsPerHour = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MinerView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MinerView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MinerView) SetId(v string) {
	o.Id = &v
}

// GetMaximumCapacity returns the MaximumCapacity field value if set, zero value otherwise.
func (o *MinerView) GetMaximumCapacity() float32 {
	if o == nil || IsNil(o.MaximumCapacity) {
		var ret float32
		return ret
	}
	return *o.MaximumCapacity
}

// GetMaximumCapacityOk returns a tuple with the MaximumCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetMaximumCapacityOk() (*float32, bool) {
	if o == nil || IsNil(o.MaximumCapacity) {
		return nil, false
	}
	return o.MaximumCapacity, true
}

// HasMaximumCapacity returns a boolean if a field has been set.
func (o *MinerView) HasMaximumCapacity() bool {
	if o != nil && !IsNil(o.MaximumCapacity) {
		return true
	}

	return false
}

// SetMaximumCapacity gets a reference to the given float32 and assigns it to the MaximumCapacity field.
func (o *MinerView) SetMaximumCapacity(v float32) {
	o.MaximumCapacity = &v
}

// GetNextLevelCoinsPerHour returns the NextLevelCoinsPerHour field value if set, zero value otherwise.
func (o *MinerView) GetNextLevelCoinsPerHour() float32 {
	if o == nil || IsNil(o.NextLevelCoinsPerHour) {
		var ret float32
		return ret
	}
	return *o.NextLevelCoinsPerHour
}

// GetNextLevelCoinsPerHourOk returns a tuple with the NextLevelCoinsPerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetNextLevelCoinsPerHourOk() (*float32, bool) {
	if o == nil || IsNil(o.NextLevelCoinsPerHour) {
		return nil, false
	}
	return o.NextLevelCoinsPerHour, true
}

// HasNextLevelCoinsPerHour returns a boolean if a field has been set.
func (o *MinerView) HasNextLevelCoinsPerHour() bool {
	if o != nil && !IsNil(o.NextLevelCoinsPerHour) {
		return true
	}

	return false
}

// SetNextLevelCoinsPerHour gets a reference to the given float32 and assigns it to the NextLevelCoinsPerHour field.
func (o *MinerView) SetNextLevelCoinsPerHour(v float32) {
	o.NextLevelCoinsPerHour = &v
}

// GetNextLevelCosts returns the NextLevelCosts field value if set, zero value otherwise.
func (o *MinerView) GetNextLevelCosts() float32 {
	if o == nil || IsNil(o.NextLevelCosts) {
		var ret float32
		return ret
	}
	return *o.NextLevelCosts
}

// GetNextLevelCostsOk returns a tuple with the NextLevelCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetNextLevelCostsOk() (*float32, bool) {
	if o == nil || IsNil(o.NextLevelCosts) {
		return nil, false
	}
	return o.NextLevelCosts, true
}

// HasNextLevelCosts returns a boolean if a field has been set.
func (o *MinerView) HasNextLevelCosts() bool {
	if o != nil && !IsNil(o.NextLevelCosts) {
		return true
	}

	return false
}

// SetNextLevelCosts gets a reference to the given float32 and assigns it to the NextLevelCosts field.
func (o *MinerView) SetNextLevelCosts(v float32) {
	o.NextLevelCosts = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *MinerView) GetOwner() SecuritiesAccountView {
	if o == nil || IsNil(o.Owner) {
		var ret SecuritiesAccountView
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetOwnerOk() (*SecuritiesAccountView, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MinerView) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given SecuritiesAccountView and assigns it to the Owner field.
func (o *MinerView) SetOwner(v SecuritiesAccountView) {
	o.Owner = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise.
func (o *MinerView) GetStorage() float32 {
	if o == nil || IsNil(o.Storage) {
		var ret float32
		return ret
	}
	return *o.Storage
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetStorageOk() (*float32, bool) {
	if o == nil || IsNil(o.Storage) {
		return nil, false
	}
	return o.Storage, true
}

// HasStorage returns a boolean if a field has been set.
func (o *MinerView) HasStorage() bool {
	if o != nil && !IsNil(o.Storage) {
		return true
	}

	return false
}

// SetStorage gets a reference to the given float32 and assigns it to the Storage field.
func (o *MinerView) SetStorage(v float32) {
	o.Storage = &v
}

// GetTransferableCoins returns the TransferableCoins field value if set, zero value otherwise.
func (o *MinerView) GetTransferableCoins() int64 {
	if o == nil || IsNil(o.TransferableCoins) {
		var ret int64
		return ret
	}
	return *o.TransferableCoins
}

// GetTransferableCoinsOk returns a tuple with the TransferableCoins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetTransferableCoinsOk() (*int64, bool) {
	if o == nil || IsNil(o.TransferableCoins) {
		return nil, false
	}
	return o.TransferableCoins, true
}

// HasTransferableCoins returns a boolean if a field has been set.
func (o *MinerView) HasTransferableCoins() bool {
	if o != nil && !IsNil(o.TransferableCoins) {
		return true
	}

	return false
}

// SetTransferableCoins gets a reference to the given int64 and assigns it to the TransferableCoins field.
func (o *MinerView) SetTransferableCoins(v int64) {
	o.TransferableCoins = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MinerView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MinerView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MinerView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *MinerView) SetVersion(v int64) {
	o.Version = &v
}

func (o MinerView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MinerView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoinsPerHour) {
		toSerialize["coinsPerHour"] = o.CoinsPerHour
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MaximumCapacity) {
		toSerialize["maximumCapacity"] = o.MaximumCapacity
	}
	if !IsNil(o.NextLevelCoinsPerHour) {
		toSerialize["nextLevelCoinsPerHour"] = o.NextLevelCoinsPerHour
	}
	if !IsNil(o.NextLevelCosts) {
		toSerialize["nextLevelCosts"] = o.NextLevelCosts
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Storage) {
		toSerialize["storage"] = o.Storage
	}
	if !IsNil(o.TransferableCoins) {
		toSerialize["transferableCoins"] = o.TransferableCoins
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableMinerView struct {
	value *MinerView
	isSet bool
}

func (v NullableMinerView) Get() *MinerView {
	return v.value
}

func (v *NullableMinerView) Set(val *MinerView) {
	v.value = val
	v.isSet = true
}

func (v NullableMinerView) IsSet() bool {
	return v.isSet
}

func (v *NullableMinerView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMinerView(val *MinerView) *NullableMinerView {
	return &NullableMinerView{value: val, isSet: true}
}

func (v NullableMinerView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMinerView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


