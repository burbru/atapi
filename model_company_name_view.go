/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the CompanyNameView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyNameView{}

// CompanyNameView struct for CompanyNameView
type CompanyNameView struct {
	Id *string `json:"id,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	Name *string `json:"name,omitempty"`
	SecurityIdentifier *string `json:"securityIdentifier,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewCompanyNameView instantiates a new CompanyNameView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyNameView() *CompanyNameView {
	this := CompanyNameView{}
	return &this
}

// NewCompanyNameViewWithDefaults instantiates a new CompanyNameView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyNameViewWithDefaults() *CompanyNameView {
	this := CompanyNameView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompanyNameView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNameView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompanyNameView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompanyNameView) SetId(v string) {
	o.Id = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *CompanyNameView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNameView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *CompanyNameView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *CompanyNameView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompanyNameView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNameView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompanyNameView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompanyNameView) SetName(v string) {
	o.Name = &v
}

// GetSecurityIdentifier returns the SecurityIdentifier field value if set, zero value otherwise.
func (o *CompanyNameView) GetSecurityIdentifier() string {
	if o == nil || IsNil(o.SecurityIdentifier) {
		var ret string
		return ret
	}
	return *o.SecurityIdentifier
}

// GetSecurityIdentifierOk returns a tuple with the SecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNameView) GetSecurityIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityIdentifier) {
		return nil, false
	}
	return o.SecurityIdentifier, true
}

// HasSecurityIdentifier returns a boolean if a field has been set.
func (o *CompanyNameView) HasSecurityIdentifier() bool {
	if o != nil && !IsNil(o.SecurityIdentifier) {
		return true
	}

	return false
}

// SetSecurityIdentifier gets a reference to the given string and assigns it to the SecurityIdentifier field.
func (o *CompanyNameView) SetSecurityIdentifier(v string) {
	o.SecurityIdentifier = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CompanyNameView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyNameView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CompanyNameView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *CompanyNameView) SetVersion(v int64) {
	o.Version = &v
}

func (o CompanyNameView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyNameView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SecurityIdentifier) {
		toSerialize["securityIdentifier"] = o.SecurityIdentifier
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCompanyNameView struct {
	value *CompanyNameView
	isSet bool
}

func (v NullableCompanyNameView) Get() *CompanyNameView {
	return v.value
}

func (v *NullableCompanyNameView) Set(val *CompanyNameView) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyNameView) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyNameView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyNameView(val *CompanyNameView) *NullableCompanyNameView {
	return &NullableCompanyNameView{value: val, isSet: true}
}

func (v NullableCompanyNameView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyNameView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


