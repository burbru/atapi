/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the MessageBoardView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageBoardView{}

// MessageBoardView struct for MessageBoardView
type MessageBoardView struct {
	DateCreated *int64 `json:"dateCreated,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	Locale *string `json:"locale,omitempty"`
	Name *string `json:"name,omitempty"`
	Parent *MessageBoardView `json:"parent,omitempty"`
	PublicBoard *bool `json:"publicBoard,omitempty"`
	Root *MessageBoardView `json:"root,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewMessageBoardView instantiates a new MessageBoardView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageBoardView() *MessageBoardView {
	this := MessageBoardView{}
	return &this
}

// NewMessageBoardViewWithDefaults instantiates a new MessageBoardView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageBoardViewWithDefaults() *MessageBoardView {
	this := MessageBoardView{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *MessageBoardView) GetDateCreated() int64 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int64
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetDateCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *MessageBoardView) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int64 and assigns it to the DateCreated field.
func (o *MessageBoardView) SetDateCreated(v int64) {
	o.DateCreated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MessageBoardView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MessageBoardView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MessageBoardView) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MessageBoardView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MessageBoardView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MessageBoardView) SetId(v string) {
	o.Id = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *MessageBoardView) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *MessageBoardView) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *MessageBoardView) SetLocale(v string) {
	o.Locale = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MessageBoardView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MessageBoardView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MessageBoardView) SetName(v string) {
	o.Name = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *MessageBoardView) GetParent() MessageBoardView {
	if o == nil || IsNil(o.Parent) {
		var ret MessageBoardView
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetParentOk() (*MessageBoardView, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *MessageBoardView) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given MessageBoardView and assigns it to the Parent field.
func (o *MessageBoardView) SetParent(v MessageBoardView) {
	o.Parent = &v
}

// GetPublicBoard returns the PublicBoard field value if set, zero value otherwise.
func (o *MessageBoardView) GetPublicBoard() bool {
	if o == nil || IsNil(o.PublicBoard) {
		var ret bool
		return ret
	}
	return *o.PublicBoard
}

// GetPublicBoardOk returns a tuple with the PublicBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetPublicBoardOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicBoard) {
		return nil, false
	}
	return o.PublicBoard, true
}

// HasPublicBoard returns a boolean if a field has been set.
func (o *MessageBoardView) HasPublicBoard() bool {
	if o != nil && !IsNil(o.PublicBoard) {
		return true
	}

	return false
}

// SetPublicBoard gets a reference to the given bool and assigns it to the PublicBoard field.
func (o *MessageBoardView) SetPublicBoard(v bool) {
	o.PublicBoard = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *MessageBoardView) GetRoot() MessageBoardView {
	if o == nil || IsNil(o.Root) {
		var ret MessageBoardView
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetRootOk() (*MessageBoardView, bool) {
	if o == nil || IsNil(o.Root) {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *MessageBoardView) HasRoot() bool {
	if o != nil && !IsNil(o.Root) {
		return true
	}

	return false
}

// SetRoot gets a reference to the given MessageBoardView and assigns it to the Root field.
func (o *MessageBoardView) SetRoot(v MessageBoardView) {
	o.Root = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MessageBoardView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageBoardView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MessageBoardView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *MessageBoardView) SetVersion(v int64) {
	o.Version = &v
}

func (o MessageBoardView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageBoardView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.PublicBoard) {
		toSerialize["publicBoard"] = o.PublicBoard
	}
	if !IsNil(o.Root) {
		toSerialize["root"] = o.Root
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableMessageBoardView struct {
	value *MessageBoardView
	isSet bool
}

func (v NullableMessageBoardView) Get() *MessageBoardView {
	return v.value
}

func (v *NullableMessageBoardView) Set(val *MessageBoardView) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageBoardView) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageBoardView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageBoardView(val *MessageBoardView) *NullableMessageBoardView {
	return &NullableMessageBoardView{value: val, isSet: true}
}

func (v NullableMessageBoardView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageBoardView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


