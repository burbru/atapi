/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the UserCapabilitiesWithPartnerIdView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCapabilitiesWithPartnerIdView{}

// UserCapabilitiesWithPartnerIdView struct for UserCapabilitiesWithPartnerIdView
type UserCapabilitiesWithPartnerIdView struct {
	AchievementCount *int64 `json:"achievementCount,omitempty"`
	AchievementTotal *int64 `json:"achievementTotal,omitempty"`
	LastSponsoringDate *int64 `json:"lastSponsoringDate,omitempty"`
	Level2User *bool `json:"level2User,omitempty"`
	Level2UserEndDate *int64 `json:"level2UserEndDate,omitempty"`
	Locale *string `json:"locale,omitempty"`
	Partner *bool `json:"partner,omitempty"`
	PartnerId *string `json:"partnerId,omitempty"`
	Premium *bool `json:"premium,omitempty"`
	PremiumEndDate *int64 `json:"premiumEndDate,omitempty"`
	SponsoredHours *int64 `json:"sponsoredHours,omitempty"`
	TeamDepartment *string `json:"teamDepartment,omitempty"`
	TeamRole *string `json:"teamRole,omitempty"`
	TeamRoleDescription *string `json:"teamRoleDescription,omitempty"`
}

// NewUserCapabilitiesWithPartnerIdView instantiates a new UserCapabilitiesWithPartnerIdView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCapabilitiesWithPartnerIdView() *UserCapabilitiesWithPartnerIdView {
	this := UserCapabilitiesWithPartnerIdView{}
	return &this
}

// NewUserCapabilitiesWithPartnerIdViewWithDefaults instantiates a new UserCapabilitiesWithPartnerIdView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCapabilitiesWithPartnerIdViewWithDefaults() *UserCapabilitiesWithPartnerIdView {
	this := UserCapabilitiesWithPartnerIdView{}
	return &this
}

// GetAchievementCount returns the AchievementCount field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetAchievementCount() int64 {
	if o == nil || IsNil(o.AchievementCount) {
		var ret int64
		return ret
	}
	return *o.AchievementCount
}

// GetAchievementCountOk returns a tuple with the AchievementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetAchievementCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AchievementCount) {
		return nil, false
	}
	return o.AchievementCount, true
}

// HasAchievementCount returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasAchievementCount() bool {
	if o != nil && !IsNil(o.AchievementCount) {
		return true
	}

	return false
}

// SetAchievementCount gets a reference to the given int64 and assigns it to the AchievementCount field.
func (o *UserCapabilitiesWithPartnerIdView) SetAchievementCount(v int64) {
	o.AchievementCount = &v
}

// GetAchievementTotal returns the AchievementTotal field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetAchievementTotal() int64 {
	if o == nil || IsNil(o.AchievementTotal) {
		var ret int64
		return ret
	}
	return *o.AchievementTotal
}

// GetAchievementTotalOk returns a tuple with the AchievementTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetAchievementTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AchievementTotal) {
		return nil, false
	}
	return o.AchievementTotal, true
}

// HasAchievementTotal returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasAchievementTotal() bool {
	if o != nil && !IsNil(o.AchievementTotal) {
		return true
	}

	return false
}

// SetAchievementTotal gets a reference to the given int64 and assigns it to the AchievementTotal field.
func (o *UserCapabilitiesWithPartnerIdView) SetAchievementTotal(v int64) {
	o.AchievementTotal = &v
}

// GetLastSponsoringDate returns the LastSponsoringDate field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetLastSponsoringDate() int64 {
	if o == nil || IsNil(o.LastSponsoringDate) {
		var ret int64
		return ret
	}
	return *o.LastSponsoringDate
}

// GetLastSponsoringDateOk returns a tuple with the LastSponsoringDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetLastSponsoringDateOk() (*int64, bool) {
	if o == nil || IsNil(o.LastSponsoringDate) {
		return nil, false
	}
	return o.LastSponsoringDate, true
}

// HasLastSponsoringDate returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasLastSponsoringDate() bool {
	if o != nil && !IsNil(o.LastSponsoringDate) {
		return true
	}

	return false
}

// SetLastSponsoringDate gets a reference to the given int64 and assigns it to the LastSponsoringDate field.
func (o *UserCapabilitiesWithPartnerIdView) SetLastSponsoringDate(v int64) {
	o.LastSponsoringDate = &v
}

// GetLevel2User returns the Level2User field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetLevel2User() bool {
	if o == nil || IsNil(o.Level2User) {
		var ret bool
		return ret
	}
	return *o.Level2User
}

// GetLevel2UserOk returns a tuple with the Level2User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetLevel2UserOk() (*bool, bool) {
	if o == nil || IsNil(o.Level2User) {
		return nil, false
	}
	return o.Level2User, true
}

// HasLevel2User returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasLevel2User() bool {
	if o != nil && !IsNil(o.Level2User) {
		return true
	}

	return false
}

// SetLevel2User gets a reference to the given bool and assigns it to the Level2User field.
func (o *UserCapabilitiesWithPartnerIdView) SetLevel2User(v bool) {
	o.Level2User = &v
}

// GetLevel2UserEndDate returns the Level2UserEndDate field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetLevel2UserEndDate() int64 {
	if o == nil || IsNil(o.Level2UserEndDate) {
		var ret int64
		return ret
	}
	return *o.Level2UserEndDate
}

// GetLevel2UserEndDateOk returns a tuple with the Level2UserEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetLevel2UserEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Level2UserEndDate) {
		return nil, false
	}
	return o.Level2UserEndDate, true
}

// HasLevel2UserEndDate returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasLevel2UserEndDate() bool {
	if o != nil && !IsNil(o.Level2UserEndDate) {
		return true
	}

	return false
}

// SetLevel2UserEndDate gets a reference to the given int64 and assigns it to the Level2UserEndDate field.
func (o *UserCapabilitiesWithPartnerIdView) SetLevel2UserEndDate(v int64) {
	o.Level2UserEndDate = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *UserCapabilitiesWithPartnerIdView) SetLocale(v string) {
	o.Locale = &v
}

// GetPartner returns the Partner field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetPartner() bool {
	if o == nil || IsNil(o.Partner) {
		var ret bool
		return ret
	}
	return *o.Partner
}

// GetPartnerOk returns a tuple with the Partner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetPartnerOk() (*bool, bool) {
	if o == nil || IsNil(o.Partner) {
		return nil, false
	}
	return o.Partner, true
}

// HasPartner returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasPartner() bool {
	if o != nil && !IsNil(o.Partner) {
		return true
	}

	return false
}

// SetPartner gets a reference to the given bool and assigns it to the Partner field.
func (o *UserCapabilitiesWithPartnerIdView) SetPartner(v bool) {
	o.Partner = &v
}

// GetPartnerId returns the PartnerId field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetPartnerId() string {
	if o == nil || IsNil(o.PartnerId) {
		var ret string
		return ret
	}
	return *o.PartnerId
}

// GetPartnerIdOk returns a tuple with the PartnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetPartnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.PartnerId) {
		return nil, false
	}
	return o.PartnerId, true
}

// HasPartnerId returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasPartnerId() bool {
	if o != nil && !IsNil(o.PartnerId) {
		return true
	}

	return false
}

// SetPartnerId gets a reference to the given string and assigns it to the PartnerId field.
func (o *UserCapabilitiesWithPartnerIdView) SetPartnerId(v string) {
	o.PartnerId = &v
}

// GetPremium returns the Premium field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetPremium() bool {
	if o == nil || IsNil(o.Premium) {
		var ret bool
		return ret
	}
	return *o.Premium
}

// GetPremiumOk returns a tuple with the Premium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetPremiumOk() (*bool, bool) {
	if o == nil || IsNil(o.Premium) {
		return nil, false
	}
	return o.Premium, true
}

// HasPremium returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasPremium() bool {
	if o != nil && !IsNil(o.Premium) {
		return true
	}

	return false
}

// SetPremium gets a reference to the given bool and assigns it to the Premium field.
func (o *UserCapabilitiesWithPartnerIdView) SetPremium(v bool) {
	o.Premium = &v
}

// GetPremiumEndDate returns the PremiumEndDate field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetPremiumEndDate() int64 {
	if o == nil || IsNil(o.PremiumEndDate) {
		var ret int64
		return ret
	}
	return *o.PremiumEndDate
}

// GetPremiumEndDateOk returns a tuple with the PremiumEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetPremiumEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.PremiumEndDate) {
		return nil, false
	}
	return o.PremiumEndDate, true
}

// HasPremiumEndDate returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasPremiumEndDate() bool {
	if o != nil && !IsNil(o.PremiumEndDate) {
		return true
	}

	return false
}

// SetPremiumEndDate gets a reference to the given int64 and assigns it to the PremiumEndDate field.
func (o *UserCapabilitiesWithPartnerIdView) SetPremiumEndDate(v int64) {
	o.PremiumEndDate = &v
}

// GetSponsoredHours returns the SponsoredHours field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetSponsoredHours() int64 {
	if o == nil || IsNil(o.SponsoredHours) {
		var ret int64
		return ret
	}
	return *o.SponsoredHours
}

// GetSponsoredHoursOk returns a tuple with the SponsoredHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetSponsoredHoursOk() (*int64, bool) {
	if o == nil || IsNil(o.SponsoredHours) {
		return nil, false
	}
	return o.SponsoredHours, true
}

// HasSponsoredHours returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasSponsoredHours() bool {
	if o != nil && !IsNil(o.SponsoredHours) {
		return true
	}

	return false
}

// SetSponsoredHours gets a reference to the given int64 and assigns it to the SponsoredHours field.
func (o *UserCapabilitiesWithPartnerIdView) SetSponsoredHours(v int64) {
	o.SponsoredHours = &v
}

// GetTeamDepartment returns the TeamDepartment field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamDepartment() string {
	if o == nil || IsNil(o.TeamDepartment) {
		var ret string
		return ret
	}
	return *o.TeamDepartment
}

// GetTeamDepartmentOk returns a tuple with the TeamDepartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamDepartmentOk() (*string, bool) {
	if o == nil || IsNil(o.TeamDepartment) {
		return nil, false
	}
	return o.TeamDepartment, true
}

// HasTeamDepartment returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasTeamDepartment() bool {
	if o != nil && !IsNil(o.TeamDepartment) {
		return true
	}

	return false
}

// SetTeamDepartment gets a reference to the given string and assigns it to the TeamDepartment field.
func (o *UserCapabilitiesWithPartnerIdView) SetTeamDepartment(v string) {
	o.TeamDepartment = &v
}

// GetTeamRole returns the TeamRole field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamRole() string {
	if o == nil || IsNil(o.TeamRole) {
		var ret string
		return ret
	}
	return *o.TeamRole
}

// GetTeamRoleOk returns a tuple with the TeamRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamRoleOk() (*string, bool) {
	if o == nil || IsNil(o.TeamRole) {
		return nil, false
	}
	return o.TeamRole, true
}

// HasTeamRole returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasTeamRole() bool {
	if o != nil && !IsNil(o.TeamRole) {
		return true
	}

	return false
}

// SetTeamRole gets a reference to the given string and assigns it to the TeamRole field.
func (o *UserCapabilitiesWithPartnerIdView) SetTeamRole(v string) {
	o.TeamRole = &v
}

// GetTeamRoleDescription returns the TeamRoleDescription field value if set, zero value otherwise.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamRoleDescription() string {
	if o == nil || IsNil(o.TeamRoleDescription) {
		var ret string
		return ret
	}
	return *o.TeamRoleDescription
}

// GetTeamRoleDescriptionOk returns a tuple with the TeamRoleDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCapabilitiesWithPartnerIdView) GetTeamRoleDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.TeamRoleDescription) {
		return nil, false
	}
	return o.TeamRoleDescription, true
}

// HasTeamRoleDescription returns a boolean if a field has been set.
func (o *UserCapabilitiesWithPartnerIdView) HasTeamRoleDescription() bool {
	if o != nil && !IsNil(o.TeamRoleDescription) {
		return true
	}

	return false
}

// SetTeamRoleDescription gets a reference to the given string and assigns it to the TeamRoleDescription field.
func (o *UserCapabilitiesWithPartnerIdView) SetTeamRoleDescription(v string) {
	o.TeamRoleDescription = &v
}

func (o UserCapabilitiesWithPartnerIdView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCapabilitiesWithPartnerIdView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AchievementCount) {
		toSerialize["achievementCount"] = o.AchievementCount
	}
	if !IsNil(o.AchievementTotal) {
		toSerialize["achievementTotal"] = o.AchievementTotal
	}
	if !IsNil(o.LastSponsoringDate) {
		toSerialize["lastSponsoringDate"] = o.LastSponsoringDate
	}
	if !IsNil(o.Level2User) {
		toSerialize["level2User"] = o.Level2User
	}
	if !IsNil(o.Level2UserEndDate) {
		toSerialize["level2UserEndDate"] = o.Level2UserEndDate
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Partner) {
		toSerialize["partner"] = o.Partner
	}
	if !IsNil(o.PartnerId) {
		toSerialize["partnerId"] = o.PartnerId
	}
	if !IsNil(o.Premium) {
		toSerialize["premium"] = o.Premium
	}
	if !IsNil(o.PremiumEndDate) {
		toSerialize["premiumEndDate"] = o.PremiumEndDate
	}
	if !IsNil(o.SponsoredHours) {
		toSerialize["sponsoredHours"] = o.SponsoredHours
	}
	if !IsNil(o.TeamDepartment) {
		toSerialize["teamDepartment"] = o.TeamDepartment
	}
	if !IsNil(o.TeamRole) {
		toSerialize["teamRole"] = o.TeamRole
	}
	if !IsNil(o.TeamRoleDescription) {
		toSerialize["teamRoleDescription"] = o.TeamRoleDescription
	}
	return toSerialize, nil
}

type NullableUserCapabilitiesWithPartnerIdView struct {
	value *UserCapabilitiesWithPartnerIdView
	isSet bool
}

func (v NullableUserCapabilitiesWithPartnerIdView) Get() *UserCapabilitiesWithPartnerIdView {
	return v.value
}

func (v *NullableUserCapabilitiesWithPartnerIdView) Set(val *UserCapabilitiesWithPartnerIdView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCapabilitiesWithPartnerIdView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCapabilitiesWithPartnerIdView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCapabilitiesWithPartnerIdView(val *UserCapabilitiesWithPartnerIdView) *NullableUserCapabilitiesWithPartnerIdView {
	return &NullableUserCapabilitiesWithPartnerIdView{value: val, isSet: true}
}

func (v NullableUserCapabilitiesWithPartnerIdView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCapabilitiesWithPartnerIdView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


