/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the CompanyAchievementProgressView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyAchievementProgressView{}

// CompanyAchievementProgressView struct for CompanyAchievementProgressView
type CompanyAchievementProgressView struct {
	CoinReward *int64 `json:"coinReward,omitempty"`
	Description *string `json:"description,omitempty"`
	ProgressInPercent *float32 `json:"progressInPercent,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewCompanyAchievementProgressView instantiates a new CompanyAchievementProgressView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyAchievementProgressView() *CompanyAchievementProgressView {
	this := CompanyAchievementProgressView{}
	return &this
}

// NewCompanyAchievementProgressViewWithDefaults instantiates a new CompanyAchievementProgressView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyAchievementProgressViewWithDefaults() *CompanyAchievementProgressView {
	this := CompanyAchievementProgressView{}
	return &this
}

// GetCoinReward returns the CoinReward field value if set, zero value otherwise.
func (o *CompanyAchievementProgressView) GetCoinReward() int64 {
	if o == nil || IsNil(o.CoinReward) {
		var ret int64
		return ret
	}
	return *o.CoinReward
}

// GetCoinRewardOk returns a tuple with the CoinReward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAchievementProgressView) GetCoinRewardOk() (*int64, bool) {
	if o == nil || IsNil(o.CoinReward) {
		return nil, false
	}
	return o.CoinReward, true
}

// HasCoinReward returns a boolean if a field has been set.
func (o *CompanyAchievementProgressView) HasCoinReward() bool {
	if o != nil && !IsNil(o.CoinReward) {
		return true
	}

	return false
}

// SetCoinReward gets a reference to the given int64 and assigns it to the CoinReward field.
func (o *CompanyAchievementProgressView) SetCoinReward(v int64) {
	o.CoinReward = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CompanyAchievementProgressView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAchievementProgressView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CompanyAchievementProgressView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CompanyAchievementProgressView) SetDescription(v string) {
	o.Description = &v
}

// GetProgressInPercent returns the ProgressInPercent field value if set, zero value otherwise.
func (o *CompanyAchievementProgressView) GetProgressInPercent() float32 {
	if o == nil || IsNil(o.ProgressInPercent) {
		var ret float32
		return ret
	}
	return *o.ProgressInPercent
}

// GetProgressInPercentOk returns a tuple with the ProgressInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAchievementProgressView) GetProgressInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.ProgressInPercent) {
		return nil, false
	}
	return o.ProgressInPercent, true
}

// HasProgressInPercent returns a boolean if a field has been set.
func (o *CompanyAchievementProgressView) HasProgressInPercent() bool {
	if o != nil && !IsNil(o.ProgressInPercent) {
		return true
	}

	return false
}

// SetProgressInPercent gets a reference to the given float32 and assigns it to the ProgressInPercent field.
func (o *CompanyAchievementProgressView) SetProgressInPercent(v float32) {
	o.ProgressInPercent = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CompanyAchievementProgressView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyAchievementProgressView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CompanyAchievementProgressView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CompanyAchievementProgressView) SetType(v string) {
	o.Type = &v
}

func (o CompanyAchievementProgressView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyAchievementProgressView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CoinReward) {
		toSerialize["coinReward"] = o.CoinReward
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProgressInPercent) {
		toSerialize["progressInPercent"] = o.ProgressInPercent
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCompanyAchievementProgressView struct {
	value *CompanyAchievementProgressView
	isSet bool
}

func (v NullableCompanyAchievementProgressView) Get() *CompanyAchievementProgressView {
	return v.value
}

func (v *NullableCompanyAchievementProgressView) Set(val *CompanyAchievementProgressView) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAchievementProgressView) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAchievementProgressView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAchievementProgressView(val *CompanyAchievementProgressView) *NullableCompanyAchievementProgressView {
	return &NullableCompanyAchievementProgressView{value: val, isSet: true}
}

func (v NullableCompanyAchievementProgressView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAchievementProgressView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


