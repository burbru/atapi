/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the BondView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BondView{}

// BondView struct for BondView
type BondView struct {
	FaceValue *float32 `json:"faceValue,omitempty"`
	Id *string `json:"id,omitempty"`
	InterestRate *float32 `json:"interestRate,omitempty"`
	IssueDate *int64 `json:"issueDate,omitempty"`
	Issuer *CompanyNameView `json:"issuer,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	MaturityDate *int64 `json:"maturityDate,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceSpread *PriceSpreadView `json:"priceSpread,omitempty"`
	RepurchaseListing *ListingView `json:"repurchaseListing,omitempty"`
	Version *int64 `json:"version,omitempty"`
	Volume *float32 `json:"volume,omitempty"`
}

// NewBondView instantiates a new BondView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondView() *BondView {
	this := BondView{}
	return &this
}

// NewBondViewWithDefaults instantiates a new BondView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondViewWithDefaults() *BondView {
	this := BondView{}
	return &this
}

// GetFaceValue returns the FaceValue field value if set, zero value otherwise.
func (o *BondView) GetFaceValue() float32 {
	if o == nil || IsNil(o.FaceValue) {
		var ret float32
		return ret
	}
	return *o.FaceValue
}

// GetFaceValueOk returns a tuple with the FaceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetFaceValueOk() (*float32, bool) {
	if o == nil || IsNil(o.FaceValue) {
		return nil, false
	}
	return o.FaceValue, true
}

// HasFaceValue returns a boolean if a field has been set.
func (o *BondView) HasFaceValue() bool {
	if o != nil && !IsNil(o.FaceValue) {
		return true
	}

	return false
}

// SetFaceValue gets a reference to the given float32 and assigns it to the FaceValue field.
func (o *BondView) SetFaceValue(v float32) {
	o.FaceValue = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BondView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BondView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BondView) SetId(v string) {
	o.Id = &v
}

// GetInterestRate returns the InterestRate field value if set, zero value otherwise.
func (o *BondView) GetInterestRate() float32 {
	if o == nil || IsNil(o.InterestRate) {
		var ret float32
		return ret
	}
	return *o.InterestRate
}

// GetInterestRateOk returns a tuple with the InterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetInterestRateOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestRate) {
		return nil, false
	}
	return o.InterestRate, true
}

// HasInterestRate returns a boolean if a field has been set.
func (o *BondView) HasInterestRate() bool {
	if o != nil && !IsNil(o.InterestRate) {
		return true
	}

	return false
}

// SetInterestRate gets a reference to the given float32 and assigns it to the InterestRate field.
func (o *BondView) SetInterestRate(v float32) {
	o.InterestRate = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *BondView) GetIssueDate() int64 {
	if o == nil || IsNil(o.IssueDate) {
		var ret int64
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetIssueDateOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *BondView) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given int64 and assigns it to the IssueDate field.
func (o *BondView) SetIssueDate(v int64) {
	o.IssueDate = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *BondView) GetIssuer() CompanyNameView {
	if o == nil || IsNil(o.Issuer) {
		var ret CompanyNameView
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetIssuerOk() (*CompanyNameView, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *BondView) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given CompanyNameView and assigns it to the Issuer field.
func (o *BondView) SetIssuer(v CompanyNameView) {
	o.Issuer = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *BondView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *BondView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *BondView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetMaturityDate returns the MaturityDate field value if set, zero value otherwise.
func (o *BondView) GetMaturityDate() int64 {
	if o == nil || IsNil(o.MaturityDate) {
		var ret int64
		return ret
	}
	return *o.MaturityDate
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetMaturityDateOk() (*int64, bool) {
	if o == nil || IsNil(o.MaturityDate) {
		return nil, false
	}
	return o.MaturityDate, true
}

// HasMaturityDate returns a boolean if a field has been set.
func (o *BondView) HasMaturityDate() bool {
	if o != nil && !IsNil(o.MaturityDate) {
		return true
	}

	return false
}

// SetMaturityDate gets a reference to the given int64 and assigns it to the MaturityDate field.
func (o *BondView) SetMaturityDate(v int64) {
	o.MaturityDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BondView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BondView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BondView) SetName(v string) {
	o.Name = &v
}

// GetPriceSpread returns the PriceSpread field value if set, zero value otherwise.
func (o *BondView) GetPriceSpread() PriceSpreadView {
	if o == nil || IsNil(o.PriceSpread) {
		var ret PriceSpreadView
		return ret
	}
	return *o.PriceSpread
}

// GetPriceSpreadOk returns a tuple with the PriceSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetPriceSpreadOk() (*PriceSpreadView, bool) {
	if o == nil || IsNil(o.PriceSpread) {
		return nil, false
	}
	return o.PriceSpread, true
}

// HasPriceSpread returns a boolean if a field has been set.
func (o *BondView) HasPriceSpread() bool {
	if o != nil && !IsNil(o.PriceSpread) {
		return true
	}

	return false
}

// SetPriceSpread gets a reference to the given PriceSpreadView and assigns it to the PriceSpread field.
func (o *BondView) SetPriceSpread(v PriceSpreadView) {
	o.PriceSpread = &v
}

// GetRepurchaseListing returns the RepurchaseListing field value if set, zero value otherwise.
func (o *BondView) GetRepurchaseListing() ListingView {
	if o == nil || IsNil(o.RepurchaseListing) {
		var ret ListingView
		return ret
	}
	return *o.RepurchaseListing
}

// GetRepurchaseListingOk returns a tuple with the RepurchaseListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetRepurchaseListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.RepurchaseListing) {
		return nil, false
	}
	return o.RepurchaseListing, true
}

// HasRepurchaseListing returns a boolean if a field has been set.
func (o *BondView) HasRepurchaseListing() bool {
	if o != nil && !IsNil(o.RepurchaseListing) {
		return true
	}

	return false
}

// SetRepurchaseListing gets a reference to the given ListingView and assigns it to the RepurchaseListing field.
func (o *BondView) SetRepurchaseListing(v ListingView) {
	o.RepurchaseListing = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *BondView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *BondView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *BondView) SetVersion(v int64) {
	o.Version = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *BondView) GetVolume() float32 {
	if o == nil || IsNil(o.Volume) {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondView) GetVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *BondView) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *BondView) SetVolume(v float32) {
	o.Volume = &v
}

func (o BondView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BondView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FaceValue) {
		toSerialize["faceValue"] = o.FaceValue
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InterestRate) {
		toSerialize["interestRate"] = o.InterestRate
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.MaturityDate) {
		toSerialize["maturityDate"] = o.MaturityDate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PriceSpread) {
		toSerialize["priceSpread"] = o.PriceSpread
	}
	if !IsNil(o.RepurchaseListing) {
		toSerialize["repurchaseListing"] = o.RepurchaseListing
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableBondView struct {
	value *BondView
	isSet bool
}

func (v NullableBondView) Get() *BondView {
	return v.value
}

func (v *NullableBondView) Set(val *BondView) {
	v.value = val
	v.isSet = true
}

func (v NullableBondView) IsSet() bool {
	return v.isSet
}

func (v *NullableBondView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondView(val *BondView) *NullableBondView {
	return &NullableBondView{value: val, isSet: true}
}

func (v NullableBondView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


