/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the IndexComparisonView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexComparisonView{}

// IndexComparisonView struct for IndexComparisonView
type IndexComparisonView struct {
	CallLeverage *float32 `json:"callLeverage,omitempty"`
	PutLeverage *float32 `json:"putLeverage,omitempty"`
	Value *int64 `json:"value,omitempty"`
	Yesterday *int64 `json:"yesterday,omitempty"`
}

// NewIndexComparisonView instantiates a new IndexComparisonView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexComparisonView() *IndexComparisonView {
	this := IndexComparisonView{}
	return &this
}

// NewIndexComparisonViewWithDefaults instantiates a new IndexComparisonView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexComparisonViewWithDefaults() *IndexComparisonView {
	this := IndexComparisonView{}
	return &this
}

// GetCallLeverage returns the CallLeverage field value if set, zero value otherwise.
func (o *IndexComparisonView) GetCallLeverage() float32 {
	if o == nil || IsNil(o.CallLeverage) {
		var ret float32
		return ret
	}
	return *o.CallLeverage
}

// GetCallLeverageOk returns a tuple with the CallLeverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexComparisonView) GetCallLeverageOk() (*float32, bool) {
	if o == nil || IsNil(o.CallLeverage) {
		return nil, false
	}
	return o.CallLeverage, true
}

// HasCallLeverage returns a boolean if a field has been set.
func (o *IndexComparisonView) HasCallLeverage() bool {
	if o != nil && !IsNil(o.CallLeverage) {
		return true
	}

	return false
}

// SetCallLeverage gets a reference to the given float32 and assigns it to the CallLeverage field.
func (o *IndexComparisonView) SetCallLeverage(v float32) {
	o.CallLeverage = &v
}

// GetPutLeverage returns the PutLeverage field value if set, zero value otherwise.
func (o *IndexComparisonView) GetPutLeverage() float32 {
	if o == nil || IsNil(o.PutLeverage) {
		var ret float32
		return ret
	}
	return *o.PutLeverage
}

// GetPutLeverageOk returns a tuple with the PutLeverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexComparisonView) GetPutLeverageOk() (*float32, bool) {
	if o == nil || IsNil(o.PutLeverage) {
		return nil, false
	}
	return o.PutLeverage, true
}

// HasPutLeverage returns a boolean if a field has been set.
func (o *IndexComparisonView) HasPutLeverage() bool {
	if o != nil && !IsNil(o.PutLeverage) {
		return true
	}

	return false
}

// SetPutLeverage gets a reference to the given float32 and assigns it to the PutLeverage field.
func (o *IndexComparisonView) SetPutLeverage(v float32) {
	o.PutLeverage = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IndexComparisonView) GetValue() int64 {
	if o == nil || IsNil(o.Value) {
		var ret int64
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexComparisonView) GetValueOk() (*int64, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IndexComparisonView) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given int64 and assigns it to the Value field.
func (o *IndexComparisonView) SetValue(v int64) {
	o.Value = &v
}

// GetYesterday returns the Yesterday field value if set, zero value otherwise.
func (o *IndexComparisonView) GetYesterday() int64 {
	if o == nil || IsNil(o.Yesterday) {
		var ret int64
		return ret
	}
	return *o.Yesterday
}

// GetYesterdayOk returns a tuple with the Yesterday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexComparisonView) GetYesterdayOk() (*int64, bool) {
	if o == nil || IsNil(o.Yesterday) {
		return nil, false
	}
	return o.Yesterday, true
}

// HasYesterday returns a boolean if a field has been set.
func (o *IndexComparisonView) HasYesterday() bool {
	if o != nil && !IsNil(o.Yesterday) {
		return true
	}

	return false
}

// SetYesterday gets a reference to the given int64 and assigns it to the Yesterday field.
func (o *IndexComparisonView) SetYesterday(v int64) {
	o.Yesterday = &v
}

func (o IndexComparisonView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexComparisonView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallLeverage) {
		toSerialize["callLeverage"] = o.CallLeverage
	}
	if !IsNil(o.PutLeverage) {
		toSerialize["putLeverage"] = o.PutLeverage
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Yesterday) {
		toSerialize["yesterday"] = o.Yesterday
	}
	return toSerialize, nil
}

type NullableIndexComparisonView struct {
	value *IndexComparisonView
	isSet bool
}

func (v NullableIndexComparisonView) Get() *IndexComparisonView {
	return v.value
}

func (v *NullableIndexComparisonView) Set(val *IndexComparisonView) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexComparisonView) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexComparisonView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexComparisonView(val *IndexComparisonView) *NullableIndexComparisonView {
	return &NullableIndexComparisonView{value: val, isSet: true}
}

func (v NullableIndexComparisonView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexComparisonView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


