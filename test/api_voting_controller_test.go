/*
Api Documentation

Testing VotingControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_VotingControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VotingControllerAPIService CastAllVotesUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.CastAllVotesUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService CastVoteUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.CastVoteUsingPOST(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService CastVoteV1UsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.CastVoteV1UsingPOST(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService DeletePollUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.DeletePollUsingDELETE(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService DeletePollV1UsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.DeletePollV1UsingDELETE(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService ExecuteVoteResultUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.ExecuteVoteResultUsingPUT(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService ExecuteVoteResultV1UsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.ExecuteVoteResultV1UsingPOST(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetAllPollsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.GetAllPollsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetCompanyPollsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.VotingControllerAPI.GetCompanyPollsUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetMyPollsPagedUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.GetMyPollsPagedUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetPollUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.GetPollUsingGET(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetPollV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pollId string

		resp, httpRes, err := apiClient.VotingControllerAPI.GetPollV1UsingGET(context.Background(), pollId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService GetPollsV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.GetPollsV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateCapitalIncreasePollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateCapitalIncreasePollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateCapitalReductionPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateCapitalReductionPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateCashOutPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateCashOutPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateCashOutPollUsingPOST1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateCashOutPollUsingPOST1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateChangeCompanyNamePollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateChangeCompanyNamePollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateDividendPaymentPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateDividendPaymentPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateEmployCeoPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateEmployCeoPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateEmployCeoPollV1UsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateEmployCeoPollV1UsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateLiquidationPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateLiquidationPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateLiquidationPollV1UsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateLiquidationPollV1UsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VotingControllerAPIService InitiateMergerPollUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.VotingControllerAPI.InitiateMergerPollUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
