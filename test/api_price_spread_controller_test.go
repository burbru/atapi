/*
Api Documentation

Testing PriceSpreadControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_PriceSpreadControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PriceSpreadControllerAPIService DeleteFilterUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.DeleteFilterUsingDELETE(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService FilterSpreadsUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.FilterSpreadsUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetBiggestTradedSecuritiesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetBiggestTradedSecuritiesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetFilterDefinitionUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetFilterDefinitionUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetFilterUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var filterId string

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetFilterUsingGET(context.Background(), filterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetMostFrequentlyTradedSecuritiesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetMostFrequentlyTradedSecuritiesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetSecuritiesWithBigPriceChangesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetSecuritiesWithBigPriceChangesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService GetSpreadUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityIdentifier string

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.GetSpreadUsingGET(context.Background(), securityIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService ListSpreadsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.ListSpreadsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService ListSpreadsV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.ListSpreadsV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PriceSpreadControllerAPIService ListsFilterUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PriceSpreadControllerAPI.ListsFilterUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
