/*
Api Documentation

Testing AchievementControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_AchievementControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AchievementControllerAPIService ClaimAllianceAchievementUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimAllianceAchievementUsingPUT(context.Background(), achievementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService ClaimAllianceAchievementsUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimAllianceAchievementsUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService ClaimCompanyAchievementUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimCompanyAchievementUsingPUT(context.Background(), achievementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService ClaimCompanyAchievementsUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimCompanyAchievementsUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService ClaimUserAchievementUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimUserAchievementUsingPUT(context.Background(), achievementId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService ClaimUserAchievementsUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.ClaimUserAchievementsUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetAllianceAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceID string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetAllianceAchievementsUsingGET(context.Background(), allianceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetAllianceNotYetAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetAllianceNotYetAchievementsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetCompanyAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetCompanyAchievementsUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetCompanyNotYetAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetCompanyNotYetAchievementsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetOpenAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetOpenAchievementsUsingGET(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetOpenAllianceAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetOpenAllianceAchievementsUsingGET(context.Background(), allianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetOpenCompanyAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetOpenCompanyAchievementsUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetUserAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetUserAchievementsUsingGET(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AchievementControllerAPIService GetUserNotYetAchievementsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AchievementControllerAPI.GetUserNotYetAchievementsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
