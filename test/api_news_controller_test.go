/*
Api Documentation

Testing NewsControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_NewsControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NewsControllerAPIService GetNewsPostUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var postId string

		resp, httpRes, err := apiClient.NewsControllerAPI.GetNewsPostUsingGET(context.Background(), postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListAlliancesNewsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceId string

		resp, httpRes, err := apiClient.NewsControllerAPI.ListAlliancesNewsUsingGET(context.Background(), allianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListAuthorsNewsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NewsControllerAPI.ListAuthorsNewsUsingGET(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListCompanysNewsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.NewsControllerAPI.ListCompanysNewsUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListHashtagsNewsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hashTag string

		resp, httpRes, err := apiClient.NewsControllerAPI.ListHashtagsNewsUsingGET(context.Background(), hashTag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListNewsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NewsControllerAPI.ListNewsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NewsControllerAPIService ListPostUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NewsControllerAPI.ListPostUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
