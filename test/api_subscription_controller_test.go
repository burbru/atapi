/*
Api Documentation

Testing SubscriptionControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_SubscriptionControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubscriptionControllerAPIService SubscribeToAuthorUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.SubscribeToAuthorUsingPUT(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionControllerAPIService SubscribeToCompanyUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.SubscribeToCompanyUsingPUT(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionControllerAPIService SubscribeToHashtagUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hashtag string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.SubscribeToHashtagUsingPUT(context.Background(), hashtag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionControllerAPIService UnsubscribeFromAuthorUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.UnsubscribeFromAuthorUsingDELETE(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionControllerAPIService UnsubscribeFromCompanyUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.UnsubscribeFromCompanyUsingDELETE(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubscriptionControllerAPIService UnsubscribeFromHashtagUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var hashtag string

		resp, httpRes, err := apiClient.SubscriptionControllerAPI.UnsubscribeFromHashtagUsingDELETE(context.Background(), hashtag).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
