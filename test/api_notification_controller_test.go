/*
Api Documentation

Testing NotificationControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_NotificationControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationControllerAPIService ChangeNotificationUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationControllerAPI.ChangeNotificationUsingPUT(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService ChangeNotificationsUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.ChangeNotificationsUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService DeleteNotificationUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationControllerAPI.DeleteNotificationUsingDELETE(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService DeleteNotificationsUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.DeleteNotificationsUsingDELETE(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetMyNotificationsCountDeprecatedUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetMyNotificationsCountDeprecatedUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetMyNotificationsCountUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetMyNotificationsCountUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetMyNotificationsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetMyNotificationsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetMyNotificationsV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetMyNotificationsV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetMyUnreadNotificationsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetMyUnreadNotificationsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService GetNotificationUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var notificationId string

		resp, httpRes, err := apiClient.NotificationControllerAPI.GetNotificationUsingGET(context.Background(), notificationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationControllerAPIService MarkNotificationsAsReadUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationControllerAPI.MarkNotificationsAsReadUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
