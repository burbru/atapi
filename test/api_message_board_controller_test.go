/*
Api Documentation

Testing MessageBoardControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_MessageBoardControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MessageBoardControllerAPIService AddToBoardUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.AddToBoardUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ChangeBoardMembershipUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ChangeBoardMembershipUsingPUT(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService CreateMessageBoardUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.CreateMessageBoardUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService CreateSubboardUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parentId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.CreateSubboardUsingPOST(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService DeleteMessageBoardUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.DeleteMessageBoardUsingDELETE(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService EditMessageBoardUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.EditMessageBoardUsingPUT(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService GetBoardMembershipsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.GetBoardMembershipsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService GetMembershipUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.GetMembershipUsingGET(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService GetMessageBoardUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.GetMessageBoardUsingGET(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListMessageBoardPostsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListMessageBoardPostsUsingGET(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListMyBoardsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListMyBoardsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListPostsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListPostsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListPublicBoardsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListPublicBoardsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListsReachableBoardsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var boardId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListsReachableBoardsUsingGET(context.Background(), boardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService ListsSubboardsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var parentId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.ListsSubboardsUsingGET(context.Background(), parentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService RemoveBoardMembershipOfBoardUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.RemoveBoardMembershipOfBoardUsingDELETE(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MessageBoardControllerAPIService RemoveBoardMembershipUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.MessageBoardControllerAPI.RemoveBoardMembershipUsingDELETE(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
