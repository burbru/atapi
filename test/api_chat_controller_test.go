/*
Api Documentation

Testing ChatControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_ChatControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ChatControllerAPIService AddToChatByUsernameUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.AddToChatByUsernameUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService AddToChatUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.AddToChatUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService AddToChatV1UsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.AddToChatV1UsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService ChangeChatMembershipUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ChatControllerAPI.ChangeChatMembershipUsingPUT(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService ChangeChatUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.ChangeChatUsingPUT(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService ChangeChatV1UsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.ChangeChatV1UsingPUT(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService CreateChatByIdsUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.CreateChatByIdsUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService CreateChatByNamesUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.CreateChatByNamesUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService CreateChatUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.CreateChatUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService DeleteChatUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.DeleteChatUsingDELETE(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService DeleteChatV1UsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.DeleteChatV1UsingDELETE(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatMembershipUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatMembershipUsingGET(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatMembershipsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatMembershipsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatUsingGET(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatV1UsingGET(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetChatsV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetChatsV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetMyChatsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetMyChatsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetMyChatsV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetMyChatsV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService GetUnreadChatsCountUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.GetUnreadChatsCountUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService ListPublicChatsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.ListPublicChatsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService MarkChatAsReadUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.MarkChatAsReadUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService MarkChatAsReadV1UsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.MarkChatAsReadV1UsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService QuitChatUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.QuitChatUsingPUT(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService RemoveChatMembershipUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.ChatControllerAPI.RemoveChatMembershipUsingDELETE(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService RemoveFromChatUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ChatControllerAPI.RemoveFromChatUsingPUT(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ChatControllerAPIService RemoveMyChatMembershipUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chatId string

		resp, httpRes, err := apiClient.ChatControllerAPI.RemoveMyChatMembershipUsingDELETE(context.Background(), chatId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
