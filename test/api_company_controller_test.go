/*
Api Documentation

Testing CompanyControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_CompanyControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CompanyControllerAPIService AddLogoUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.AddLogoUsingPUT(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService CreateCompanyUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CompanyControllerAPI.CreateCompanyUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService GetCompanyBySecAccIdUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securitiesAccountId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.GetCompanyBySecAccIdUsingGET(context.Background(), securitiesAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService GetCompanyBySecurityIdentifierUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityIdentifier string

		resp, httpRes, err := apiClient.CompanyControllerAPI.GetCompanyBySecurityIdentifierUsingGET(context.Background(), securityIdentifier).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService GetCompanyCapsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.GetCompanyCapsUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService GetCompanyProfileUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.GetCompanyProfileUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService GetCompanyUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.GetCompanyUsingGET(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListAllCompaniesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListAllCompaniesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListAllCompaniesV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListAllCompaniesV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListCompaniesByUserIdUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListCompaniesByUserIdUsingGET(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListCompaniesByUserNameUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var username string

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListCompaniesByUserNameUsingGET(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListMyCompaniesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListMyCompaniesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService ListMyCompaniesV1UsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CompanyControllerAPI.ListMyCompaniesV1UsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService RemoveLogoUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.CompanyControllerAPI.RemoveLogoUsingDELETE(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CompanyControllerAPIService SearchCompaniesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namePart string

		resp, httpRes, err := apiClient.CompanyControllerAPI.SearchCompaniesUsingGET(context.Background(), namePart).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
