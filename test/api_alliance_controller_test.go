/*
Api Documentation

Testing AllianceControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package atapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_atapi_AllianceControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AllianceControllerAPIService AddToAllianceUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.AddToAllianceUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService ChangeAllianceMembershipUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.ChangeAllianceMembershipUsingPUT(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService CreateAllianceUsingPOST", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.CreateAllianceUsingPOST(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService DeleteAllianceUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.DeleteAllianceUsingDELETE(context.Background(), allianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService DeleteMyAllianceMembershipUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.DeleteMyAllianceMembershipUsingDELETE(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService EditAllianceUsingPUT", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.EditAllianceUsingPUT(context.Background(), allianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService GetAllianceMembershipsUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.GetAllianceMembershipsUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService GetAllianceUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var allianceId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.GetAllianceUsingGET(context.Background(), allianceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService GetMyAllianceMembershipUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.GetMyAllianceMembershipUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService GetUserAllianceMembershipUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.GetUserAllianceMembershipUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService ListAlliancesUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.ListAlliancesUsingGET(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService RemoveAllianceMembershipOfAllianceUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllianceControllerAPI.RemoveAllianceMembershipOfAllianceUsingDELETE(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService RemoveAllianceMembershipUsingDELETE", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.RemoveAllianceMembershipUsingDELETE(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllianceControllerAPIService ReturnAllianceMembershipUsingGET", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var membershipId string

		resp, httpRes, err := apiClient.AllianceControllerAPI.ReturnAllianceMembershipUsingGET(context.Background(), membershipId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
