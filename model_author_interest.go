/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the AuthorInterest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorInterest{}

// AuthorInterest struct for AuthorInterest
type AuthorInterest struct {
	AuthorId *string `json:"authorId,omitempty"`
	Id *string `json:"id,omitempty"`
	Interest *int64 `json:"interest,omitempty"`
	UserId *string `json:"userId,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewAuthorInterest instantiates a new AuthorInterest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorInterest() *AuthorInterest {
	this := AuthorInterest{}
	return &this
}

// NewAuthorInterestWithDefaults instantiates a new AuthorInterest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorInterestWithDefaults() *AuthorInterest {
	this := AuthorInterest{}
	return &this
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *AuthorInterest) GetAuthorId() string {
	if o == nil || IsNil(o.AuthorId) {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorInterest) GetAuthorIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *AuthorInterest) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *AuthorInterest) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthorInterest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorInterest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthorInterest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthorInterest) SetId(v string) {
	o.Id = &v
}

// GetInterest returns the Interest field value if set, zero value otherwise.
func (o *AuthorInterest) GetInterest() int64 {
	if o == nil || IsNil(o.Interest) {
		var ret int64
		return ret
	}
	return *o.Interest
}

// GetInterestOk returns a tuple with the Interest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorInterest) GetInterestOk() (*int64, bool) {
	if o == nil || IsNil(o.Interest) {
		return nil, false
	}
	return o.Interest, true
}

// HasInterest returns a boolean if a field has been set.
func (o *AuthorInterest) HasInterest() bool {
	if o != nil && !IsNil(o.Interest) {
		return true
	}

	return false
}

// SetInterest gets a reference to the given int64 and assigns it to the Interest field.
func (o *AuthorInterest) SetInterest(v int64) {
	o.Interest = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AuthorInterest) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorInterest) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AuthorInterest) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AuthorInterest) SetUserId(v string) {
	o.UserId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AuthorInterest) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorInterest) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AuthorInterest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AuthorInterest) SetVersion(v int64) {
	o.Version = &v
}

func (o AuthorInterest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorInterest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorId) {
		toSerialize["authorId"] = o.AuthorId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interest) {
		toSerialize["interest"] = o.Interest
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAuthorInterest struct {
	value *AuthorInterest
	isSet bool
}

func (v NullableAuthorInterest) Get() *AuthorInterest {
	return v.value
}

func (v *NullableAuthorInterest) Set(val *AuthorInterest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorInterest(val *AuthorInterest) *NullableAuthorInterest {
	return &NullableAuthorInterest{value: val, isSet: true}
}

func (v NullableAuthorInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


