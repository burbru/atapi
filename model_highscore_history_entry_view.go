/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the HighscoreHistoryEntryView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighscoreHistoryEntryView{}

// HighscoreHistoryEntryView struct for HighscoreHistoryEntryView
type HighscoreHistoryEntryView struct {
	Date *int64 `json:"date,omitempty"`
	EntityId *string `json:"entityId,omitempty"`
	HighscoreType *string `json:"highscoreType,omitempty"`
	Position *int64 `json:"position,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewHighscoreHistoryEntryView instantiates a new HighscoreHistoryEntryView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighscoreHistoryEntryView() *HighscoreHistoryEntryView {
	this := HighscoreHistoryEntryView{}
	return &this
}

// NewHighscoreHistoryEntryViewWithDefaults instantiates a new HighscoreHistoryEntryView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighscoreHistoryEntryViewWithDefaults() *HighscoreHistoryEntryView {
	this := HighscoreHistoryEntryView{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HighscoreHistoryEntryView) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighscoreHistoryEntryView) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HighscoreHistoryEntryView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *HighscoreHistoryEntryView) SetDate(v int64) {
	o.Date = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *HighscoreHistoryEntryView) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighscoreHistoryEntryView) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *HighscoreHistoryEntryView) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *HighscoreHistoryEntryView) SetEntityId(v string) {
	o.EntityId = &v
}

// GetHighscoreType returns the HighscoreType field value if set, zero value otherwise.
func (o *HighscoreHistoryEntryView) GetHighscoreType() string {
	if o == nil || IsNil(o.HighscoreType) {
		var ret string
		return ret
	}
	return *o.HighscoreType
}

// GetHighscoreTypeOk returns a tuple with the HighscoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighscoreHistoryEntryView) GetHighscoreTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HighscoreType) {
		return nil, false
	}
	return o.HighscoreType, true
}

// HasHighscoreType returns a boolean if a field has been set.
func (o *HighscoreHistoryEntryView) HasHighscoreType() bool {
	if o != nil && !IsNil(o.HighscoreType) {
		return true
	}

	return false
}

// SetHighscoreType gets a reference to the given string and assigns it to the HighscoreType field.
func (o *HighscoreHistoryEntryView) SetHighscoreType(v string) {
	o.HighscoreType = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *HighscoreHistoryEntryView) GetPosition() int64 {
	if o == nil || IsNil(o.Position) {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighscoreHistoryEntryView) GetPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *HighscoreHistoryEntryView) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *HighscoreHistoryEntryView) SetPosition(v int64) {
	o.Position = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *HighscoreHistoryEntryView) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighscoreHistoryEntryView) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HighscoreHistoryEntryView) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *HighscoreHistoryEntryView) SetValue(v float32) {
	o.Value = &v
}

func (o HighscoreHistoryEntryView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighscoreHistoryEntryView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.HighscoreType) {
		toSerialize["highscoreType"] = o.HighscoreType
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableHighscoreHistoryEntryView struct {
	value *HighscoreHistoryEntryView
	isSet bool
}

func (v NullableHighscoreHistoryEntryView) Get() *HighscoreHistoryEntryView {
	return v.value
}

func (v *NullableHighscoreHistoryEntryView) Set(val *HighscoreHistoryEntryView) {
	v.value = val
	v.isSet = true
}

func (v NullableHighscoreHistoryEntryView) IsSet() bool {
	return v.isSet
}

func (v *NullableHighscoreHistoryEntryView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighscoreHistoryEntryView(val *HighscoreHistoryEntryView) *NullableHighscoreHistoryEntryView {
	return &NullableHighscoreHistoryEntryView{value: val, isSet: true}
}

func (v NullableHighscoreHistoryEntryView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighscoreHistoryEntryView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


