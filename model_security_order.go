/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecurityOrder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityOrder{}

// SecurityOrder struct for SecurityOrder
type SecurityOrder struct {
	Action string `json:"action"`
	CheckResult *SecurityOrderCheckResult `json:"checkResult,omitempty"`
	CommittedCash *float32 `json:"committedCash,omitempty"`
	CounterParty *string `json:"counterParty,omitempty"`
	CounterPartyName *string `json:"counterPartyName,omitempty"`
	CreationDate *int64 `json:"creationDate,omitempty"`
	ExecutionPrice *float32 `json:"executionPrice,omitempty"`
	ExecutionVolume *float32 `json:"executionVolume,omitempty"`
	GoodAfterDate *int64 `json:"goodAfterDate,omitempty"`
	GoodTillDate *int64 `json:"goodTillDate,omitempty"`
	HourlyChange *float32 `json:"hourlyChange,omitempty"`
	Id *string `json:"id,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	NextHourlyChangeDate *int64 `json:"nextHourlyChangeDate,omitempty"`
	NumberOfShares int64 `json:"numberOfShares"`
	Owner string `json:"owner"`
	OwnerName *string `json:"ownerName,omitempty"`
	Price *float32 `json:"price,omitempty"`
	PrivateCounterParty *bool `json:"privateCounterParty,omitempty"`
	PrivateOwner *bool `json:"privateOwner,omitempty"`
	SecurityIdentifier string `json:"securityIdentifier"`
	Spread *PriceSpreadView `json:"spread,omitempty"`
	Type string `json:"type"`
	UncommittedCash *float32 `json:"uncommittedCash,omitempty"`
	UncommittedShares *int64 `json:"uncommittedShares,omitempty"`
	Version *int64 `json:"version,omitempty"`
	Volume *float32 `json:"volume,omitempty"`
}

type _SecurityOrder SecurityOrder

// NewSecurityOrder instantiates a new SecurityOrder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityOrder(action string, numberOfShares int64, owner string, securityIdentifier string, type_ string) *SecurityOrder {
	this := SecurityOrder{}
	this.Action = action
	this.NumberOfShares = numberOfShares
	this.Owner = owner
	this.SecurityIdentifier = securityIdentifier
	this.Type = type_
	return &this
}

// NewSecurityOrderWithDefaults instantiates a new SecurityOrder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityOrderWithDefaults() *SecurityOrder {
	this := SecurityOrder{}
	return &this
}

// GetAction returns the Action field value
func (o *SecurityOrder) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SecurityOrder) SetAction(v string) {
	o.Action = v
}

// GetCheckResult returns the CheckResult field value if set, zero value otherwise.
func (o *SecurityOrder) GetCheckResult() SecurityOrderCheckResult {
	if o == nil || IsNil(o.CheckResult) {
		var ret SecurityOrderCheckResult
		return ret
	}
	return *o.CheckResult
}

// GetCheckResultOk returns a tuple with the CheckResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetCheckResultOk() (*SecurityOrderCheckResult, bool) {
	if o == nil || IsNil(o.CheckResult) {
		return nil, false
	}
	return o.CheckResult, true
}

// HasCheckResult returns a boolean if a field has been set.
func (o *SecurityOrder) HasCheckResult() bool {
	if o != nil && !IsNil(o.CheckResult) {
		return true
	}

	return false
}

// SetCheckResult gets a reference to the given SecurityOrderCheckResult and assigns it to the CheckResult field.
func (o *SecurityOrder) SetCheckResult(v SecurityOrderCheckResult) {
	o.CheckResult = &v
}

// GetCommittedCash returns the CommittedCash field value if set, zero value otherwise.
func (o *SecurityOrder) GetCommittedCash() float32 {
	if o == nil || IsNil(o.CommittedCash) {
		var ret float32
		return ret
	}
	return *o.CommittedCash
}

// GetCommittedCashOk returns a tuple with the CommittedCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetCommittedCashOk() (*float32, bool) {
	if o == nil || IsNil(o.CommittedCash) {
		return nil, false
	}
	return o.CommittedCash, true
}

// HasCommittedCash returns a boolean if a field has been set.
func (o *SecurityOrder) HasCommittedCash() bool {
	if o != nil && !IsNil(o.CommittedCash) {
		return true
	}

	return false
}

// SetCommittedCash gets a reference to the given float32 and assigns it to the CommittedCash field.
func (o *SecurityOrder) SetCommittedCash(v float32) {
	o.CommittedCash = &v
}

// GetCounterParty returns the CounterParty field value if set, zero value otherwise.
func (o *SecurityOrder) GetCounterParty() string {
	if o == nil || IsNil(o.CounterParty) {
		var ret string
		return ret
	}
	return *o.CounterParty
}

// GetCounterPartyOk returns a tuple with the CounterParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetCounterPartyOk() (*string, bool) {
	if o == nil || IsNil(o.CounterParty) {
		return nil, false
	}
	return o.CounterParty, true
}

// HasCounterParty returns a boolean if a field has been set.
func (o *SecurityOrder) HasCounterParty() bool {
	if o != nil && !IsNil(o.CounterParty) {
		return true
	}

	return false
}

// SetCounterParty gets a reference to the given string and assigns it to the CounterParty field.
func (o *SecurityOrder) SetCounterParty(v string) {
	o.CounterParty = &v
}

// GetCounterPartyName returns the CounterPartyName field value if set, zero value otherwise.
func (o *SecurityOrder) GetCounterPartyName() string {
	if o == nil || IsNil(o.CounterPartyName) {
		var ret string
		return ret
	}
	return *o.CounterPartyName
}

// GetCounterPartyNameOk returns a tuple with the CounterPartyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetCounterPartyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CounterPartyName) {
		return nil, false
	}
	return o.CounterPartyName, true
}

// HasCounterPartyName returns a boolean if a field has been set.
func (o *SecurityOrder) HasCounterPartyName() bool {
	if o != nil && !IsNil(o.CounterPartyName) {
		return true
	}

	return false
}

// SetCounterPartyName gets a reference to the given string and assigns it to the CounterPartyName field.
func (o *SecurityOrder) SetCounterPartyName(v string) {
	o.CounterPartyName = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *SecurityOrder) GetCreationDate() int64 {
	if o == nil || IsNil(o.CreationDate) {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetCreationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *SecurityOrder) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *SecurityOrder) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetExecutionPrice returns the ExecutionPrice field value if set, zero value otherwise.
func (o *SecurityOrder) GetExecutionPrice() float32 {
	if o == nil || IsNil(o.ExecutionPrice) {
		var ret float32
		return ret
	}
	return *o.ExecutionPrice
}

// GetExecutionPriceOk returns a tuple with the ExecutionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetExecutionPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.ExecutionPrice) {
		return nil, false
	}
	return o.ExecutionPrice, true
}

// HasExecutionPrice returns a boolean if a field has been set.
func (o *SecurityOrder) HasExecutionPrice() bool {
	if o != nil && !IsNil(o.ExecutionPrice) {
		return true
	}

	return false
}

// SetExecutionPrice gets a reference to the given float32 and assigns it to the ExecutionPrice field.
func (o *SecurityOrder) SetExecutionPrice(v float32) {
	o.ExecutionPrice = &v
}

// GetExecutionVolume returns the ExecutionVolume field value if set, zero value otherwise.
func (o *SecurityOrder) GetExecutionVolume() float32 {
	if o == nil || IsNil(o.ExecutionVolume) {
		var ret float32
		return ret
	}
	return *o.ExecutionVolume
}

// GetExecutionVolumeOk returns a tuple with the ExecutionVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetExecutionVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.ExecutionVolume) {
		return nil, false
	}
	return o.ExecutionVolume, true
}

// HasExecutionVolume returns a boolean if a field has been set.
func (o *SecurityOrder) HasExecutionVolume() bool {
	if o != nil && !IsNil(o.ExecutionVolume) {
		return true
	}

	return false
}

// SetExecutionVolume gets a reference to the given float32 and assigns it to the ExecutionVolume field.
func (o *SecurityOrder) SetExecutionVolume(v float32) {
	o.ExecutionVolume = &v
}

// GetGoodAfterDate returns the GoodAfterDate field value if set, zero value otherwise.
func (o *SecurityOrder) GetGoodAfterDate() int64 {
	if o == nil || IsNil(o.GoodAfterDate) {
		var ret int64
		return ret
	}
	return *o.GoodAfterDate
}

// GetGoodAfterDateOk returns a tuple with the GoodAfterDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetGoodAfterDateOk() (*int64, bool) {
	if o == nil || IsNil(o.GoodAfterDate) {
		return nil, false
	}
	return o.GoodAfterDate, true
}

// HasGoodAfterDate returns a boolean if a field has been set.
func (o *SecurityOrder) HasGoodAfterDate() bool {
	if o != nil && !IsNil(o.GoodAfterDate) {
		return true
	}

	return false
}

// SetGoodAfterDate gets a reference to the given int64 and assigns it to the GoodAfterDate field.
func (o *SecurityOrder) SetGoodAfterDate(v int64) {
	o.GoodAfterDate = &v
}

// GetGoodTillDate returns the GoodTillDate field value if set, zero value otherwise.
func (o *SecurityOrder) GetGoodTillDate() int64 {
	if o == nil || IsNil(o.GoodTillDate) {
		var ret int64
		return ret
	}
	return *o.GoodTillDate
}

// GetGoodTillDateOk returns a tuple with the GoodTillDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetGoodTillDateOk() (*int64, bool) {
	if o == nil || IsNil(o.GoodTillDate) {
		return nil, false
	}
	return o.GoodTillDate, true
}

// HasGoodTillDate returns a boolean if a field has been set.
func (o *SecurityOrder) HasGoodTillDate() bool {
	if o != nil && !IsNil(o.GoodTillDate) {
		return true
	}

	return false
}

// SetGoodTillDate gets a reference to the given int64 and assigns it to the GoodTillDate field.
func (o *SecurityOrder) SetGoodTillDate(v int64) {
	o.GoodTillDate = &v
}

// GetHourlyChange returns the HourlyChange field value if set, zero value otherwise.
func (o *SecurityOrder) GetHourlyChange() float32 {
	if o == nil || IsNil(o.HourlyChange) {
		var ret float32
		return ret
	}
	return *o.HourlyChange
}

// GetHourlyChangeOk returns a tuple with the HourlyChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetHourlyChangeOk() (*float32, bool) {
	if o == nil || IsNil(o.HourlyChange) {
		return nil, false
	}
	return o.HourlyChange, true
}

// HasHourlyChange returns a boolean if a field has been set.
func (o *SecurityOrder) HasHourlyChange() bool {
	if o != nil && !IsNil(o.HourlyChange) {
		return true
	}

	return false
}

// SetHourlyChange gets a reference to the given float32 and assigns it to the HourlyChange field.
func (o *SecurityOrder) SetHourlyChange(v float32) {
	o.HourlyChange = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityOrder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityOrder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SecurityOrder) SetId(v string) {
	o.Id = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *SecurityOrder) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *SecurityOrder) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *SecurityOrder) SetListing(v ListingView) {
	o.Listing = &v
}

// GetNextHourlyChangeDate returns the NextHourlyChangeDate field value if set, zero value otherwise.
func (o *SecurityOrder) GetNextHourlyChangeDate() int64 {
	if o == nil || IsNil(o.NextHourlyChangeDate) {
		var ret int64
		return ret
	}
	return *o.NextHourlyChangeDate
}

// GetNextHourlyChangeDateOk returns a tuple with the NextHourlyChangeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetNextHourlyChangeDateOk() (*int64, bool) {
	if o == nil || IsNil(o.NextHourlyChangeDate) {
		return nil, false
	}
	return o.NextHourlyChangeDate, true
}

// HasNextHourlyChangeDate returns a boolean if a field has been set.
func (o *SecurityOrder) HasNextHourlyChangeDate() bool {
	if o != nil && !IsNil(o.NextHourlyChangeDate) {
		return true
	}

	return false
}

// SetNextHourlyChangeDate gets a reference to the given int64 and assigns it to the NextHourlyChangeDate field.
func (o *SecurityOrder) SetNextHourlyChangeDate(v int64) {
	o.NextHourlyChangeDate = &v
}

// GetNumberOfShares returns the NumberOfShares field value
func (o *SecurityOrder) GetNumberOfShares() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetNumberOfSharesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfShares, true
}

// SetNumberOfShares sets field value
func (o *SecurityOrder) SetNumberOfShares(v int64) {
	o.NumberOfShares = v
}

// GetOwner returns the Owner field value
func (o *SecurityOrder) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *SecurityOrder) SetOwner(v string) {
	o.Owner = v
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *SecurityOrder) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *SecurityOrder) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *SecurityOrder) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SecurityOrder) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SecurityOrder) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *SecurityOrder) SetPrice(v float32) {
	o.Price = &v
}

// GetPrivateCounterParty returns the PrivateCounterParty field value if set, zero value otherwise.
func (o *SecurityOrder) GetPrivateCounterParty() bool {
	if o == nil || IsNil(o.PrivateCounterParty) {
		var ret bool
		return ret
	}
	return *o.PrivateCounterParty
}

// GetPrivateCounterPartyOk returns a tuple with the PrivateCounterParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetPrivateCounterPartyOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivateCounterParty) {
		return nil, false
	}
	return o.PrivateCounterParty, true
}

// HasPrivateCounterParty returns a boolean if a field has been set.
func (o *SecurityOrder) HasPrivateCounterParty() bool {
	if o != nil && !IsNil(o.PrivateCounterParty) {
		return true
	}

	return false
}

// SetPrivateCounterParty gets a reference to the given bool and assigns it to the PrivateCounterParty field.
func (o *SecurityOrder) SetPrivateCounterParty(v bool) {
	o.PrivateCounterParty = &v
}

// GetPrivateOwner returns the PrivateOwner field value if set, zero value otherwise.
func (o *SecurityOrder) GetPrivateOwner() bool {
	if o == nil || IsNil(o.PrivateOwner) {
		var ret bool
		return ret
	}
	return *o.PrivateOwner
}

// GetPrivateOwnerOk returns a tuple with the PrivateOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetPrivateOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.PrivateOwner) {
		return nil, false
	}
	return o.PrivateOwner, true
}

// HasPrivateOwner returns a boolean if a field has been set.
func (o *SecurityOrder) HasPrivateOwner() bool {
	if o != nil && !IsNil(o.PrivateOwner) {
		return true
	}

	return false
}

// SetPrivateOwner gets a reference to the given bool and assigns it to the PrivateOwner field.
func (o *SecurityOrder) SetPrivateOwner(v bool) {
	o.PrivateOwner = &v
}

// GetSecurityIdentifier returns the SecurityIdentifier field value
func (o *SecurityOrder) GetSecurityIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecurityIdentifier
}

// GetSecurityIdentifierOk returns a tuple with the SecurityIdentifier field value
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetSecurityIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecurityIdentifier, true
}

// SetSecurityIdentifier sets field value
func (o *SecurityOrder) SetSecurityIdentifier(v string) {
	o.SecurityIdentifier = v
}

// GetSpread returns the Spread field value if set, zero value otherwise.
func (o *SecurityOrder) GetSpread() PriceSpreadView {
	if o == nil || IsNil(o.Spread) {
		var ret PriceSpreadView
		return ret
	}
	return *o.Spread
}

// GetSpreadOk returns a tuple with the Spread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetSpreadOk() (*PriceSpreadView, bool) {
	if o == nil || IsNil(o.Spread) {
		return nil, false
	}
	return o.Spread, true
}

// HasSpread returns a boolean if a field has been set.
func (o *SecurityOrder) HasSpread() bool {
	if o != nil && !IsNil(o.Spread) {
		return true
	}

	return false
}

// SetSpread gets a reference to the given PriceSpreadView and assigns it to the Spread field.
func (o *SecurityOrder) SetSpread(v PriceSpreadView) {
	o.Spread = &v
}

// GetType returns the Type field value
func (o *SecurityOrder) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecurityOrder) SetType(v string) {
	o.Type = v
}

// GetUncommittedCash returns the UncommittedCash field value if set, zero value otherwise.
func (o *SecurityOrder) GetUncommittedCash() float32 {
	if o == nil || IsNil(o.UncommittedCash) {
		var ret float32
		return ret
	}
	return *o.UncommittedCash
}

// GetUncommittedCashOk returns a tuple with the UncommittedCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetUncommittedCashOk() (*float32, bool) {
	if o == nil || IsNil(o.UncommittedCash) {
		return nil, false
	}
	return o.UncommittedCash, true
}

// HasUncommittedCash returns a boolean if a field has been set.
func (o *SecurityOrder) HasUncommittedCash() bool {
	if o != nil && !IsNil(o.UncommittedCash) {
		return true
	}

	return false
}

// SetUncommittedCash gets a reference to the given float32 and assigns it to the UncommittedCash field.
func (o *SecurityOrder) SetUncommittedCash(v float32) {
	o.UncommittedCash = &v
}

// GetUncommittedShares returns the UncommittedShares field value if set, zero value otherwise.
func (o *SecurityOrder) GetUncommittedShares() int64 {
	if o == nil || IsNil(o.UncommittedShares) {
		var ret int64
		return ret
	}
	return *o.UncommittedShares
}

// GetUncommittedSharesOk returns a tuple with the UncommittedShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetUncommittedSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.UncommittedShares) {
		return nil, false
	}
	return o.UncommittedShares, true
}

// HasUncommittedShares returns a boolean if a field has been set.
func (o *SecurityOrder) HasUncommittedShares() bool {
	if o != nil && !IsNil(o.UncommittedShares) {
		return true
	}

	return false
}

// SetUncommittedShares gets a reference to the given int64 and assigns it to the UncommittedShares field.
func (o *SecurityOrder) SetUncommittedShares(v int64) {
	o.UncommittedShares = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SecurityOrder) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SecurityOrder) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SecurityOrder) SetVersion(v int64) {
	o.Version = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *SecurityOrder) GetVolume() float32 {
	if o == nil || IsNil(o.Volume) {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityOrder) GetVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *SecurityOrder) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *SecurityOrder) SetVolume(v float32) {
	o.Volume = &v
}

func (o SecurityOrder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityOrder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.CheckResult) {
		toSerialize["checkResult"] = o.CheckResult
	}
	if !IsNil(o.CommittedCash) {
		toSerialize["committedCash"] = o.CommittedCash
	}
	if !IsNil(o.CounterParty) {
		toSerialize["counterParty"] = o.CounterParty
	}
	if !IsNil(o.CounterPartyName) {
		toSerialize["counterPartyName"] = o.CounterPartyName
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.ExecutionPrice) {
		toSerialize["executionPrice"] = o.ExecutionPrice
	}
	if !IsNil(o.ExecutionVolume) {
		toSerialize["executionVolume"] = o.ExecutionVolume
	}
	if !IsNil(o.GoodAfterDate) {
		toSerialize["goodAfterDate"] = o.GoodAfterDate
	}
	if !IsNil(o.GoodTillDate) {
		toSerialize["goodTillDate"] = o.GoodTillDate
	}
	if !IsNil(o.HourlyChange) {
		toSerialize["hourlyChange"] = o.HourlyChange
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.NextHourlyChangeDate) {
		toSerialize["nextHourlyChangeDate"] = o.NextHourlyChangeDate
	}
	toSerialize["numberOfShares"] = o.NumberOfShares
	toSerialize["owner"] = o.Owner
	if !IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.PrivateCounterParty) {
		toSerialize["privateCounterParty"] = o.PrivateCounterParty
	}
	if !IsNil(o.PrivateOwner) {
		toSerialize["privateOwner"] = o.PrivateOwner
	}
	toSerialize["securityIdentifier"] = o.SecurityIdentifier
	if !IsNil(o.Spread) {
		toSerialize["spread"] = o.Spread
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.UncommittedCash) {
		toSerialize["uncommittedCash"] = o.UncommittedCash
	}
	if !IsNil(o.UncommittedShares) {
		toSerialize["uncommittedShares"] = o.UncommittedShares
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

func (o *SecurityOrder) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"numberOfShares",
		"owner",
		"securityIdentifier",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityOrder := _SecurityOrder{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecurityOrder)

	if err != nil {
		return err
	}

	*o = SecurityOrder(varSecurityOrder)

	return err
}

type NullableSecurityOrder struct {
	value *SecurityOrder
	isSet bool
}

func (v NullableSecurityOrder) Get() *SecurityOrder {
	return v.value
}

func (v *NullableSecurityOrder) Set(val *SecurityOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityOrder(val *SecurityOrder) *NullableSecurityOrder {
	return &NullableSecurityOrder{value: val, isSet: true}
}

func (v NullableSecurityOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


