/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the CompactIndexView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompactIndexView{}

// CompactIndexView struct for CompactIndexView
type CompactIndexView struct {
	Id *string `json:"id,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	MembersCount *int64 `json:"membersCount,omitempty"`
	Name *string `json:"name,omitempty"`
	Owner *UsernameView `json:"owner,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewCompactIndexView instantiates a new CompactIndexView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompactIndexView() *CompactIndexView {
	this := CompactIndexView{}
	return &this
}

// NewCompactIndexViewWithDefaults instantiates a new CompactIndexView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompactIndexViewWithDefaults() *CompactIndexView {
	this := CompactIndexView{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompactIndexView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompactIndexView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompactIndexView) SetId(v string) {
	o.Id = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *CompactIndexView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *CompactIndexView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *CompactIndexView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetMembersCount returns the MembersCount field value if set, zero value otherwise.
func (o *CompactIndexView) GetMembersCount() int64 {
	if o == nil || IsNil(o.MembersCount) {
		var ret int64
		return ret
	}
	return *o.MembersCount
}

// GetMembersCountOk returns a tuple with the MembersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetMembersCountOk() (*int64, bool) {
	if o == nil || IsNil(o.MembersCount) {
		return nil, false
	}
	return o.MembersCount, true
}

// HasMembersCount returns a boolean if a field has been set.
func (o *CompactIndexView) HasMembersCount() bool {
	if o != nil && !IsNil(o.MembersCount) {
		return true
	}

	return false
}

// SetMembersCount gets a reference to the given int64 and assigns it to the MembersCount field.
func (o *CompactIndexView) SetMembersCount(v int64) {
	o.MembersCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CompactIndexView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CompactIndexView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CompactIndexView) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *CompactIndexView) GetOwner() UsernameView {
	if o == nil || IsNil(o.Owner) {
		var ret UsernameView
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetOwnerOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *CompactIndexView) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UsernameView and assigns it to the Owner field.
func (o *CompactIndexView) SetOwner(v UsernameView) {
	o.Owner = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CompactIndexView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactIndexView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CompactIndexView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *CompactIndexView) SetVersion(v int64) {
	o.Version = &v
}

func (o CompactIndexView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompactIndexView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.MembersCount) {
		toSerialize["membersCount"] = o.MembersCount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCompactIndexView struct {
	value *CompactIndexView
	isSet bool
}

func (v NullableCompactIndexView) Get() *CompactIndexView {
	return v.value
}

func (v *NullableCompactIndexView) Set(val *CompactIndexView) {
	v.value = val
	v.isSet = true
}

func (v NullableCompactIndexView) IsSet() bool {
	return v.isSet
}

func (v *NullableCompactIndexView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompactIndexView(val *CompactIndexView) *NullableCompactIndexView {
	return &NullableCompactIndexView{value: val, isSet: true}
}

func (v NullableCompactIndexView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompactIndexView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


