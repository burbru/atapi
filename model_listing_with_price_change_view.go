/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the ListingWithPriceChangeView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingWithPriceChangeView{}

// ListingWithPriceChangeView struct for ListingWithPriceChangeView
type ListingWithPriceChangeView struct {
	AskPrice *float32 `json:"askPrice,omitempty"`
	AskSize *int64 `json:"askSize,omitempty"`
	BidPrice *float32 `json:"bidPrice,omitempty"`
	BidSize *int64 `json:"bidSize,omitempty"`
	Date *int64 `json:"date,omitempty"`
	EndDate *int64 `json:"endDate,omitempty"`
	LastPrice *SecurityPriceView `json:"lastPrice,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceChangeInPercent *float32 `json:"priceChangeInPercent,omitempty"`
	SecurityIdentifier *string `json:"securityIdentifier,omitempty"`
	SpreadAbs *float32 `json:"spreadAbs,omitempty"`
	SpreadPercent *float32 `json:"spreadPercent,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewListingWithPriceChangeView instantiates a new ListingWithPriceChangeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingWithPriceChangeView() *ListingWithPriceChangeView {
	this := ListingWithPriceChangeView{}
	return &this
}

// NewListingWithPriceChangeViewWithDefaults instantiates a new ListingWithPriceChangeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingWithPriceChangeViewWithDefaults() *ListingWithPriceChangeView {
	this := ListingWithPriceChangeView{}
	return &this
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetAskPrice() float32 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float32
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetAskPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float32 and assigns it to the AskPrice field.
func (o *ListingWithPriceChangeView) SetAskPrice(v float32) {
	o.AskPrice = &v
}

// GetAskSize returns the AskSize field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetAskSize() int64 {
	if o == nil || IsNil(o.AskSize) {
		var ret int64
		return ret
	}
	return *o.AskSize
}

// GetAskSizeOk returns a tuple with the AskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetAskSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.AskSize) {
		return nil, false
	}
	return o.AskSize, true
}

// HasAskSize returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasAskSize() bool {
	if o != nil && !IsNil(o.AskSize) {
		return true
	}

	return false
}

// SetAskSize gets a reference to the given int64 and assigns it to the AskSize field.
func (o *ListingWithPriceChangeView) SetAskSize(v int64) {
	o.AskSize = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetBidPrice() float32 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float32
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetBidPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float32 and assigns it to the BidPrice field.
func (o *ListingWithPriceChangeView) SetBidPrice(v float32) {
	o.BidPrice = &v
}

// GetBidSize returns the BidSize field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetBidSize() int64 {
	if o == nil || IsNil(o.BidSize) {
		var ret int64
		return ret
	}
	return *o.BidSize
}

// GetBidSizeOk returns a tuple with the BidSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetBidSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.BidSize) {
		return nil, false
	}
	return o.BidSize, true
}

// HasBidSize returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasBidSize() bool {
	if o != nil && !IsNil(o.BidSize) {
		return true
	}

	return false
}

// SetBidSize gets a reference to the given int64 and assigns it to the BidSize field.
func (o *ListingWithPriceChangeView) SetBidSize(v int64) {
	o.BidSize = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *ListingWithPriceChangeView) SetDate(v int64) {
	o.Date = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *ListingWithPriceChangeView) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetLastPrice returns the LastPrice field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetLastPrice() SecurityPriceView {
	if o == nil || IsNil(o.LastPrice) {
		var ret SecurityPriceView
		return ret
	}
	return *o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetLastPriceOk() (*SecurityPriceView, bool) {
	if o == nil || IsNil(o.LastPrice) {
		return nil, false
	}
	return o.LastPrice, true
}

// HasLastPrice returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasLastPrice() bool {
	if o != nil && !IsNil(o.LastPrice) {
		return true
	}

	return false
}

// SetLastPrice gets a reference to the given SecurityPriceView and assigns it to the LastPrice field.
func (o *ListingWithPriceChangeView) SetLastPrice(v SecurityPriceView) {
	o.LastPrice = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *ListingWithPriceChangeView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ListingWithPriceChangeView) SetName(v string) {
	o.Name = &v
}

// GetPriceChangeInPercent returns the PriceChangeInPercent field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetPriceChangeInPercent() float32 {
	if o == nil || IsNil(o.PriceChangeInPercent) {
		var ret float32
		return ret
	}
	return *o.PriceChangeInPercent
}

// GetPriceChangeInPercentOk returns a tuple with the PriceChangeInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetPriceChangeInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.PriceChangeInPercent) {
		return nil, false
	}
	return o.PriceChangeInPercent, true
}

// HasPriceChangeInPercent returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasPriceChangeInPercent() bool {
	if o != nil && !IsNil(o.PriceChangeInPercent) {
		return true
	}

	return false
}

// SetPriceChangeInPercent gets a reference to the given float32 and assigns it to the PriceChangeInPercent field.
func (o *ListingWithPriceChangeView) SetPriceChangeInPercent(v float32) {
	o.PriceChangeInPercent = &v
}

// GetSecurityIdentifier returns the SecurityIdentifier field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetSecurityIdentifier() string {
	if o == nil || IsNil(o.SecurityIdentifier) {
		var ret string
		return ret
	}
	return *o.SecurityIdentifier
}

// GetSecurityIdentifierOk returns a tuple with the SecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetSecurityIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityIdentifier) {
		return nil, false
	}
	return o.SecurityIdentifier, true
}

// HasSecurityIdentifier returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasSecurityIdentifier() bool {
	if o != nil && !IsNil(o.SecurityIdentifier) {
		return true
	}

	return false
}

// SetSecurityIdentifier gets a reference to the given string and assigns it to the SecurityIdentifier field.
func (o *ListingWithPriceChangeView) SetSecurityIdentifier(v string) {
	o.SecurityIdentifier = &v
}

// GetSpreadAbs returns the SpreadAbs field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetSpreadAbs() float32 {
	if o == nil || IsNil(o.SpreadAbs) {
		var ret float32
		return ret
	}
	return *o.SpreadAbs
}

// GetSpreadAbsOk returns a tuple with the SpreadAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetSpreadAbsOk() (*float32, bool) {
	if o == nil || IsNil(o.SpreadAbs) {
		return nil, false
	}
	return o.SpreadAbs, true
}

// HasSpreadAbs returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasSpreadAbs() bool {
	if o != nil && !IsNil(o.SpreadAbs) {
		return true
	}

	return false
}

// SetSpreadAbs gets a reference to the given float32 and assigns it to the SpreadAbs field.
func (o *ListingWithPriceChangeView) SetSpreadAbs(v float32) {
	o.SpreadAbs = &v
}

// GetSpreadPercent returns the SpreadPercent field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetSpreadPercent() float32 {
	if o == nil || IsNil(o.SpreadPercent) {
		var ret float32
		return ret
	}
	return *o.SpreadPercent
}

// GetSpreadPercentOk returns a tuple with the SpreadPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetSpreadPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.SpreadPercent) {
		return nil, false
	}
	return o.SpreadPercent, true
}

// HasSpreadPercent returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasSpreadPercent() bool {
	if o != nil && !IsNil(o.SpreadPercent) {
		return true
	}

	return false
}

// SetSpreadPercent gets a reference to the given float32 and assigns it to the SpreadPercent field.
func (o *ListingWithPriceChangeView) SetSpreadPercent(v float32) {
	o.SpreadPercent = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *ListingWithPriceChangeView) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ListingWithPriceChangeView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingWithPriceChangeView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ListingWithPriceChangeView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ListingWithPriceChangeView) SetType(v string) {
	o.Type = &v
}

func (o ListingWithPriceChangeView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingWithPriceChangeView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.AskSize) {
		toSerialize["askSize"] = o.AskSize
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.BidSize) {
		toSerialize["bidSize"] = o.BidSize
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.LastPrice) {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PriceChangeInPercent) {
		toSerialize["priceChangeInPercent"] = o.PriceChangeInPercent
	}
	if !IsNil(o.SecurityIdentifier) {
		toSerialize["securityIdentifier"] = o.SecurityIdentifier
	}
	if !IsNil(o.SpreadAbs) {
		toSerialize["spreadAbs"] = o.SpreadAbs
	}
	if !IsNil(o.SpreadPercent) {
		toSerialize["spreadPercent"] = o.SpreadPercent
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableListingWithPriceChangeView struct {
	value *ListingWithPriceChangeView
	isSet bool
}

func (v NullableListingWithPriceChangeView) Get() *ListingWithPriceChangeView {
	return v.value
}

func (v *NullableListingWithPriceChangeView) Set(val *ListingWithPriceChangeView) {
	v.value = val
	v.isSet = true
}

func (v NullableListingWithPriceChangeView) IsSet() bool {
	return v.isSet
}

func (v *NullableListingWithPriceChangeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingWithPriceChangeView(val *ListingWithPriceChangeView) *NullableListingWithPriceChangeView {
	return &NullableListingWithPriceChangeView{value: val, isSet: true}
}

func (v NullableListingWithPriceChangeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingWithPriceChangeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


