/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// MessageBoardControllerAPIService MessageBoardControllerAPI service
type MessageBoardControllerAPIService service

type ApiAddToBoardUsingPOSTRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	messageBoardId *string
	userId *string
	role *string
}

// Message board id
func (r ApiAddToBoardUsingPOSTRequest) MessageBoardId(messageBoardId string) ApiAddToBoardUsingPOSTRequest {
	r.messageBoardId = &messageBoardId
	return r
}

// User id
func (r ApiAddToBoardUsingPOSTRequest) UserId(userId string) ApiAddToBoardUsingPOSTRequest {
	r.userId = &userId
	return r
}

// Role
func (r ApiAddToBoardUsingPOSTRequest) Role(role string) ApiAddToBoardUsingPOSTRequest {
	r.role = &role
	return r
}

func (r ApiAddToBoardUsingPOSTRequest) Execute() (*MessageBoardMembershipView, *http.Response, error) {
	return r.ApiService.AddToBoardUsingPOSTExecute(r)
}

/*
AddToBoardUsingPOST Adds user to messageboard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddToBoardUsingPOSTRequest
*/
func (a *MessageBoardControllerAPIService) AddToBoardUsingPOST(ctx context.Context) ApiAddToBoardUsingPOSTRequest {
	return ApiAddToBoardUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MessageBoardMembershipView
func (a *MessageBoardControllerAPIService) AddToBoardUsingPOSTExecute(r ApiAddToBoardUsingPOSTRequest) (*MessageBoardMembershipView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardMembershipView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.AddToBoardUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageBoardId == nil {
		return localVarReturnValue, nil, reportError("messageBoardId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "messageBoardId", r.messageBoardId, "")
	if r.role != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "role", r.role, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChangeBoardMembershipUsingPUTRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	membershipId string
	role *string
}

// Role
func (r ApiChangeBoardMembershipUsingPUTRequest) Role(role string) ApiChangeBoardMembershipUsingPUTRequest {
	r.role = &role
	return r
}

func (r ApiChangeBoardMembershipUsingPUTRequest) Execute() (*MessageBoardMembershipView, *http.Response, error) {
	return r.ApiService.ChangeBoardMembershipUsingPUTExecute(r)
}

/*
ChangeBoardMembershipUsingPUT Change messageboard membership

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId Membership id
 @return ApiChangeBoardMembershipUsingPUTRequest
*/
func (a *MessageBoardControllerAPIService) ChangeBoardMembershipUsingPUT(ctx context.Context, membershipId string) ApiChangeBoardMembershipUsingPUTRequest {
	return ApiChangeBoardMembershipUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MessageBoardMembershipView
func (a *MessageBoardControllerAPIService) ChangeBoardMembershipUsingPUTExecute(r ApiChangeBoardMembershipUsingPUTRequest) (*MessageBoardMembershipView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardMembershipView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ChangeBoardMembershipUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.role != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "role", r.role, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMessageBoardUsingPOSTRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	locale *string
	name *string
	description *string
	public *bool
}

// Locale
func (r ApiCreateMessageBoardUsingPOSTRequest) Locale(locale string) ApiCreateMessageBoardUsingPOSTRequest {
	r.locale = &locale
	return r
}

// Name
func (r ApiCreateMessageBoardUsingPOSTRequest) Name(name string) ApiCreateMessageBoardUsingPOSTRequest {
	r.name = &name
	return r
}

// Description
func (r ApiCreateMessageBoardUsingPOSTRequest) Description(description string) ApiCreateMessageBoardUsingPOSTRequest {
	r.description = &description
	return r
}

// Public
func (r ApiCreateMessageBoardUsingPOSTRequest) Public(public bool) ApiCreateMessageBoardUsingPOSTRequest {
	r.public = &public
	return r
}

func (r ApiCreateMessageBoardUsingPOSTRequest) Execute() (*MessageBoardView, *http.Response, error) {
	return r.ApiService.CreateMessageBoardUsingPOSTExecute(r)
}

/*
CreateMessageBoardUsingPOST Creates message board

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateMessageBoardUsingPOSTRequest
*/
func (a *MessageBoardControllerAPIService) CreateMessageBoardUsingPOST(ctx context.Context) ApiCreateMessageBoardUsingPOSTRequest {
	return ApiCreateMessageBoardUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MessageBoardView
func (a *MessageBoardControllerAPIService) CreateMessageBoardUsingPOSTExecute(r ApiCreateMessageBoardUsingPOSTRequest) (*MessageBoardView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.CreateMessageBoardUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locale == nil {
		return localVarReturnValue, nil, reportError("locale is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	if r.public != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "public", r.public, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateSubboardUsingPOSTRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	name *string
	parentId string
	description *string
}

// Name
func (r ApiCreateSubboardUsingPOSTRequest) Name(name string) ApiCreateSubboardUsingPOSTRequest {
	r.name = &name
	return r
}

// Description
func (r ApiCreateSubboardUsingPOSTRequest) Description(description string) ApiCreateSubboardUsingPOSTRequest {
	r.description = &description
	return r
}

func (r ApiCreateSubboardUsingPOSTRequest) Execute() (*MessageBoardView, *http.Response, error) {
	return r.ApiService.CreateSubboardUsingPOSTExecute(r)
}

/*
CreateSubboardUsingPOST Creates subboard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId Parent board id
 @return ApiCreateSubboardUsingPOSTRequest
*/
func (a *MessageBoardControllerAPIService) CreateSubboardUsingPOST(ctx context.Context, parentId string) ApiCreateSubboardUsingPOSTRequest {
	return ApiCreateSubboardUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MessageBoardView
func (a *MessageBoardControllerAPIService) CreateSubboardUsingPOSTExecute(r ApiCreateSubboardUsingPOSTRequest) (*MessageBoardView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.CreateSubboardUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{parentId}/subboards"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMessageBoardUsingDELETERequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId string
}

func (r ApiDeleteMessageBoardUsingDELETERequest) Execute() (string, *http.Response, error) {
	return r.ApiService.DeleteMessageBoardUsingDELETEExecute(r)
}

/*
DeleteMessageBoardUsingDELETE Deletes message (sub)board and its subboards, memberships and postings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param boardId Message board id
 @return ApiDeleteMessageBoardUsingDELETERequest
*/
func (a *MessageBoardControllerAPIService) DeleteMessageBoardUsingDELETE(ctx context.Context, boardId string) ApiDeleteMessageBoardUsingDELETERequest {
	return ApiDeleteMessageBoardUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

// Execute executes the request
//  @return string
func (a *MessageBoardControllerAPIService) DeleteMessageBoardUsingDELETEExecute(r ApiDeleteMessageBoardUsingDELETERequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.DeleteMessageBoardUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{boardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", url.PathEscape(parameterValueToString(r.boardId, "boardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditMessageBoardUsingPUTRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId string
	locale *string
	name *string
	description *string
	public *bool
}

// Locale
func (r ApiEditMessageBoardUsingPUTRequest) Locale(locale string) ApiEditMessageBoardUsingPUTRequest {
	r.locale = &locale
	return r
}

// Name
func (r ApiEditMessageBoardUsingPUTRequest) Name(name string) ApiEditMessageBoardUsingPUTRequest {
	r.name = &name
	return r
}

// Description
func (r ApiEditMessageBoardUsingPUTRequest) Description(description string) ApiEditMessageBoardUsingPUTRequest {
	r.description = &description
	return r
}

// Public
func (r ApiEditMessageBoardUsingPUTRequest) Public(public bool) ApiEditMessageBoardUsingPUTRequest {
	r.public = &public
	return r
}

func (r ApiEditMessageBoardUsingPUTRequest) Execute() (*MessageBoardView, *http.Response, error) {
	return r.ApiService.EditMessageBoardUsingPUTExecute(r)
}

/*
EditMessageBoardUsingPUT Changes message board

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param boardId Message board id
 @return ApiEditMessageBoardUsingPUTRequest
*/
func (a *MessageBoardControllerAPIService) EditMessageBoardUsingPUT(ctx context.Context, boardId string) ApiEditMessageBoardUsingPUTRequest {
	return ApiEditMessageBoardUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

// Execute executes the request
//  @return MessageBoardView
func (a *MessageBoardControllerAPIService) EditMessageBoardUsingPUTExecute(r ApiEditMessageBoardUsingPUTRequest) (*MessageBoardView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.EditMessageBoardUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{boardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", url.PathEscape(parameterValueToString(r.boardId, "boardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.locale == nil {
		return localVarReturnValue, nil, reportError("locale is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "locale", r.locale, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	if r.public != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "public", r.public, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBoardMembershipsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	messageBoardId *string
}

// Message board id
func (r ApiGetBoardMembershipsUsingGETRequest) MessageBoardId(messageBoardId string) ApiGetBoardMembershipsUsingGETRequest {
	r.messageBoardId = &messageBoardId
	return r
}

func (r ApiGetBoardMembershipsUsingGETRequest) Execute() (*MessageBoardMembershipView, *http.Response, error) {
	return r.ApiService.GetBoardMembershipsUsingGETExecute(r)
}

/*
GetBoardMembershipsUsingGET Lists memberships of message board

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBoardMembershipsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) GetBoardMembershipsUsingGET(ctx context.Context) ApiGetBoardMembershipsUsingGETRequest {
	return ApiGetBoardMembershipsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MessageBoardMembershipView
func (a *MessageBoardControllerAPIService) GetBoardMembershipsUsingGETExecute(r ApiGetBoardMembershipsUsingGETRequest) (*MessageBoardMembershipView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardMembershipView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.GetBoardMembershipsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.messageBoardId == nil {
		return localVarReturnValue, nil, reportError("messageBoardId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "messageBoardId", r.messageBoardId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMembershipUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	membershipId string
}

func (r ApiGetMembershipUsingGETRequest) Execute() (*MessageBoardMembershipView, *http.Response, error) {
	return r.ApiService.GetMembershipUsingGETExecute(r)
}

/*
GetMembershipUsingGET Returns messageboard membership

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId Membership id
 @return ApiGetMembershipUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) GetMembershipUsingGET(ctx context.Context, membershipId string) ApiGetMembershipUsingGETRequest {
	return ApiGetMembershipUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MessageBoardMembershipView
func (a *MessageBoardControllerAPIService) GetMembershipUsingGETExecute(r ApiGetMembershipUsingGETRequest) (*MessageBoardMembershipView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardMembershipView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.GetMembershipUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMessageBoardUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId string
}

func (r ApiGetMessageBoardUsingGETRequest) Execute() (*MessageBoardWithDetailsView, *http.Response, error) {
	return r.ApiService.GetMessageBoardUsingGETExecute(r)
}

/*
GetMessageBoardUsingGET Returns message (sub)board

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param boardId Message board id
 @return ApiGetMessageBoardUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) GetMessageBoardUsingGET(ctx context.Context, boardId string) ApiGetMessageBoardUsingGETRequest {
	return ApiGetMessageBoardUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

// Execute executes the request
//  @return MessageBoardWithDetailsView
func (a *MessageBoardControllerAPIService) GetMessageBoardUsingGETExecute(r ApiGetMessageBoardUsingGETRequest) (*MessageBoardWithDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessageBoardWithDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.GetMessageBoardUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{boardId}"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", url.PathEscape(parameterValueToString(r.boardId, "boardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMessageBoardPostsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId string
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListMessageBoardPostsUsingGETRequest) Page(page int32) ApiListMessageBoardPostsUsingGETRequest {
	r.page = &page
	return r
}

// Fulltext search in title and content
func (r ApiListMessageBoardPostsUsingGETRequest) Search(search string) ApiListMessageBoardPostsUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListMessageBoardPostsUsingGETRequest) Size(size int32) ApiListMessageBoardPostsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListMessageBoardPostsUsingGETRequest) Sort(sort []string) ApiListMessageBoardPostsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListMessageBoardPostsUsingGETRequest) Execute() (*PagePostView, *http.Response, error) {
	return r.ApiService.ListMessageBoardPostsUsingGETExecute(r)
}

/*
ListMessageBoardPostsUsingGET Lists message board's posts

Sorted descending by dateCreated as default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param boardId Message Board ID
 @return ApiListMessageBoardPostsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListMessageBoardPostsUsingGET(ctx context.Context, boardId string) ApiListMessageBoardPostsUsingGETRequest {
	return ApiListMessageBoardPostsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

// Execute executes the request
//  @return PagePostView
func (a *MessageBoardControllerAPIService) ListMessageBoardPostsUsingGETExecute(r ApiListMessageBoardPostsUsingGETRequest) (*PagePostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PagePostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListMessageBoardPostsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{boardId}/posts"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", url.PathEscape(parameterValueToString(r.boardId, "boardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMyBoardsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListMyBoardsUsingGETRequest) Page(page int32) ApiListMyBoardsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListMyBoardsUsingGETRequest) Size(size int32) ApiListMyBoardsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListMyBoardsUsingGETRequest) Sort(sort []string) ApiListMyBoardsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListMyBoardsUsingGETRequest) Execute() (*PageMessageBoardWithDetailsView, *http.Response, error) {
	return r.ApiService.ListMyBoardsUsingGETExecute(r)
}

/*
ListMyBoardsUsingGET Lists message boards in which the logged in user is a member

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListMyBoardsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListMyBoardsUsingGET(ctx context.Context) ApiListMyBoardsUsingGETRequest {
	return ApiListMyBoardsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageMessageBoardWithDetailsView
func (a *MessageBoardControllerAPIService) ListMyBoardsUsingGETExecute(r ApiListMyBoardsUsingGETRequest) (*PageMessageBoardWithDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageMessageBoardWithDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListMyBoardsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/messageboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPostsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListPostsUsingGETRequest) Page(page int32) ApiListPostsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListPostsUsingGETRequest) Size(size int32) ApiListPostsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListPostsUsingGETRequest) Sort(sort []string) ApiListPostsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListPostsUsingGETRequest) Execute() (*PostView, *http.Response, error) {
	return r.ApiService.ListPostsUsingGETExecute(r)
}

/*
ListPostsUsingGET Lists most interesting news

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPostsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListPostsUsingGET(ctx context.Context) ApiListPostsUsingGETRequest {
	return ApiListPostsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PostView
func (a *MessageBoardControllerAPIService) ListPostsUsingGETExecute(r ApiListPostsUsingGETRequest) (*PostView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PostView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListPostsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/my/boardnews"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListPublicBoardsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListPublicBoardsUsingGETRequest) Page(page int32) ApiListPublicBoardsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListPublicBoardsUsingGETRequest) Size(size int32) ApiListPublicBoardsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListPublicBoardsUsingGETRequest) Sort(sort []string) ApiListPublicBoardsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListPublicBoardsUsingGETRequest) Execute() (*PageMessageBoardWithDetailsView, *http.Response, error) {
	return r.ApiService.ListPublicBoardsUsingGETExecute(r)
}

/*
ListPublicBoardsUsingGET Lists public message boards

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPublicBoardsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListPublicBoardsUsingGET(ctx context.Context) ApiListPublicBoardsUsingGETRequest {
	return ApiListPublicBoardsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageMessageBoardWithDetailsView
func (a *MessageBoardControllerAPIService) ListPublicBoardsUsingGETExecute(r ApiListPublicBoardsUsingGETRequest) (*PageMessageBoardWithDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageMessageBoardWithDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListPublicBoardsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListsReachableBoardsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId string
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListsReachableBoardsUsingGETRequest) Page(page int32) ApiListsReachableBoardsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListsReachableBoardsUsingGETRequest) Size(size int32) ApiListsReachableBoardsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListsReachableBoardsUsingGETRequest) Sort(sort []string) ApiListsReachableBoardsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListsReachableBoardsUsingGETRequest) Execute() (*PageMessageBoardWithDetailsView, *http.Response, error) {
	return r.ApiService.ListsReachableBoardsUsingGETExecute(r)
}

/*
ListsReachableBoardsUsingGET Lists all (sub)boards of same message board tree branch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param boardId Board id
 @return ApiListsReachableBoardsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListsReachableBoardsUsingGET(ctx context.Context, boardId string) ApiListsReachableBoardsUsingGETRequest {
	return ApiListsReachableBoardsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		boardId: boardId,
	}
}

// Execute executes the request
//  @return PageMessageBoardWithDetailsView
func (a *MessageBoardControllerAPIService) ListsReachableBoardsUsingGETExecute(r ApiListsReachableBoardsUsingGETRequest) (*PageMessageBoardWithDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageMessageBoardWithDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListsReachableBoardsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{boardId}/branch"
	localVarPath = strings.Replace(localVarPath, "{"+"boardId"+"}", url.PathEscape(parameterValueToString(r.boardId, "boardId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListsSubboardsUsingGETRequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	parentId string
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListsSubboardsUsingGETRequest) Page(page int32) ApiListsSubboardsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListsSubboardsUsingGETRequest) Size(size int32) ApiListsSubboardsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListsSubboardsUsingGETRequest) Sort(sort []string) ApiListsSubboardsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListsSubboardsUsingGETRequest) Execute() (*PageMessageBoardWithDetailsView, *http.Response, error) {
	return r.ApiService.ListsSubboardsUsingGETExecute(r)
}

/*
ListsSubboardsUsingGET Lists subboards

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId Parent board id
 @return ApiListsSubboardsUsingGETRequest
*/
func (a *MessageBoardControllerAPIService) ListsSubboardsUsingGET(ctx context.Context, parentId string) ApiListsSubboardsUsingGETRequest {
	return ApiListsSubboardsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PageMessageBoardWithDetailsView
func (a *MessageBoardControllerAPIService) ListsSubboardsUsingGETExecute(r ApiListsSubboardsUsingGETRequest) (*PageMessageBoardWithDetailsView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageMessageBoardWithDetailsView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.ListsSubboardsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboards/{parentId}/subboards"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveBoardMembershipOfBoardUsingDELETERequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	boardId *string
}

// Message board id
func (r ApiRemoveBoardMembershipOfBoardUsingDELETERequest) BoardId(boardId string) ApiRemoveBoardMembershipOfBoardUsingDELETERequest {
	r.boardId = &boardId
	return r
}

func (r ApiRemoveBoardMembershipOfBoardUsingDELETERequest) Execute() (*MessagePrototype, *http.Response, error) {
	return r.ApiService.RemoveBoardMembershipOfBoardUsingDELETEExecute(r)
}

/*
RemoveBoardMembershipOfBoardUsingDELETE Removes message board membership

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRemoveBoardMembershipOfBoardUsingDELETERequest
*/
func (a *MessageBoardControllerAPIService) RemoveBoardMembershipOfBoardUsingDELETE(ctx context.Context) ApiRemoveBoardMembershipOfBoardUsingDELETERequest {
	return ApiRemoveBoardMembershipOfBoardUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MessagePrototype
func (a *MessageBoardControllerAPIService) RemoveBoardMembershipOfBoardUsingDELETEExecute(r ApiRemoveBoardMembershipOfBoardUsingDELETERequest) (*MessagePrototype, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessagePrototype
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.RemoveBoardMembershipOfBoardUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.boardId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "boardId", r.boardId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveBoardMembershipUsingDELETERequest struct {
	ctx context.Context
	ApiService *MessageBoardControllerAPIService
	membershipId string
}

func (r ApiRemoveBoardMembershipUsingDELETERequest) Execute() (*MessagePrototype, *http.Response, error) {
	return r.ApiService.RemoveBoardMembershipUsingDELETEExecute(r)
}

/*
RemoveBoardMembershipUsingDELETE Removes message board membership

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param membershipId Membership id
 @return ApiRemoveBoardMembershipUsingDELETERequest
*/
func (a *MessageBoardControllerAPIService) RemoveBoardMembershipUsingDELETE(ctx context.Context, membershipId string) ApiRemoveBoardMembershipUsingDELETERequest {
	return ApiRemoveBoardMembershipUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		membershipId: membershipId,
	}
}

// Execute executes the request
//  @return MessagePrototype
func (a *MessageBoardControllerAPIService) RemoveBoardMembershipUsingDELETEExecute(r ApiRemoveBoardMembershipUsingDELETERequest) (*MessagePrototype, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessagePrototype
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MessageBoardControllerAPIService.RemoveBoardMembershipUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/messageboardmemberships/{membershipId}"
	localVarPath = strings.Replace(localVarPath, "{"+"membershipId"+"}", url.PathEscape(parameterValueToString(r.membershipId, "membershipId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
