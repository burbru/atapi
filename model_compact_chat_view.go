/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the CompactChatView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompactChatView{}

// CompactChatView struct for CompactChatView
type CompactChatView struct {
	ChatName *string `json:"chatName,omitempty"`
	DateCreated *int64 `json:"dateCreated,omitempty"`
	Id *string `json:"id,omitempty"`
	LastMessage *MessageView `json:"lastMessage,omitempty"`
	PublicChat *bool `json:"publicChat,omitempty"`
	Readonly *bool `json:"readonly,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewCompactChatView instantiates a new CompactChatView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompactChatView() *CompactChatView {
	this := CompactChatView{}
	return &this
}

// NewCompactChatViewWithDefaults instantiates a new CompactChatView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompactChatViewWithDefaults() *CompactChatView {
	this := CompactChatView{}
	return &this
}

// GetChatName returns the ChatName field value if set, zero value otherwise.
func (o *CompactChatView) GetChatName() string {
	if o == nil || IsNil(o.ChatName) {
		var ret string
		return ret
	}
	return *o.ChatName
}

// GetChatNameOk returns a tuple with the ChatName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetChatNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChatName) {
		return nil, false
	}
	return o.ChatName, true
}

// HasChatName returns a boolean if a field has been set.
func (o *CompactChatView) HasChatName() bool {
	if o != nil && !IsNil(o.ChatName) {
		return true
	}

	return false
}

// SetChatName gets a reference to the given string and assigns it to the ChatName field.
func (o *CompactChatView) SetChatName(v string) {
	o.ChatName = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *CompactChatView) GetDateCreated() int64 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int64
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetDateCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *CompactChatView) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int64 and assigns it to the DateCreated field.
func (o *CompactChatView) SetDateCreated(v int64) {
	o.DateCreated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CompactChatView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CompactChatView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CompactChatView) SetId(v string) {
	o.Id = &v
}

// GetLastMessage returns the LastMessage field value if set, zero value otherwise.
func (o *CompactChatView) GetLastMessage() MessageView {
	if o == nil || IsNil(o.LastMessage) {
		var ret MessageView
		return ret
	}
	return *o.LastMessage
}

// GetLastMessageOk returns a tuple with the LastMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetLastMessageOk() (*MessageView, bool) {
	if o == nil || IsNil(o.LastMessage) {
		return nil, false
	}
	return o.LastMessage, true
}

// HasLastMessage returns a boolean if a field has been set.
func (o *CompactChatView) HasLastMessage() bool {
	if o != nil && !IsNil(o.LastMessage) {
		return true
	}

	return false
}

// SetLastMessage gets a reference to the given MessageView and assigns it to the LastMessage field.
func (o *CompactChatView) SetLastMessage(v MessageView) {
	o.LastMessage = &v
}

// GetPublicChat returns the PublicChat field value if set, zero value otherwise.
func (o *CompactChatView) GetPublicChat() bool {
	if o == nil || IsNil(o.PublicChat) {
		var ret bool
		return ret
	}
	return *o.PublicChat
}

// GetPublicChatOk returns a tuple with the PublicChat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetPublicChatOk() (*bool, bool) {
	if o == nil || IsNil(o.PublicChat) {
		return nil, false
	}
	return o.PublicChat, true
}

// HasPublicChat returns a boolean if a field has been set.
func (o *CompactChatView) HasPublicChat() bool {
	if o != nil && !IsNil(o.PublicChat) {
		return true
	}

	return false
}

// SetPublicChat gets a reference to the given bool and assigns it to the PublicChat field.
func (o *CompactChatView) SetPublicChat(v bool) {
	o.PublicChat = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *CompactChatView) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *CompactChatView) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *CompactChatView) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CompactChatView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompactChatView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CompactChatView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *CompactChatView) SetVersion(v int64) {
	o.Version = &v
}

func (o CompactChatView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompactChatView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChatName) {
		toSerialize["chatName"] = o.ChatName
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastMessage) {
		toSerialize["lastMessage"] = o.LastMessage
	}
	if !IsNil(o.PublicChat) {
		toSerialize["publicChat"] = o.PublicChat
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCompactChatView struct {
	value *CompactChatView
	isSet bool
}

func (v NullableCompactChatView) Get() *CompactChatView {
	return v.value
}

func (v *NullableCompactChatView) Set(val *CompactChatView) {
	v.value = val
	v.isSet = true
}

func (v NullableCompactChatView) IsSet() bool {
	return v.isSet
}

func (v *NullableCompactChatView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompactChatView(val *CompactChatView) *NullableCompactChatView {
	return &NullableCompactChatView{value: val, isSet: true}
}

func (v NullableCompactChatView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompactChatView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


