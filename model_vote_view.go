/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the VoteView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoteView{}

// VoteView struct for VoteView
type VoteView struct {
	Type *string `json:"type,omitempty"`
	Voices *int64 `json:"voices,omitempty"`
	Voter *UsernameView `json:"voter,omitempty"`
}

// NewVoteView instantiates a new VoteView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoteView() *VoteView {
	this := VoteView{}
	return &this
}

// NewVoteViewWithDefaults instantiates a new VoteView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoteViewWithDefaults() *VoteView {
	this := VoteView{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VoteView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VoteView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VoteView) SetType(v string) {
	o.Type = &v
}

// GetVoices returns the Voices field value if set, zero value otherwise.
func (o *VoteView) GetVoices() int64 {
	if o == nil || IsNil(o.Voices) {
		var ret int64
		return ret
	}
	return *o.Voices
}

// GetVoicesOk returns a tuple with the Voices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteView) GetVoicesOk() (*int64, bool) {
	if o == nil || IsNil(o.Voices) {
		return nil, false
	}
	return o.Voices, true
}

// HasVoices returns a boolean if a field has been set.
func (o *VoteView) HasVoices() bool {
	if o != nil && !IsNil(o.Voices) {
		return true
	}

	return false
}

// SetVoices gets a reference to the given int64 and assigns it to the Voices field.
func (o *VoteView) SetVoices(v int64) {
	o.Voices = &v
}

// GetVoter returns the Voter field value if set, zero value otherwise.
func (o *VoteView) GetVoter() UsernameView {
	if o == nil || IsNil(o.Voter) {
		var ret UsernameView
		return ret
	}
	return *o.Voter
}

// GetVoterOk returns a tuple with the Voter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VoteView) GetVoterOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Voter) {
		return nil, false
	}
	return o.Voter, true
}

// HasVoter returns a boolean if a field has been set.
func (o *VoteView) HasVoter() bool {
	if o != nil && !IsNil(o.Voter) {
		return true
	}

	return false
}

// SetVoter gets a reference to the given UsernameView and assigns it to the Voter field.
func (o *VoteView) SetVoter(v UsernameView) {
	o.Voter = &v
}

func (o VoteView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoteView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Voices) {
		toSerialize["voices"] = o.Voices
	}
	if !IsNil(o.Voter) {
		toSerialize["voter"] = o.Voter
	}
	return toSerialize, nil
}

type NullableVoteView struct {
	value *VoteView
	isSet bool
}

func (v NullableVoteView) Get() *VoteView {
	return v.value
}

func (v *NullableVoteView) Set(val *VoteView) {
	v.value = val
	v.isSet = true
}

func (v NullableVoteView) IsSet() bool {
	return v.isSet
}

func (v *NullableVoteView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoteView(val *VoteView) *NullableVoteView {
	return &NullableVoteView{value: val, isSet: true}
}

func (v NullableVoteView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoteView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


