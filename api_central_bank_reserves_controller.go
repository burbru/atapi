/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CentralBankReservesControllerAPIService CentralBankReservesControllerAPI service
type CentralBankReservesControllerAPIService service

type ApiGetCompanyReservesUsingGETRequest struct {
	ctx context.Context
	ApiService *CentralBankReservesControllerAPIService
	companyId *string
}

// Company id
func (r ApiGetCompanyReservesUsingGETRequest) CompanyId(companyId string) ApiGetCompanyReservesUsingGETRequest {
	r.companyId = &companyId
	return r
}

func (r ApiGetCompanyReservesUsingGETRequest) Execute() (*CentralbankReservesView, *http.Response, error) {
	return r.ApiService.GetCompanyReservesUsingGETExecute(r)
}

/*
GetCompanyReservesUsingGET Returns company's reserves

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyReservesUsingGETRequest
*/
func (a *CentralBankReservesControllerAPIService) GetCompanyReservesUsingGET(ctx context.Context) ApiGetCompanyReservesUsingGETRequest {
	return ApiGetCompanyReservesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CentralbankReservesView
func (a *CentralBankReservesControllerAPIService) GetCompanyReservesUsingGETExecute(r ApiGetCompanyReservesUsingGETRequest) (*CentralbankReservesView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CentralbankReservesView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CentralBankReservesControllerAPIService.GetCompanyReservesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/centralbankreserves"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastReservesPaymentUsingGETRequest struct {
	ctx context.Context
	ApiService *CentralBankReservesControllerAPIService
}

func (r ApiGetLastReservesPaymentUsingGETRequest) Execute() (*CentralBankReservesInterestPaymentView, *http.Response, error) {
	return r.ApiService.GetLastReservesPaymentUsingGETExecute(r)
}

/*
GetLastReservesPaymentUsingGET Returns latest central bank reserves payment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetLastReservesPaymentUsingGETRequest
*/
func (a *CentralBankReservesControllerAPIService) GetLastReservesPaymentUsingGET(ctx context.Context) ApiGetLastReservesPaymentUsingGETRequest {
	return ApiGetLastReservesPaymentUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CentralBankReservesInterestPaymentView
func (a *CentralBankReservesControllerAPIService) GetLastReservesPaymentUsingGETExecute(r ApiGetLastReservesPaymentUsingGETRequest) (*CentralBankReservesInterestPaymentView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CentralBankReservesInterestPaymentView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CentralBankReservesControllerAPIService.GetLastReservesPaymentUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/lastcentralbankreservespayment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReservesUsingGETRequest struct {
	ctx context.Context
	ApiService *CentralBankReservesControllerAPIService
	reservesId string
}

func (r ApiGetReservesUsingGETRequest) Execute() (*CentralbankReservesView, *http.Response, error) {
	return r.ApiService.GetReservesUsingGETExecute(r)
}

/*
GetReservesUsingGET Returns reserves

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservesId Reserves id
 @return ApiGetReservesUsingGETRequest
*/
func (a *CentralBankReservesControllerAPIService) GetReservesUsingGET(ctx context.Context, reservesId string) ApiGetReservesUsingGETRequest {
	return ApiGetReservesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		reservesId: reservesId,
	}
}

// Execute executes the request
//  @return CentralbankReservesView
func (a *CentralBankReservesControllerAPIService) GetReservesUsingGETExecute(r ApiGetReservesUsingGETRequest) (*CentralbankReservesView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CentralbankReservesView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CentralBankReservesControllerAPIService.GetReservesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/centralbankreserves/{reservesId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservesId"+"}", url.PathEscape(parameterValueToString(r.reservesId, "reservesId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncreaseInterestRateBoostUsingPUTRequest struct {
	ctx context.Context
	ApiService *CentralBankReservesControllerAPIService
	increaseInterestRateBoost *bool
	reservesId string
	multiplier *int64
}

// Increase interest boost rate
func (r ApiIncreaseInterestRateBoostUsingPUTRequest) IncreaseInterestRateBoost(increaseInterestRateBoost bool) ApiIncreaseInterestRateBoostUsingPUTRequest {
	r.increaseInterestRateBoost = &increaseInterestRateBoost
	return r
}

// Number of boosts
func (r ApiIncreaseInterestRateBoostUsingPUTRequest) Multiplier(multiplier int64) ApiIncreaseInterestRateBoostUsingPUTRequest {
	r.multiplier = &multiplier
	return r
}

func (r ApiIncreaseInterestRateBoostUsingPUTRequest) Execute() (*CentralbankReservesView, *http.Response, error) {
	return r.ApiService.IncreaseInterestRateBoostUsingPUTExecute(r)
}

/*
IncreaseInterestRateBoostUsingPUT Increase central bank reserves interest rate boost by 0.01%

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reservesId Reserves id
 @return ApiIncreaseInterestRateBoostUsingPUTRequest
*/
func (a *CentralBankReservesControllerAPIService) IncreaseInterestRateBoostUsingPUT(ctx context.Context, reservesId string) ApiIncreaseInterestRateBoostUsingPUTRequest {
	return ApiIncreaseInterestRateBoostUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		reservesId: reservesId,
	}
}

// Execute executes the request
//  @return CentralbankReservesView
func (a *CentralBankReservesControllerAPIService) IncreaseInterestRateBoostUsingPUTExecute(r ApiIncreaseInterestRateBoostUsingPUTRequest) (*CentralbankReservesView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CentralbankReservesView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CentralBankReservesControllerAPIService.IncreaseInterestRateBoostUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/centralbankreserves/{reservesId}"
	localVarPath = strings.Replace(localVarPath, "{"+"reservesId"+"}", url.PathEscape(parameterValueToString(r.reservesId, "reservesId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.increaseInterestRateBoost == nil {
		return localVarReturnValue, nil, reportError("increaseInterestRateBoost is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "increaseInterestRateBoost", r.increaseInterestRateBoost, "")
	if r.multiplier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "multiplier", r.multiplier, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIncreaseReservesUsingPUTRequest struct {
	ctx context.Context
	ApiService *CentralBankReservesControllerAPIService
	cashAmount *string
	companyId *string
}

// Cash amount to increase cash holding
func (r ApiIncreaseReservesUsingPUTRequest) CashAmount(cashAmount string) ApiIncreaseReservesUsingPUTRequest {
	r.cashAmount = &cashAmount
	return r
}

// Company id
func (r ApiIncreaseReservesUsingPUTRequest) CompanyId(companyId string) ApiIncreaseReservesUsingPUTRequest {
	r.companyId = &companyId
	return r
}

func (r ApiIncreaseReservesUsingPUTRequest) Execute() (*CentralbankReservesView, *http.Response, error) {
	return r.ApiService.IncreaseReservesUsingPUTExecute(r)
}

/*
IncreaseReservesUsingPUT Increase central bank reserves

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIncreaseReservesUsingPUTRequest
*/
func (a *CentralBankReservesControllerAPIService) IncreaseReservesUsingPUT(ctx context.Context) ApiIncreaseReservesUsingPUTRequest {
	return ApiIncreaseReservesUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CentralbankReservesView
func (a *CentralBankReservesControllerAPIService) IncreaseReservesUsingPUTExecute(r ApiIncreaseReservesUsingPUTRequest) (*CentralbankReservesView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CentralbankReservesView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CentralBankReservesControllerAPIService.IncreaseReservesUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/centralbankreserves"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cashAmount == nil {
		return localVarReturnValue, nil, reportError("cashAmount is required and must be specified")
	}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "cashAmount", r.cashAmount, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
