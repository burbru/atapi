/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the HistoryEntryView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistoryEntryView{}

// HistoryEntryView struct for HistoryEntryView
type HistoryEntryView struct {
	Content *MessagePrototype `json:"content,omitempty"`
	Date *int64 `json:"date,omitempty"`
	EntityId *string `json:"entityId,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewHistoryEntryView instantiates a new HistoryEntryView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryEntryView() *HistoryEntryView {
	this := HistoryEntryView{}
	return &this
}

// NewHistoryEntryViewWithDefaults instantiates a new HistoryEntryView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryEntryViewWithDefaults() *HistoryEntryView {
	this := HistoryEntryView{}
	return &this
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *HistoryEntryView) GetContent() MessagePrototype {
	if o == nil || IsNil(o.Content) {
		var ret MessagePrototype
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntryView) GetContentOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *HistoryEntryView) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given MessagePrototype and assigns it to the Content field.
func (o *HistoryEntryView) SetContent(v MessagePrototype) {
	o.Content = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HistoryEntryView) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntryView) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HistoryEntryView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *HistoryEntryView) SetDate(v int64) {
	o.Date = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *HistoryEntryView) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntryView) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *HistoryEntryView) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *HistoryEntryView) SetEntityId(v string) {
	o.EntityId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HistoryEntryView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntryView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HistoryEntryView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HistoryEntryView) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *HistoryEntryView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntryView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *HistoryEntryView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *HistoryEntryView) SetType(v string) {
	o.Type = &v
}

func (o HistoryEntryView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistoryEntryView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableHistoryEntryView struct {
	value *HistoryEntryView
	isSet bool
}

func (v NullableHistoryEntryView) Get() *HistoryEntryView {
	return v.value
}

func (v *NullableHistoryEntryView) Set(val *HistoryEntryView) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryEntryView) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryEntryView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryEntryView(val *HistoryEntryView) *NullableHistoryEntryView {
	return &NullableHistoryEntryView{value: val, isSet: true}
}

func (v NullableHistoryEntryView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryEntryView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


