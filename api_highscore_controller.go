/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// HighscoreControllerAPIService HighscoreControllerAPI service
type HighscoreControllerAPIService service

type ApiGetAllianceHighscoresUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	highscoreType *string
	page *int32
	size *int32
	sort *[]string
}

// Highscore Type
func (r ApiGetAllianceHighscoresUsingGETRequest) HighscoreType(highscoreType string) ApiGetAllianceHighscoresUsingGETRequest {
	r.highscoreType = &highscoreType
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetAllianceHighscoresUsingGETRequest) Page(page int32) ApiGetAllianceHighscoresUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetAllianceHighscoresUsingGETRequest) Size(size int32) ApiGetAllianceHighscoresUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetAllianceHighscoresUsingGETRequest) Sort(sort []string) ApiGetAllianceHighscoresUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetAllianceHighscoresUsingGETRequest) Execute() (*PageAllianceHighscoreEntryView, *http.Response, error) {
	return r.ApiService.GetAllianceHighscoresUsingGETExecute(r)
}

/*
GetAllianceHighscoresUsingGET List alliance highscore entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllianceHighscoresUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetAllianceHighscoresUsingGET(ctx context.Context) ApiGetAllianceHighscoresUsingGETRequest {
	return ApiGetAllianceHighscoresUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageAllianceHighscoreEntryView
func (a *HighscoreControllerAPIService) GetAllianceHighscoresUsingGETExecute(r ApiGetAllianceHighscoresUsingGETRequest) (*PageAllianceHighscoreEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageAllianceHighscoreEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetAllianceHighscoresUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/alliancehighscores"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.highscoreType == nil {
		return localVarReturnValue, nil, reportError("highscoreType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "highscoreType", r.highscoreType, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBestAlliancesUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiGetBestAlliancesUsingGETRequest) Page(page int32) ApiGetBestAlliancesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetBestAlliancesUsingGETRequest) Size(size int32) ApiGetBestAlliancesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetBestAlliancesUsingGETRequest) Sort(sort []string) ApiGetBestAlliancesUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetBestAlliancesUsingGETRequest) Execute() (*PageAllianceView, *http.Response, error) {
	return r.ApiService.GetBestAlliancesUsingGETExecute(r)
}

/*
GetBestAlliancesUsingGET List best alliances (combining all alliance highscores)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBestAlliancesUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetBestAlliancesUsingGET(ctx context.Context) ApiGetBestAlliancesUsingGETRequest {
	return ApiGetBestAlliancesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageAllianceView
func (a *HighscoreControllerAPIService) GetBestAlliancesUsingGETExecute(r ApiGetBestAlliancesUsingGETRequest) (*PageAllianceView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageAllianceView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetBestAlliancesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bestalliances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBestCompaniesUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiGetBestCompaniesUsingGETRequest) Page(page int32) ApiGetBestCompaniesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetBestCompaniesUsingGETRequest) Size(size int32) ApiGetBestCompaniesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetBestCompaniesUsingGETRequest) Sort(sort []string) ApiGetBestCompaniesUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetBestCompaniesUsingGETRequest) Execute() (*PageCompanyView, *http.Response, error) {
	return r.ApiService.GetBestCompaniesUsingGETExecute(r)
}

/*
GetBestCompaniesUsingGET List best companies (combining all company highscores)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBestCompaniesUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetBestCompaniesUsingGET(ctx context.Context) ApiGetBestCompaniesUsingGETRequest {
	return ApiGetBestCompaniesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageCompanyView
func (a *HighscoreControllerAPIService) GetBestCompaniesUsingGETExecute(r ApiGetBestCompaniesUsingGETRequest) (*PageCompanyView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageCompanyView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetBestCompaniesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bestcompanies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBestUsersUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiGetBestUsersUsingGETRequest) Page(page int32) ApiGetBestUsersUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetBestUsersUsingGETRequest) Size(size int32) ApiGetBestUsersUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetBestUsersUsingGETRequest) Sort(sort []string) ApiGetBestUsersUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetBestUsersUsingGETRequest) Execute() (*PageUsernameView, *http.Response, error) {
	return r.ApiService.GetBestUsersUsingGETExecute(r)
}

/*
GetBestUsersUsingGET List best users (combining all user highscores)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBestUsersUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetBestUsersUsingGET(ctx context.Context) ApiGetBestUsersUsingGETRequest {
	return ApiGetBestUsersUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageUsernameView
func (a *HighscoreControllerAPIService) GetBestUsersUsingGETExecute(r ApiGetBestUsersUsingGETRequest) (*PageUsernameView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageUsernameView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetBestUsersUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bestusers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyHighscoresUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	highscoreType *string
	page *int32
	size *int32
	sort *[]string
}

// Highscore Type
func (r ApiGetCompanyHighscoresUsingGETRequest) HighscoreType(highscoreType string) ApiGetCompanyHighscoresUsingGETRequest {
	r.highscoreType = &highscoreType
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetCompanyHighscoresUsingGETRequest) Page(page int32) ApiGetCompanyHighscoresUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetCompanyHighscoresUsingGETRequest) Size(size int32) ApiGetCompanyHighscoresUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetCompanyHighscoresUsingGETRequest) Sort(sort []string) ApiGetCompanyHighscoresUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetCompanyHighscoresUsingGETRequest) Execute() (*PageCompanyHighscoreEntryView, *http.Response, error) {
	return r.ApiService.GetCompanyHighscoresUsingGETExecute(r)
}

/*
GetCompanyHighscoresUsingGET List company highscore entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyHighscoresUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetCompanyHighscoresUsingGET(ctx context.Context) ApiGetCompanyHighscoresUsingGETRequest {
	return ApiGetCompanyHighscoresUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageCompanyHighscoreEntryView
func (a *HighscoreControllerAPIService) GetCompanyHighscoresUsingGETExecute(r ApiGetCompanyHighscoresUsingGETRequest) (*PageCompanyHighscoreEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageCompanyHighscoreEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetCompanyHighscoresUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/companyhighscores"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.highscoreType == nil {
		return localVarReturnValue, nil, reportError("highscoreType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "highscoreType", r.highscoreType, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserHighscoresUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	highscoreType *string
	page *int32
	size *int32
	sort *[]string
}

// Highscore Type
func (r ApiGetUserHighscoresUsingGETRequest) HighscoreType(highscoreType string) ApiGetUserHighscoresUsingGETRequest {
	r.highscoreType = &highscoreType
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetUserHighscoresUsingGETRequest) Page(page int32) ApiGetUserHighscoresUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetUserHighscoresUsingGETRequest) Size(size int32) ApiGetUserHighscoresUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetUserHighscoresUsingGETRequest) Sort(sort []string) ApiGetUserHighscoresUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetUserHighscoresUsingGETRequest) Execute() (*PageUserHighscoreEntryView, *http.Response, error) {
	return r.ApiService.GetUserHighscoresUsingGETExecute(r)
}

/*
GetUserHighscoresUsingGET List user highscore entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetUserHighscoresUsingGETRequest
*/
func (a *HighscoreControllerAPIService) GetUserHighscoresUsingGET(ctx context.Context) ApiGetUserHighscoresUsingGETRequest {
	return ApiGetUserHighscoresUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageUserHighscoreEntryView
func (a *HighscoreControllerAPIService) GetUserHighscoresUsingGETExecute(r ApiGetUserHighscoresUsingGETRequest) (*PageUserHighscoreEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageUserHighscoreEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.GetUserHighscoresUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/userhighscores"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.highscoreType == nil {
		return localVarReturnValue, nil, reportError("highscoreType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "highscoreType", r.highscoreType, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListHighscoreHistoryUsingGETRequest struct {
	ctx context.Context
	ApiService *HighscoreControllerAPIService
	entityId *string
	highscoreType *string
	page *int32
	size *int32
	sort *[]string
}

// Entity ID
func (r ApiListHighscoreHistoryUsingGETRequest) EntityId(entityId string) ApiListHighscoreHistoryUsingGETRequest {
	r.entityId = &entityId
	return r
}

// Highscore Type
func (r ApiListHighscoreHistoryUsingGETRequest) HighscoreType(highscoreType string) ApiListHighscoreHistoryUsingGETRequest {
	r.highscoreType = &highscoreType
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListHighscoreHistoryUsingGETRequest) Page(page int32) ApiListHighscoreHistoryUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListHighscoreHistoryUsingGETRequest) Size(size int32) ApiListHighscoreHistoryUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListHighscoreHistoryUsingGETRequest) Sort(sort []string) ApiListHighscoreHistoryUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListHighscoreHistoryUsingGETRequest) Execute() (*PageHighscoreHistoryEntryView, *http.Response, error) {
	return r.ApiService.ListHighscoreHistoryUsingGETExecute(r)
}

/*
ListHighscoreHistoryUsingGET List highscore history entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListHighscoreHistoryUsingGETRequest
*/
func (a *HighscoreControllerAPIService) ListHighscoreHistoryUsingGET(ctx context.Context) ApiListHighscoreHistoryUsingGETRequest {
	return ApiListHighscoreHistoryUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageHighscoreHistoryEntryView
func (a *HighscoreControllerAPIService) ListHighscoreHistoryUsingGETExecute(r ApiListHighscoreHistoryUsingGETRequest) (*PageHighscoreHistoryEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageHighscoreHistoryEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighscoreControllerAPIService.ListHighscoreHistoryUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/highscorehistoryentries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityId == nil {
		return localVarReturnValue, nil, reportError("entityId is required and must be specified")
	}
	if r.highscoreType == nil {
		return localVarReturnValue, nil, reportError("highscoreType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", r.entityId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "highscoreType", r.highscoreType, "")
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
