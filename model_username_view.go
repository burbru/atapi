/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the UsernameView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernameView{}

// UsernameView struct for UsernameView
type UsernameView struct {
	GravatarHash *string `json:"gravatarHash,omitempty"`
	Id *string `json:"id,omitempty"`
	MyUser *bool `json:"myUser,omitempty"`
	RefId *string `json:"refId,omitempty"`
	RegistrationDate *int64 `json:"registrationDate,omitempty"`
	UserCapabilities *UserCapabilitiesView `json:"userCapabilities,omitempty"`
	Username *string `json:"username,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewUsernameView instantiates a new UsernameView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernameView() *UsernameView {
	this := UsernameView{}
	return &this
}

// NewUsernameViewWithDefaults instantiates a new UsernameView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernameViewWithDefaults() *UsernameView {
	this := UsernameView{}
	return &this
}

// GetGravatarHash returns the GravatarHash field value if set, zero value otherwise.
func (o *UsernameView) GetGravatarHash() string {
	if o == nil || IsNil(o.GravatarHash) {
		var ret string
		return ret
	}
	return *o.GravatarHash
}

// GetGravatarHashOk returns a tuple with the GravatarHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetGravatarHashOk() (*string, bool) {
	if o == nil || IsNil(o.GravatarHash) {
		return nil, false
	}
	return o.GravatarHash, true
}

// HasGravatarHash returns a boolean if a field has been set.
func (o *UsernameView) HasGravatarHash() bool {
	if o != nil && !IsNil(o.GravatarHash) {
		return true
	}

	return false
}

// SetGravatarHash gets a reference to the given string and assigns it to the GravatarHash field.
func (o *UsernameView) SetGravatarHash(v string) {
	o.GravatarHash = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UsernameView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UsernameView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UsernameView) SetId(v string) {
	o.Id = &v
}

// GetMyUser returns the MyUser field value if set, zero value otherwise.
func (o *UsernameView) GetMyUser() bool {
	if o == nil || IsNil(o.MyUser) {
		var ret bool
		return ret
	}
	return *o.MyUser
}

// GetMyUserOk returns a tuple with the MyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetMyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.MyUser) {
		return nil, false
	}
	return o.MyUser, true
}

// HasMyUser returns a boolean if a field has been set.
func (o *UsernameView) HasMyUser() bool {
	if o != nil && !IsNil(o.MyUser) {
		return true
	}

	return false
}

// SetMyUser gets a reference to the given bool and assigns it to the MyUser field.
func (o *UsernameView) SetMyUser(v bool) {
	o.MyUser = &v
}

// GetRefId returns the RefId field value if set, zero value otherwise.
func (o *UsernameView) GetRefId() string {
	if o == nil || IsNil(o.RefId) {
		var ret string
		return ret
	}
	return *o.RefId
}

// GetRefIdOk returns a tuple with the RefId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetRefIdOk() (*string, bool) {
	if o == nil || IsNil(o.RefId) {
		return nil, false
	}
	return o.RefId, true
}

// HasRefId returns a boolean if a field has been set.
func (o *UsernameView) HasRefId() bool {
	if o != nil && !IsNil(o.RefId) {
		return true
	}

	return false
}

// SetRefId gets a reference to the given string and assigns it to the RefId field.
func (o *UsernameView) SetRefId(v string) {
	o.RefId = &v
}

// GetRegistrationDate returns the RegistrationDate field value if set, zero value otherwise.
func (o *UsernameView) GetRegistrationDate() int64 {
	if o == nil || IsNil(o.RegistrationDate) {
		var ret int64
		return ret
	}
	return *o.RegistrationDate
}

// GetRegistrationDateOk returns a tuple with the RegistrationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetRegistrationDateOk() (*int64, bool) {
	if o == nil || IsNil(o.RegistrationDate) {
		return nil, false
	}
	return o.RegistrationDate, true
}

// HasRegistrationDate returns a boolean if a field has been set.
func (o *UsernameView) HasRegistrationDate() bool {
	if o != nil && !IsNil(o.RegistrationDate) {
		return true
	}

	return false
}

// SetRegistrationDate gets a reference to the given int64 and assigns it to the RegistrationDate field.
func (o *UsernameView) SetRegistrationDate(v int64) {
	o.RegistrationDate = &v
}

// GetUserCapabilities returns the UserCapabilities field value if set, zero value otherwise.
func (o *UsernameView) GetUserCapabilities() UserCapabilitiesView {
	if o == nil || IsNil(o.UserCapabilities) {
		var ret UserCapabilitiesView
		return ret
	}
	return *o.UserCapabilities
}

// GetUserCapabilitiesOk returns a tuple with the UserCapabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetUserCapabilitiesOk() (*UserCapabilitiesView, bool) {
	if o == nil || IsNil(o.UserCapabilities) {
		return nil, false
	}
	return o.UserCapabilities, true
}

// HasUserCapabilities returns a boolean if a field has been set.
func (o *UsernameView) HasUserCapabilities() bool {
	if o != nil && !IsNil(o.UserCapabilities) {
		return true
	}

	return false
}

// SetUserCapabilities gets a reference to the given UserCapabilitiesView and assigns it to the UserCapabilities field.
func (o *UsernameView) SetUserCapabilities(v UserCapabilitiesView) {
	o.UserCapabilities = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UsernameView) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UsernameView) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UsernameView) SetUsername(v string) {
	o.Username = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UsernameView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernameView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UsernameView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *UsernameView) SetVersion(v int64) {
	o.Version = &v
}

func (o UsernameView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernameView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GravatarHash) {
		toSerialize["gravatarHash"] = o.GravatarHash
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.MyUser) {
		toSerialize["myUser"] = o.MyUser
	}
	if !IsNil(o.RefId) {
		toSerialize["refId"] = o.RefId
	}
	if !IsNil(o.RegistrationDate) {
		toSerialize["registrationDate"] = o.RegistrationDate
	}
	if !IsNil(o.UserCapabilities) {
		toSerialize["userCapabilities"] = o.UserCapabilities
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableUsernameView struct {
	value *UsernameView
	isSet bool
}

func (v NullableUsernameView) Get() *UsernameView {
	return v.value
}

func (v *NullableUsernameView) Set(val *UsernameView) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernameView) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernameView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernameView(val *UsernameView) *NullableUsernameView {
	return &NullableUsernameView{value: val, isSet: true}
}

func (v NullableUsernameView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernameView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


