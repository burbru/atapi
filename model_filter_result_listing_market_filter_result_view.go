/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the FilterResultListingMarketFilterResultView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterResultListingMarketFilterResultView{}

// FilterResultListingMarketFilterResultView struct for FilterResultListingMarketFilterResultView
type FilterResultListingMarketFilterResultView struct {
	AppliedFilter map[string]interface{} `json:"appliedFilter,omitempty"`
	Results []ListingMarketFilterResultView `json:"results,omitempty"`
}

// NewFilterResultListingMarketFilterResultView instantiates a new FilterResultListingMarketFilterResultView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterResultListingMarketFilterResultView() *FilterResultListingMarketFilterResultView {
	this := FilterResultListingMarketFilterResultView{}
	return &this
}

// NewFilterResultListingMarketFilterResultViewWithDefaults instantiates a new FilterResultListingMarketFilterResultView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterResultListingMarketFilterResultViewWithDefaults() *FilterResultListingMarketFilterResultView {
	this := FilterResultListingMarketFilterResultView{}
	return &this
}

// GetAppliedFilter returns the AppliedFilter field value if set, zero value otherwise.
func (o *FilterResultListingMarketFilterResultView) GetAppliedFilter() map[string]interface{} {
	if o == nil || IsNil(o.AppliedFilter) {
		var ret map[string]interface{}
		return ret
	}
	return o.AppliedFilter
}

// GetAppliedFilterOk returns a tuple with the AppliedFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResultListingMarketFilterResultView) GetAppliedFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AppliedFilter) {
		return map[string]interface{}{}, false
	}
	return o.AppliedFilter, true
}

// HasAppliedFilter returns a boolean if a field has been set.
func (o *FilterResultListingMarketFilterResultView) HasAppliedFilter() bool {
	if o != nil && !IsNil(o.AppliedFilter) {
		return true
	}

	return false
}

// SetAppliedFilter gets a reference to the given map[string]interface{} and assigns it to the AppliedFilter field.
func (o *FilterResultListingMarketFilterResultView) SetAppliedFilter(v map[string]interface{}) {
	o.AppliedFilter = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *FilterResultListingMarketFilterResultView) GetResults() []ListingMarketFilterResultView {
	if o == nil || IsNil(o.Results) {
		var ret []ListingMarketFilterResultView
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterResultListingMarketFilterResultView) GetResultsOk() ([]ListingMarketFilterResultView, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *FilterResultListingMarketFilterResultView) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []ListingMarketFilterResultView and assigns it to the Results field.
func (o *FilterResultListingMarketFilterResultView) SetResults(v []ListingMarketFilterResultView) {
	o.Results = v
}

func (o FilterResultListingMarketFilterResultView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterResultListingMarketFilterResultView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliedFilter) {
		toSerialize["appliedFilter"] = o.AppliedFilter
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableFilterResultListingMarketFilterResultView struct {
	value *FilterResultListingMarketFilterResultView
	isSet bool
}

func (v NullableFilterResultListingMarketFilterResultView) Get() *FilterResultListingMarketFilterResultView {
	return v.value
}

func (v *NullableFilterResultListingMarketFilterResultView) Set(val *FilterResultListingMarketFilterResultView) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterResultListingMarketFilterResultView) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterResultListingMarketFilterResultView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterResultListingMarketFilterResultView(val *FilterResultListingMarketFilterResultView) *NullableFilterResultListingMarketFilterResultView {
	return &NullableFilterResultListingMarketFilterResultView{value: val, isSet: true}
}

func (v NullableFilterResultListingMarketFilterResultView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterResultListingMarketFilterResultView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


