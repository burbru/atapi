/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
	"time"
)

// checks if the CompanyHighscoreEntryView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompanyHighscoreEntryView{}

// CompanyHighscoreEntryView struct for CompanyHighscoreEntryView
type CompanyHighscoreEntryView struct {
	Company *CompactCompanyView `json:"company,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	HistoryDate *int64 `json:"historyDate,omitempty"`
	HistoryPosition *int64 `json:"historyPosition,omitempty"`
	HistoryValue *float32 `json:"historyValue,omitempty"`
	Value *float32 `json:"value,omitempty"`
}

// NewCompanyHighscoreEntryView instantiates a new CompanyHighscoreEntryView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyHighscoreEntryView() *CompanyHighscoreEntryView {
	this := CompanyHighscoreEntryView{}
	return &this
}

// NewCompanyHighscoreEntryViewWithDefaults instantiates a new CompanyHighscoreEntryView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyHighscoreEntryViewWithDefaults() *CompanyHighscoreEntryView {
	this := CompanyHighscoreEntryView{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetCompany() CompactCompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompactCompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetCompanyOk() (*CompactCompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompactCompanyView and assigns it to the Company field.
func (o *CompanyHighscoreEntryView) SetCompany(v CompactCompanyView) {
	o.Company = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *CompanyHighscoreEntryView) SetDate(v time.Time) {
	o.Date = &v
}

// GetHistoryDate returns the HistoryDate field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetHistoryDate() int64 {
	if o == nil || IsNil(o.HistoryDate) {
		var ret int64
		return ret
	}
	return *o.HistoryDate
}

// GetHistoryDateOk returns a tuple with the HistoryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetHistoryDateOk() (*int64, bool) {
	if o == nil || IsNil(o.HistoryDate) {
		return nil, false
	}
	return o.HistoryDate, true
}

// HasHistoryDate returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasHistoryDate() bool {
	if o != nil && !IsNil(o.HistoryDate) {
		return true
	}

	return false
}

// SetHistoryDate gets a reference to the given int64 and assigns it to the HistoryDate field.
func (o *CompanyHighscoreEntryView) SetHistoryDate(v int64) {
	o.HistoryDate = &v
}

// GetHistoryPosition returns the HistoryPosition field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetHistoryPosition() int64 {
	if o == nil || IsNil(o.HistoryPosition) {
		var ret int64
		return ret
	}
	return *o.HistoryPosition
}

// GetHistoryPositionOk returns a tuple with the HistoryPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetHistoryPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.HistoryPosition) {
		return nil, false
	}
	return o.HistoryPosition, true
}

// HasHistoryPosition returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasHistoryPosition() bool {
	if o != nil && !IsNil(o.HistoryPosition) {
		return true
	}

	return false
}

// SetHistoryPosition gets a reference to the given int64 and assigns it to the HistoryPosition field.
func (o *CompanyHighscoreEntryView) SetHistoryPosition(v int64) {
	o.HistoryPosition = &v
}

// GetHistoryValue returns the HistoryValue field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetHistoryValue() float32 {
	if o == nil || IsNil(o.HistoryValue) {
		var ret float32
		return ret
	}
	return *o.HistoryValue
}

// GetHistoryValueOk returns a tuple with the HistoryValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetHistoryValueOk() (*float32, bool) {
	if o == nil || IsNil(o.HistoryValue) {
		return nil, false
	}
	return o.HistoryValue, true
}

// HasHistoryValue returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasHistoryValue() bool {
	if o != nil && !IsNil(o.HistoryValue) {
		return true
	}

	return false
}

// SetHistoryValue gets a reference to the given float32 and assigns it to the HistoryValue field.
func (o *CompanyHighscoreEntryView) SetHistoryValue(v float32) {
	o.HistoryValue = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *CompanyHighscoreEntryView) GetValue() float32 {
	if o == nil || IsNil(o.Value) {
		var ret float32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyHighscoreEntryView) GetValueOk() (*float32, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CompanyHighscoreEntryView) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given float32 and assigns it to the Value field.
func (o *CompanyHighscoreEntryView) SetValue(v float32) {
	o.Value = &v
}

func (o CompanyHighscoreEntryView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompanyHighscoreEntryView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.HistoryDate) {
		toSerialize["historyDate"] = o.HistoryDate
	}
	if !IsNil(o.HistoryPosition) {
		toSerialize["historyPosition"] = o.HistoryPosition
	}
	if !IsNil(o.HistoryValue) {
		toSerialize["historyValue"] = o.HistoryValue
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCompanyHighscoreEntryView struct {
	value *CompanyHighscoreEntryView
	isSet bool
}

func (v NullableCompanyHighscoreEntryView) Get() *CompanyHighscoreEntryView {
	return v.value
}

func (v *NullableCompanyHighscoreEntryView) Set(val *CompanyHighscoreEntryView) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyHighscoreEntryView) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyHighscoreEntryView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyHighscoreEntryView(val *CompanyHighscoreEntryView) *NullableCompanyHighscoreEntryView {
	return &NullableCompanyHighscoreEntryView{value: val, isSet: true}
}

func (v NullableCompanyHighscoreEntryView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyHighscoreEntryView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


