/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the ChatRoomView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatRoomView{}

// ChatRoomView struct for ChatRoomView
type ChatRoomView struct {
	DateCreated *int64 `json:"dateCreated,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NumberOfMembers *int64 `json:"numberOfMembers,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewChatRoomView instantiates a new ChatRoomView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatRoomView() *ChatRoomView {
	this := ChatRoomView{}
	return &this
}

// NewChatRoomViewWithDefaults instantiates a new ChatRoomView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatRoomViewWithDefaults() *ChatRoomView {
	this := ChatRoomView{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *ChatRoomView) GetDateCreated() int64 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int64
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRoomView) GetDateCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ChatRoomView) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int64 and assigns it to the DateCreated field.
func (o *ChatRoomView) SetDateCreated(v int64) {
	o.DateCreated = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChatRoomView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRoomView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChatRoomView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChatRoomView) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ChatRoomView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRoomView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ChatRoomView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ChatRoomView) SetName(v string) {
	o.Name = &v
}

// GetNumberOfMembers returns the NumberOfMembers field value if set, zero value otherwise.
func (o *ChatRoomView) GetNumberOfMembers() int64 {
	if o == nil || IsNil(o.NumberOfMembers) {
		var ret int64
		return ret
	}
	return *o.NumberOfMembers
}

// GetNumberOfMembersOk returns a tuple with the NumberOfMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRoomView) GetNumberOfMembersOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfMembers) {
		return nil, false
	}
	return o.NumberOfMembers, true
}

// HasNumberOfMembers returns a boolean if a field has been set.
func (o *ChatRoomView) HasNumberOfMembers() bool {
	if o != nil && !IsNil(o.NumberOfMembers) {
		return true
	}

	return false
}

// SetNumberOfMembers gets a reference to the given int64 and assigns it to the NumberOfMembers field.
func (o *ChatRoomView) SetNumberOfMembers(v int64) {
	o.NumberOfMembers = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ChatRoomView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatRoomView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ChatRoomView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *ChatRoomView) SetVersion(v int64) {
	o.Version = &v
}

func (o ChatRoomView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatRoomView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumberOfMembers) {
		toSerialize["numberOfMembers"] = o.NumberOfMembers
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableChatRoomView struct {
	value *ChatRoomView
	isSet bool
}

func (v NullableChatRoomView) Get() *ChatRoomView {
	return v.value
}

func (v *NullableChatRoomView) Set(val *ChatRoomView) {
	v.value = val
	v.isSet = true
}

func (v NullableChatRoomView) IsSet() bool {
	return v.isSet
}

func (v *NullableChatRoomView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatRoomView(val *ChatRoomView) *NullableChatRoomView {
	return &NullableChatRoomView{value: val, isSet: true}
}

func (v NullableChatRoomView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatRoomView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


