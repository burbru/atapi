/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the SponsoringGoalView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SponsoringGoalView{}

// SponsoringGoalView struct for SponsoringGoalView
type SponsoringGoalView struct {
	AchievedPercentage *float32 `json:"achievedPercentage,omitempty"`
	Description *string `json:"description,omitempty"`
	EndDate *int64 `json:"endDate,omitempty"`
	Id *string `json:"id,omitempty"`
	NeededGoldHours *int64 `json:"neededGoldHours,omitempty"`
	Sponsors []SponsoredGoldHoursView `json:"sponsors,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewSponsoringGoalView instantiates a new SponsoringGoalView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSponsoringGoalView() *SponsoringGoalView {
	this := SponsoringGoalView{}
	return &this
}

// NewSponsoringGoalViewWithDefaults instantiates a new SponsoringGoalView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSponsoringGoalViewWithDefaults() *SponsoringGoalView {
	this := SponsoringGoalView{}
	return &this
}

// GetAchievedPercentage returns the AchievedPercentage field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetAchievedPercentage() float32 {
	if o == nil || IsNil(o.AchievedPercentage) {
		var ret float32
		return ret
	}
	return *o.AchievedPercentage
}

// GetAchievedPercentageOk returns a tuple with the AchievedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetAchievedPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.AchievedPercentage) {
		return nil, false
	}
	return o.AchievedPercentage, true
}

// HasAchievedPercentage returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasAchievedPercentage() bool {
	if o != nil && !IsNil(o.AchievedPercentage) {
		return true
	}

	return false
}

// SetAchievedPercentage gets a reference to the given float32 and assigns it to the AchievedPercentage field.
func (o *SponsoringGoalView) SetAchievedPercentage(v float32) {
	o.AchievedPercentage = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SponsoringGoalView) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *SponsoringGoalView) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SponsoringGoalView) SetId(v string) {
	o.Id = &v
}

// GetNeededGoldHours returns the NeededGoldHours field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetNeededGoldHours() int64 {
	if o == nil || IsNil(o.NeededGoldHours) {
		var ret int64
		return ret
	}
	return *o.NeededGoldHours
}

// GetNeededGoldHoursOk returns a tuple with the NeededGoldHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetNeededGoldHoursOk() (*int64, bool) {
	if o == nil || IsNil(o.NeededGoldHours) {
		return nil, false
	}
	return o.NeededGoldHours, true
}

// HasNeededGoldHours returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasNeededGoldHours() bool {
	if o != nil && !IsNil(o.NeededGoldHours) {
		return true
	}

	return false
}

// SetNeededGoldHours gets a reference to the given int64 and assigns it to the NeededGoldHours field.
func (o *SponsoringGoalView) SetNeededGoldHours(v int64) {
	o.NeededGoldHours = &v
}

// GetSponsors returns the Sponsors field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetSponsors() []SponsoredGoldHoursView {
	if o == nil || IsNil(o.Sponsors) {
		var ret []SponsoredGoldHoursView
		return ret
	}
	return o.Sponsors
}

// GetSponsorsOk returns a tuple with the Sponsors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetSponsorsOk() ([]SponsoredGoldHoursView, bool) {
	if o == nil || IsNil(o.Sponsors) {
		return nil, false
	}
	return o.Sponsors, true
}

// HasSponsors returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasSponsors() bool {
	if o != nil && !IsNil(o.Sponsors) {
		return true
	}

	return false
}

// SetSponsors gets a reference to the given []SponsoredGoldHoursView and assigns it to the Sponsors field.
func (o *SponsoringGoalView) SetSponsors(v []SponsoredGoldHoursView) {
	o.Sponsors = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SponsoringGoalView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SponsoringGoalView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SponsoringGoalView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SponsoringGoalView) SetVersion(v int64) {
	o.Version = &v
}

func (o SponsoringGoalView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SponsoringGoalView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AchievedPercentage) {
		toSerialize["achievedPercentage"] = o.AchievedPercentage
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NeededGoldHours) {
		toSerialize["neededGoldHours"] = o.NeededGoldHours
	}
	if !IsNil(o.Sponsors) {
		toSerialize["sponsors"] = o.Sponsors
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSponsoringGoalView struct {
	value *SponsoringGoalView
	isSet bool
}

func (v NullableSponsoringGoalView) Get() *SponsoringGoalView {
	return v.value
}

func (v *NullableSponsoringGoalView) Set(val *SponsoringGoalView) {
	v.value = val
	v.isSet = true
}

func (v NullableSponsoringGoalView) IsSet() bool {
	return v.isSet
}

func (v *NullableSponsoringGoalView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSponsoringGoalView(val *SponsoringGoalView) *NullableSponsoringGoalView {
	return &NullableSponsoringGoalView{value: val, isSet: true}
}

func (v NullableSponsoringGoalView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSponsoringGoalView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


