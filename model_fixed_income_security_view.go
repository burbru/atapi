/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the FixedIncomeSecurityView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedIncomeSecurityView{}

// FixedIncomeSecurityView struct for FixedIncomeSecurityView
type FixedIncomeSecurityView struct {
	FaceValue *float32 `json:"faceValue,omitempty"`
	Id *string `json:"id,omitempty"`
	InterestRate *float32 `json:"interestRate,omitempty"`
	IssueDate *int64 `json:"issueDate,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	MaturityDate *int64 `json:"maturityDate,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceSpread *PriceSpreadView `json:"priceSpread,omitempty"`
	RepurchaseListing *ListingView `json:"repurchaseListing,omitempty"`
	Version *int64 `json:"version,omitempty"`
	Volume *float32 `json:"volume,omitempty"`
}

// NewFixedIncomeSecurityView instantiates a new FixedIncomeSecurityView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedIncomeSecurityView() *FixedIncomeSecurityView {
	this := FixedIncomeSecurityView{}
	return &this
}

// NewFixedIncomeSecurityViewWithDefaults instantiates a new FixedIncomeSecurityView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedIncomeSecurityViewWithDefaults() *FixedIncomeSecurityView {
	this := FixedIncomeSecurityView{}
	return &this
}

// GetFaceValue returns the FaceValue field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetFaceValue() float32 {
	if o == nil || IsNil(o.FaceValue) {
		var ret float32
		return ret
	}
	return *o.FaceValue
}

// GetFaceValueOk returns a tuple with the FaceValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetFaceValueOk() (*float32, bool) {
	if o == nil || IsNil(o.FaceValue) {
		return nil, false
	}
	return o.FaceValue, true
}

// HasFaceValue returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasFaceValue() bool {
	if o != nil && !IsNil(o.FaceValue) {
		return true
	}

	return false
}

// SetFaceValue gets a reference to the given float32 and assigns it to the FaceValue field.
func (o *FixedIncomeSecurityView) SetFaceValue(v float32) {
	o.FaceValue = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FixedIncomeSecurityView) SetId(v string) {
	o.Id = &v
}

// GetInterestRate returns the InterestRate field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetInterestRate() float32 {
	if o == nil || IsNil(o.InterestRate) {
		var ret float32
		return ret
	}
	return *o.InterestRate
}

// GetInterestRateOk returns a tuple with the InterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetInterestRateOk() (*float32, bool) {
	if o == nil || IsNil(o.InterestRate) {
		return nil, false
	}
	return o.InterestRate, true
}

// HasInterestRate returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasInterestRate() bool {
	if o != nil && !IsNil(o.InterestRate) {
		return true
	}

	return false
}

// SetInterestRate gets a reference to the given float32 and assigns it to the InterestRate field.
func (o *FixedIncomeSecurityView) SetInterestRate(v float32) {
	o.InterestRate = &v
}

// GetIssueDate returns the IssueDate field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetIssueDate() int64 {
	if o == nil || IsNil(o.IssueDate) {
		var ret int64
		return ret
	}
	return *o.IssueDate
}

// GetIssueDateOk returns a tuple with the IssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetIssueDateOk() (*int64, bool) {
	if o == nil || IsNil(o.IssueDate) {
		return nil, false
	}
	return o.IssueDate, true
}

// HasIssueDate returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasIssueDate() bool {
	if o != nil && !IsNil(o.IssueDate) {
		return true
	}

	return false
}

// SetIssueDate gets a reference to the given int64 and assigns it to the IssueDate field.
func (o *FixedIncomeSecurityView) SetIssueDate(v int64) {
	o.IssueDate = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *FixedIncomeSecurityView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetMaturityDate returns the MaturityDate field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetMaturityDate() int64 {
	if o == nil || IsNil(o.MaturityDate) {
		var ret int64
		return ret
	}
	return *o.MaturityDate
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetMaturityDateOk() (*int64, bool) {
	if o == nil || IsNil(o.MaturityDate) {
		return nil, false
	}
	return o.MaturityDate, true
}

// HasMaturityDate returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasMaturityDate() bool {
	if o != nil && !IsNil(o.MaturityDate) {
		return true
	}

	return false
}

// SetMaturityDate gets a reference to the given int64 and assigns it to the MaturityDate field.
func (o *FixedIncomeSecurityView) SetMaturityDate(v int64) {
	o.MaturityDate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FixedIncomeSecurityView) SetName(v string) {
	o.Name = &v
}

// GetPriceSpread returns the PriceSpread field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetPriceSpread() PriceSpreadView {
	if o == nil || IsNil(o.PriceSpread) {
		var ret PriceSpreadView
		return ret
	}
	return *o.PriceSpread
}

// GetPriceSpreadOk returns a tuple with the PriceSpread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetPriceSpreadOk() (*PriceSpreadView, bool) {
	if o == nil || IsNil(o.PriceSpread) {
		return nil, false
	}
	return o.PriceSpread, true
}

// HasPriceSpread returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasPriceSpread() bool {
	if o != nil && !IsNil(o.PriceSpread) {
		return true
	}

	return false
}

// SetPriceSpread gets a reference to the given PriceSpreadView and assigns it to the PriceSpread field.
func (o *FixedIncomeSecurityView) SetPriceSpread(v PriceSpreadView) {
	o.PriceSpread = &v
}

// GetRepurchaseListing returns the RepurchaseListing field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetRepurchaseListing() ListingView {
	if o == nil || IsNil(o.RepurchaseListing) {
		var ret ListingView
		return ret
	}
	return *o.RepurchaseListing
}

// GetRepurchaseListingOk returns a tuple with the RepurchaseListing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetRepurchaseListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.RepurchaseListing) {
		return nil, false
	}
	return o.RepurchaseListing, true
}

// HasRepurchaseListing returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasRepurchaseListing() bool {
	if o != nil && !IsNil(o.RepurchaseListing) {
		return true
	}

	return false
}

// SetRepurchaseListing gets a reference to the given ListingView and assigns it to the RepurchaseListing field.
func (o *FixedIncomeSecurityView) SetRepurchaseListing(v ListingView) {
	o.RepurchaseListing = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *FixedIncomeSecurityView) SetVersion(v int64) {
	o.Version = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *FixedIncomeSecurityView) GetVolume() float32 {
	if o == nil || IsNil(o.Volume) {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIncomeSecurityView) GetVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *FixedIncomeSecurityView) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *FixedIncomeSecurityView) SetVolume(v float32) {
	o.Volume = &v
}

func (o FixedIncomeSecurityView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedIncomeSecurityView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FaceValue) {
		toSerialize["faceValue"] = o.FaceValue
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InterestRate) {
		toSerialize["interestRate"] = o.InterestRate
	}
	if !IsNil(o.IssueDate) {
		toSerialize["issueDate"] = o.IssueDate
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.MaturityDate) {
		toSerialize["maturityDate"] = o.MaturityDate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PriceSpread) {
		toSerialize["priceSpread"] = o.PriceSpread
	}
	if !IsNil(o.RepurchaseListing) {
		toSerialize["repurchaseListing"] = o.RepurchaseListing
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableFixedIncomeSecurityView struct {
	value *FixedIncomeSecurityView
	isSet bool
}

func (v NullableFixedIncomeSecurityView) Get() *FixedIncomeSecurityView {
	return v.value
}

func (v *NullableFixedIncomeSecurityView) Set(val *FixedIncomeSecurityView) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedIncomeSecurityView) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedIncomeSecurityView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedIncomeSecurityView(val *FixedIncomeSecurityView) *NullableFixedIncomeSecurityView {
	return &NullableFixedIncomeSecurityView{value: val, isSet: true}
}

func (v NullableFixedIncomeSecurityView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedIncomeSecurityView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


