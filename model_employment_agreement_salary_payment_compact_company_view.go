/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the EmploymentAgreementSalaryPaymentCompactCompanyView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmploymentAgreementSalaryPaymentCompactCompanyView{}

// EmploymentAgreementSalaryPaymentCompactCompanyView struct for EmploymentAgreementSalaryPaymentCompactCompanyView
type EmploymentAgreementSalaryPaymentCompactCompanyView struct {
	Company *CompactCompanyView `json:"company,omitempty"`
	DailyWage *float32 `json:"dailyWage,omitempty"`
	Id *string `json:"id,omitempty"`
	LastPayment *SalaryPaymentView `json:"lastPayment,omitempty"`
	PayAutomatically *bool `json:"payAutomatically,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewEmploymentAgreementSalaryPaymentCompactCompanyView instantiates a new EmploymentAgreementSalaryPaymentCompactCompanyView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmploymentAgreementSalaryPaymentCompactCompanyView() *EmploymentAgreementSalaryPaymentCompactCompanyView {
	this := EmploymentAgreementSalaryPaymentCompactCompanyView{}
	return &this
}

// NewEmploymentAgreementSalaryPaymentCompactCompanyViewWithDefaults instantiates a new EmploymentAgreementSalaryPaymentCompactCompanyView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmploymentAgreementSalaryPaymentCompactCompanyViewWithDefaults() *EmploymentAgreementSalaryPaymentCompactCompanyView {
	this := EmploymentAgreementSalaryPaymentCompactCompanyView{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetCompany() CompactCompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompactCompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetCompanyOk() (*CompactCompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompactCompanyView and assigns it to the Company field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetCompany(v CompactCompanyView) {
	o.Company = &v
}

// GetDailyWage returns the DailyWage field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetDailyWage() float32 {
	if o == nil || IsNil(o.DailyWage) {
		var ret float32
		return ret
	}
	return *o.DailyWage
}

// GetDailyWageOk returns a tuple with the DailyWage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetDailyWageOk() (*float32, bool) {
	if o == nil || IsNil(o.DailyWage) {
		return nil, false
	}
	return o.DailyWage, true
}

// HasDailyWage returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasDailyWage() bool {
	if o != nil && !IsNil(o.DailyWage) {
		return true
	}

	return false
}

// SetDailyWage gets a reference to the given float32 and assigns it to the DailyWage field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetDailyWage(v float32) {
	o.DailyWage = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetId(v string) {
	o.Id = &v
}

// GetLastPayment returns the LastPayment field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetLastPayment() SalaryPaymentView {
	if o == nil || IsNil(o.LastPayment) {
		var ret SalaryPaymentView
		return ret
	}
	return *o.LastPayment
}

// GetLastPaymentOk returns a tuple with the LastPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetLastPaymentOk() (*SalaryPaymentView, bool) {
	if o == nil || IsNil(o.LastPayment) {
		return nil, false
	}
	return o.LastPayment, true
}

// HasLastPayment returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasLastPayment() bool {
	if o != nil && !IsNil(o.LastPayment) {
		return true
	}

	return false
}

// SetLastPayment gets a reference to the given SalaryPaymentView and assigns it to the LastPayment field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetLastPayment(v SalaryPaymentView) {
	o.LastPayment = &v
}

// GetPayAutomatically returns the PayAutomatically field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetPayAutomatically() bool {
	if o == nil || IsNil(o.PayAutomatically) {
		var ret bool
		return ret
	}
	return *o.PayAutomatically
}

// GetPayAutomaticallyOk returns a tuple with the PayAutomatically field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetPayAutomaticallyOk() (*bool, bool) {
	if o == nil || IsNil(o.PayAutomatically) {
		return nil, false
	}
	return o.PayAutomatically, true
}

// HasPayAutomatically returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasPayAutomatically() bool {
	if o != nil && !IsNil(o.PayAutomatically) {
		return true
	}

	return false
}

// SetPayAutomatically gets a reference to the given bool and assigns it to the PayAutomatically field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetPayAutomatically(v bool) {
	o.PayAutomatically = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *EmploymentAgreementSalaryPaymentCompactCompanyView) SetVersion(v int64) {
	o.Version = &v
}

func (o EmploymentAgreementSalaryPaymentCompactCompanyView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmploymentAgreementSalaryPaymentCompactCompanyView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.DailyWage) {
		toSerialize["dailyWage"] = o.DailyWage
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastPayment) {
		toSerialize["lastPayment"] = o.LastPayment
	}
	if !IsNil(o.PayAutomatically) {
		toSerialize["payAutomatically"] = o.PayAutomatically
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableEmploymentAgreementSalaryPaymentCompactCompanyView struct {
	value *EmploymentAgreementSalaryPaymentCompactCompanyView
	isSet bool
}

func (v NullableEmploymentAgreementSalaryPaymentCompactCompanyView) Get() *EmploymentAgreementSalaryPaymentCompactCompanyView {
	return v.value
}

func (v *NullableEmploymentAgreementSalaryPaymentCompactCompanyView) Set(val *EmploymentAgreementSalaryPaymentCompactCompanyView) {
	v.value = val
	v.isSet = true
}

func (v NullableEmploymentAgreementSalaryPaymentCompactCompanyView) IsSet() bool {
	return v.isSet
}

func (v *NullableEmploymentAgreementSalaryPaymentCompactCompanyView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmploymentAgreementSalaryPaymentCompactCompanyView(val *EmploymentAgreementSalaryPaymentCompactCompanyView) *NullableEmploymentAgreementSalaryPaymentCompactCompanyView {
	return &NullableEmploymentAgreementSalaryPaymentCompactCompanyView{value: val, isSet: true}
}

func (v NullableEmploymentAgreementSalaryPaymentCompactCompanyView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmploymentAgreementSalaryPaymentCompactCompanyView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


