/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the ListingFilterDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingFilterDefinition{}

// ListingFilterDefinition struct for ListingFilterDefinition
type ListingFilterDefinition struct {
	AllowedValues []string `json:"allowedValues,omitempty"`
	DefaultFilterOperator *string `json:"defaultFilterOperator,omitempty"`
	DefaultParameters []string `json:"defaultParameters,omitempty"`
	Description *MessagePrototype `json:"description,omitempty"`
	FieldName *string `json:"fieldName,omitempty"`
	FilterOperators []string `json:"filterOperators,omitempty"`
	NextFilterDefinitions []FilterDefinition `json:"nextFilterDefinitions,omitempty"`
	ParameterType *string `json:"parameterType,omitempty"`
	PredicateOperators []string `json:"predicateOperators,omitempty"`
}

// NewListingFilterDefinition instantiates a new ListingFilterDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingFilterDefinition() *ListingFilterDefinition {
	this := ListingFilterDefinition{}
	return &this
}

// NewListingFilterDefinitionWithDefaults instantiates a new ListingFilterDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingFilterDefinitionWithDefaults() *ListingFilterDefinition {
	this := ListingFilterDefinition{}
	return &this
}

// GetAllowedValues returns the AllowedValues field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetAllowedValues() []string {
	if o == nil || IsNil(o.AllowedValues) {
		var ret []string
		return ret
	}
	return o.AllowedValues
}

// GetAllowedValuesOk returns a tuple with the AllowedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetAllowedValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedValues) {
		return nil, false
	}
	return o.AllowedValues, true
}

// HasAllowedValues returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasAllowedValues() bool {
	if o != nil && !IsNil(o.AllowedValues) {
		return true
	}

	return false
}

// SetAllowedValues gets a reference to the given []string and assigns it to the AllowedValues field.
func (o *ListingFilterDefinition) SetAllowedValues(v []string) {
	o.AllowedValues = v
}

// GetDefaultFilterOperator returns the DefaultFilterOperator field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetDefaultFilterOperator() string {
	if o == nil || IsNil(o.DefaultFilterOperator) {
		var ret string
		return ret
	}
	return *o.DefaultFilterOperator
}

// GetDefaultFilterOperatorOk returns a tuple with the DefaultFilterOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetDefaultFilterOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultFilterOperator) {
		return nil, false
	}
	return o.DefaultFilterOperator, true
}

// HasDefaultFilterOperator returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasDefaultFilterOperator() bool {
	if o != nil && !IsNil(o.DefaultFilterOperator) {
		return true
	}

	return false
}

// SetDefaultFilterOperator gets a reference to the given string and assigns it to the DefaultFilterOperator field.
func (o *ListingFilterDefinition) SetDefaultFilterOperator(v string) {
	o.DefaultFilterOperator = &v
}

// GetDefaultParameters returns the DefaultParameters field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetDefaultParameters() []string {
	if o == nil || IsNil(o.DefaultParameters) {
		var ret []string
		return ret
	}
	return o.DefaultParameters
}

// GetDefaultParametersOk returns a tuple with the DefaultParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetDefaultParametersOk() ([]string, bool) {
	if o == nil || IsNil(o.DefaultParameters) {
		return nil, false
	}
	return o.DefaultParameters, true
}

// HasDefaultParameters returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasDefaultParameters() bool {
	if o != nil && !IsNil(o.DefaultParameters) {
		return true
	}

	return false
}

// SetDefaultParameters gets a reference to the given []string and assigns it to the DefaultParameters field.
func (o *ListingFilterDefinition) SetDefaultParameters(v []string) {
	o.DefaultParameters = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetDescription() MessagePrototype {
	if o == nil || IsNil(o.Description) {
		var ret MessagePrototype
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetDescriptionOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given MessagePrototype and assigns it to the Description field.
func (o *ListingFilterDefinition) SetDescription(v MessagePrototype) {
	o.Description = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *ListingFilterDefinition) SetFieldName(v string) {
	o.FieldName = &v
}

// GetFilterOperators returns the FilterOperators field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetFilterOperators() []string {
	if o == nil || IsNil(o.FilterOperators) {
		var ret []string
		return ret
	}
	return o.FilterOperators
}

// GetFilterOperatorsOk returns a tuple with the FilterOperators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetFilterOperatorsOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterOperators) {
		return nil, false
	}
	return o.FilterOperators, true
}

// HasFilterOperators returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasFilterOperators() bool {
	if o != nil && !IsNil(o.FilterOperators) {
		return true
	}

	return false
}

// SetFilterOperators gets a reference to the given []string and assigns it to the FilterOperators field.
func (o *ListingFilterDefinition) SetFilterOperators(v []string) {
	o.FilterOperators = v
}

// GetNextFilterDefinitions returns the NextFilterDefinitions field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetNextFilterDefinitions() []FilterDefinition {
	if o == nil || IsNil(o.NextFilterDefinitions) {
		var ret []FilterDefinition
		return ret
	}
	return o.NextFilterDefinitions
}

// GetNextFilterDefinitionsOk returns a tuple with the NextFilterDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetNextFilterDefinitionsOk() ([]FilterDefinition, bool) {
	if o == nil || IsNil(o.NextFilterDefinitions) {
		return nil, false
	}
	return o.NextFilterDefinitions, true
}

// HasNextFilterDefinitions returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasNextFilterDefinitions() bool {
	if o != nil && !IsNil(o.NextFilterDefinitions) {
		return true
	}

	return false
}

// SetNextFilterDefinitions gets a reference to the given []FilterDefinition and assigns it to the NextFilterDefinitions field.
func (o *ListingFilterDefinition) SetNextFilterDefinitions(v []FilterDefinition) {
	o.NextFilterDefinitions = v
}

// GetParameterType returns the ParameterType field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetParameterType() string {
	if o == nil || IsNil(o.ParameterType) {
		var ret string
		return ret
	}
	return *o.ParameterType
}

// GetParameterTypeOk returns a tuple with the ParameterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetParameterTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ParameterType) {
		return nil, false
	}
	return o.ParameterType, true
}

// HasParameterType returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasParameterType() bool {
	if o != nil && !IsNil(o.ParameterType) {
		return true
	}

	return false
}

// SetParameterType gets a reference to the given string and assigns it to the ParameterType field.
func (o *ListingFilterDefinition) SetParameterType(v string) {
	o.ParameterType = &v
}

// GetPredicateOperators returns the PredicateOperators field value if set, zero value otherwise.
func (o *ListingFilterDefinition) GetPredicateOperators() []string {
	if o == nil || IsNil(o.PredicateOperators) {
		var ret []string
		return ret
	}
	return o.PredicateOperators
}

// GetPredicateOperatorsOk returns a tuple with the PredicateOperators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingFilterDefinition) GetPredicateOperatorsOk() ([]string, bool) {
	if o == nil || IsNil(o.PredicateOperators) {
		return nil, false
	}
	return o.PredicateOperators, true
}

// HasPredicateOperators returns a boolean if a field has been set.
func (o *ListingFilterDefinition) HasPredicateOperators() bool {
	if o != nil && !IsNil(o.PredicateOperators) {
		return true
	}

	return false
}

// SetPredicateOperators gets a reference to the given []string and assigns it to the PredicateOperators field.
func (o *ListingFilterDefinition) SetPredicateOperators(v []string) {
	o.PredicateOperators = v
}

func (o ListingFilterDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingFilterDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedValues) {
		toSerialize["allowedValues"] = o.AllowedValues
	}
	if !IsNil(o.DefaultFilterOperator) {
		toSerialize["defaultFilterOperator"] = o.DefaultFilterOperator
	}
	if !IsNil(o.DefaultParameters) {
		toSerialize["defaultParameters"] = o.DefaultParameters
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.FilterOperators) {
		toSerialize["filterOperators"] = o.FilterOperators
	}
	if !IsNil(o.NextFilterDefinitions) {
		toSerialize["nextFilterDefinitions"] = o.NextFilterDefinitions
	}
	if !IsNil(o.ParameterType) {
		toSerialize["parameterType"] = o.ParameterType
	}
	if !IsNil(o.PredicateOperators) {
		toSerialize["predicateOperators"] = o.PredicateOperators
	}
	return toSerialize, nil
}

type NullableListingFilterDefinition struct {
	value *ListingFilterDefinition
	isSet bool
}

func (v NullableListingFilterDefinition) Get() *ListingFilterDefinition {
	return v.value
}

func (v *NullableListingFilterDefinition) Set(val *ListingFilterDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableListingFilterDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableListingFilterDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingFilterDefinition(val *ListingFilterDefinition) *NullableListingFilterDefinition {
	return &NullableListingFilterDefinition{value: val, isSet: true}
}

func (v NullableListingFilterDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingFilterDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


