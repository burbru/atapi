/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// HistoryControllerAPIService HistoryControllerAPI service
type HistoryControllerAPIService service

type ApiGetHistoryEntriesUsingGETRequest struct {
	ctx context.Context
	ApiService *HistoryControllerAPIService
	entityId *string
	historyType *string
	page *int32
	size *int32
	sort *[]string
}

// Entity ID
func (r ApiGetHistoryEntriesUsingGETRequest) EntityId(entityId string) ApiGetHistoryEntriesUsingGETRequest {
	r.entityId = &entityId
	return r
}

// History Entry Type
func (r ApiGetHistoryEntriesUsingGETRequest) HistoryType(historyType string) ApiGetHistoryEntriesUsingGETRequest {
	r.historyType = &historyType
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetHistoryEntriesUsingGETRequest) Page(page int32) ApiGetHistoryEntriesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetHistoryEntriesUsingGETRequest) Size(size int32) ApiGetHistoryEntriesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetHistoryEntriesUsingGETRequest) Sort(sort []string) ApiGetHistoryEntriesUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetHistoryEntriesUsingGETRequest) Execute() (*PageHistoryEntryView, *http.Response, error) {
	return r.ApiService.GetHistoryEntriesUsingGETExecute(r)
}

/*
GetHistoryEntriesUsingGET List entity's history entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetHistoryEntriesUsingGETRequest
*/
func (a *HistoryControllerAPIService) GetHistoryEntriesUsingGET(ctx context.Context) ApiGetHistoryEntriesUsingGETRequest {
	return ApiGetHistoryEntriesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageHistoryEntryView
func (a *HistoryControllerAPIService) GetHistoryEntriesUsingGETExecute(r ApiGetHistoryEntriesUsingGETRequest) (*PageHistoryEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageHistoryEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HistoryControllerAPIService.GetHistoryEntriesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/history"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entityId == nil {
		return localVarReturnValue, nil, reportError("entityId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "entityId", r.entityId, "")
	if r.historyType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "historyType", r.historyType, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
