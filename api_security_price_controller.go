/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// SecurityPriceControllerAPIService SecurityPriceControllerAPI service
type SecurityPriceControllerAPIService service

type ApiListPricesUsingGETRequest struct {
	ctx context.Context
	ApiService *SecurityPriceControllerAPIService
	securityIdentifier *string
	endDate *string
	startDate *string
}

// Security identifier
func (r ApiListPricesUsingGETRequest) SecurityIdentifier(securityIdentifier string) ApiListPricesUsingGETRequest {
	r.securityIdentifier = &securityIdentifier
	return r
}

// End date
func (r ApiListPricesUsingGETRequest) EndDate(endDate string) ApiListPricesUsingGETRequest {
	r.endDate = &endDate
	return r
}

// Start date
func (r ApiListPricesUsingGETRequest) StartDate(startDate string) ApiListPricesUsingGETRequest {
	r.startDate = &startDate
	return r
}

func (r ApiListPricesUsingGETRequest) Execute() (*SecurityPriceView, *http.Response, error) {
	return r.ApiService.ListPricesUsingGETExecute(r)
}

/*
ListPricesUsingGET Lists all prices for security identified by security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListPricesUsingGETRequest
*/
func (a *SecurityPriceControllerAPIService) ListPricesUsingGET(ctx context.Context) ApiListPricesUsingGETRequest {
	return ApiListPricesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityPriceView
func (a *SecurityPriceControllerAPIService) ListPricesUsingGETExecute(r ApiListPricesUsingGETRequest) (*SecurityPriceView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityPriceView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityPriceControllerAPIService.ListPricesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/securityPrices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityIdentifier == nil {
		return localVarReturnValue, nil, reportError("securityIdentifier is required and must be specified")
	}

	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "securityIdentifier", r.securityIdentifier, "")
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
