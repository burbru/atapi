/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the SalaryPaymentView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalaryPaymentView{}

// SalaryPaymentView struct for SalaryPaymentView
type SalaryPaymentView struct {
	CompanyId *string `json:"companyId,omitempty"`
	Date *int64 `json:"date,omitempty"`
	Id *string `json:"id,omitempty"`
	NextPossiblePaymentDate *int64 `json:"nextPossiblePaymentDate,omitempty"`
	SalaryAmount *float32 `json:"salaryAmount,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewSalaryPaymentView instantiates a new SalaryPaymentView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalaryPaymentView() *SalaryPaymentView {
	this := SalaryPaymentView{}
	return &this
}

// NewSalaryPaymentViewWithDefaults instantiates a new SalaryPaymentView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalaryPaymentViewWithDefaults() *SalaryPaymentView {
	this := SalaryPaymentView{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *SalaryPaymentView) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetDate() int64 {
	if o == nil || IsNil(o.Date) {
		var ret int64
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetDateOk() (*int64, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given int64 and assigns it to the Date field.
func (o *SalaryPaymentView) SetDate(v int64) {
	o.Date = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SalaryPaymentView) SetId(v string) {
	o.Id = &v
}

// GetNextPossiblePaymentDate returns the NextPossiblePaymentDate field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetNextPossiblePaymentDate() int64 {
	if o == nil || IsNil(o.NextPossiblePaymentDate) {
		var ret int64
		return ret
	}
	return *o.NextPossiblePaymentDate
}

// GetNextPossiblePaymentDateOk returns a tuple with the NextPossiblePaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetNextPossiblePaymentDateOk() (*int64, bool) {
	if o == nil || IsNil(o.NextPossiblePaymentDate) {
		return nil, false
	}
	return o.NextPossiblePaymentDate, true
}

// HasNextPossiblePaymentDate returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasNextPossiblePaymentDate() bool {
	if o != nil && !IsNil(o.NextPossiblePaymentDate) {
		return true
	}

	return false
}

// SetNextPossiblePaymentDate gets a reference to the given int64 and assigns it to the NextPossiblePaymentDate field.
func (o *SalaryPaymentView) SetNextPossiblePaymentDate(v int64) {
	o.NextPossiblePaymentDate = &v
}

// GetSalaryAmount returns the SalaryAmount field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetSalaryAmount() float32 {
	if o == nil || IsNil(o.SalaryAmount) {
		var ret float32
		return ret
	}
	return *o.SalaryAmount
}

// GetSalaryAmountOk returns a tuple with the SalaryAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetSalaryAmountOk() (*float32, bool) {
	if o == nil || IsNil(o.SalaryAmount) {
		return nil, false
	}
	return o.SalaryAmount, true
}

// HasSalaryAmount returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasSalaryAmount() bool {
	if o != nil && !IsNil(o.SalaryAmount) {
		return true
	}

	return false
}

// SetSalaryAmount gets a reference to the given float32 and assigns it to the SalaryAmount field.
func (o *SalaryPaymentView) SetSalaryAmount(v float32) {
	o.SalaryAmount = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SalaryPaymentView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SalaryPaymentView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SalaryPaymentView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *SalaryPaymentView) SetVersion(v int64) {
	o.Version = &v
}

func (o SalaryPaymentView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalaryPaymentView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyId) {
		toSerialize["companyId"] = o.CompanyId
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NextPossiblePaymentDate) {
		toSerialize["nextPossiblePaymentDate"] = o.NextPossiblePaymentDate
	}
	if !IsNil(o.SalaryAmount) {
		toSerialize["salaryAmount"] = o.SalaryAmount
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableSalaryPaymentView struct {
	value *SalaryPaymentView
	isSet bool
}

func (v NullableSalaryPaymentView) Get() *SalaryPaymentView {
	return v.value
}

func (v *NullableSalaryPaymentView) Set(val *SalaryPaymentView) {
	v.value = val
	v.isSet = true
}

func (v NullableSalaryPaymentView) IsSet() bool {
	return v.isSet
}

func (v *NullableSalaryPaymentView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalaryPaymentView(val *SalaryPaymentView) *NullableSalaryPaymentView {
	return &NullableSalaryPaymentView{value: val, isSet: true}
}

func (v NullableSalaryPaymentView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalaryPaymentView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


