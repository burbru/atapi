/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PortfolioView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PortfolioView{}

// PortfolioView struct for PortfolioView
type PortfolioView struct {
	Cash *float32 `json:"cash,omitempty"`
	CommittedCash *float32 `json:"committedCash,omitempty"`
	Positions []PortfolioPositionView `json:"positions,omitempty"`
	SecuritiesAccountId *string `json:"securitiesAccountId,omitempty"`
}

// NewPortfolioView instantiates a new PortfolioView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortfolioView() *PortfolioView {
	this := PortfolioView{}
	return &this
}

// NewPortfolioViewWithDefaults instantiates a new PortfolioView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortfolioViewWithDefaults() *PortfolioView {
	this := PortfolioView{}
	return &this
}

// GetCash returns the Cash field value if set, zero value otherwise.
func (o *PortfolioView) GetCash() float32 {
	if o == nil || IsNil(o.Cash) {
		var ret float32
		return ret
	}
	return *o.Cash
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioView) GetCashOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash) {
		return nil, false
	}
	return o.Cash, true
}

// HasCash returns a boolean if a field has been set.
func (o *PortfolioView) HasCash() bool {
	if o != nil && !IsNil(o.Cash) {
		return true
	}

	return false
}

// SetCash gets a reference to the given float32 and assigns it to the Cash field.
func (o *PortfolioView) SetCash(v float32) {
	o.Cash = &v
}

// GetCommittedCash returns the CommittedCash field value if set, zero value otherwise.
func (o *PortfolioView) GetCommittedCash() float32 {
	if o == nil || IsNil(o.CommittedCash) {
		var ret float32
		return ret
	}
	return *o.CommittedCash
}

// GetCommittedCashOk returns a tuple with the CommittedCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioView) GetCommittedCashOk() (*float32, bool) {
	if o == nil || IsNil(o.CommittedCash) {
		return nil, false
	}
	return o.CommittedCash, true
}

// HasCommittedCash returns a boolean if a field has been set.
func (o *PortfolioView) HasCommittedCash() bool {
	if o != nil && !IsNil(o.CommittedCash) {
		return true
	}

	return false
}

// SetCommittedCash gets a reference to the given float32 and assigns it to the CommittedCash field.
func (o *PortfolioView) SetCommittedCash(v float32) {
	o.CommittedCash = &v
}

// GetPositions returns the Positions field value if set, zero value otherwise.
func (o *PortfolioView) GetPositions() []PortfolioPositionView {
	if o == nil || IsNil(o.Positions) {
		var ret []PortfolioPositionView
		return ret
	}
	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioView) GetPositionsOk() ([]PortfolioPositionView, bool) {
	if o == nil || IsNil(o.Positions) {
		return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *PortfolioView) HasPositions() bool {
	if o != nil && !IsNil(o.Positions) {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []PortfolioPositionView and assigns it to the Positions field.
func (o *PortfolioView) SetPositions(v []PortfolioPositionView) {
	o.Positions = v
}

// GetSecuritiesAccountId returns the SecuritiesAccountId field value if set, zero value otherwise.
func (o *PortfolioView) GetSecuritiesAccountId() string {
	if o == nil || IsNil(o.SecuritiesAccountId) {
		var ret string
		return ret
	}
	return *o.SecuritiesAccountId
}

// GetSecuritiesAccountIdOk returns a tuple with the SecuritiesAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortfolioView) GetSecuritiesAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SecuritiesAccountId) {
		return nil, false
	}
	return o.SecuritiesAccountId, true
}

// HasSecuritiesAccountId returns a boolean if a field has been set.
func (o *PortfolioView) HasSecuritiesAccountId() bool {
	if o != nil && !IsNil(o.SecuritiesAccountId) {
		return true
	}

	return false
}

// SetSecuritiesAccountId gets a reference to the given string and assigns it to the SecuritiesAccountId field.
func (o *PortfolioView) SetSecuritiesAccountId(v string) {
	o.SecuritiesAccountId = &v
}

func (o PortfolioView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PortfolioView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cash) {
		toSerialize["cash"] = o.Cash
	}
	if !IsNil(o.CommittedCash) {
		toSerialize["committedCash"] = o.CommittedCash
	}
	if !IsNil(o.Positions) {
		toSerialize["positions"] = o.Positions
	}
	if !IsNil(o.SecuritiesAccountId) {
		toSerialize["securitiesAccountId"] = o.SecuritiesAccountId
	}
	return toSerialize, nil
}

type NullablePortfolioView struct {
	value *PortfolioView
	isSet bool
}

func (v NullablePortfolioView) Get() *PortfolioView {
	return v.value
}

func (v *NullablePortfolioView) Set(val *PortfolioView) {
	v.value = val
	v.isSet = true
}

func (v NullablePortfolioView) IsSet() bool {
	return v.isSet
}

func (v *NullablePortfolioView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortfolioView(val *PortfolioView) *NullablePortfolioView {
	return &NullablePortfolioView{value: val, isSet: true}
}

func (v NullablePortfolioView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortfolioView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


