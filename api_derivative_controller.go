/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DerivativeControllerAPIService DerivativeControllerAPI service
type DerivativeControllerAPIService service

type ApiCreateWarrantUsingPOSTRequest struct {
	ctx context.Context
	ApiService *DerivativeControllerAPIService
	cashDeposit *float32
	companyId *string
	type_ *string
	underlyingAsin *string
}

// Cash Deposit
func (r ApiCreateWarrantUsingPOSTRequest) CashDeposit(cashDeposit float32) ApiCreateWarrantUsingPOSTRequest {
	r.cashDeposit = &cashDeposit
	return r
}

// Company ID
func (r ApiCreateWarrantUsingPOSTRequest) CompanyId(companyId string) ApiCreateWarrantUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

// Warrant Type
func (r ApiCreateWarrantUsingPOSTRequest) Type_(type_ string) ApiCreateWarrantUsingPOSTRequest {
	r.type_ = &type_
	return r
}

// Underlying ASIN
func (r ApiCreateWarrantUsingPOSTRequest) UnderlyingAsin(underlyingAsin string) ApiCreateWarrantUsingPOSTRequest {
	r.underlyingAsin = &underlyingAsin
	return r
}

func (r ApiCreateWarrantUsingPOSTRequest) Execute() (*AllianceView, *http.Response, error) {
	return r.ApiService.CreateWarrantUsingPOSTExecute(r)
}

/*
CreateWarrantUsingPOST Creates warrant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWarrantUsingPOSTRequest
*/
func (a *DerivativeControllerAPIService) CreateWarrantUsingPOST(ctx context.Context) ApiCreateWarrantUsingPOSTRequest {
	return ApiCreateWarrantUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllianceView
func (a *DerivativeControllerAPIService) CreateWarrantUsingPOSTExecute(r ApiCreateWarrantUsingPOSTRequest) (*AllianceView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllianceView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DerivativeControllerAPIService.CreateWarrantUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/warrants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.cashDeposit == nil {
		return localVarReturnValue, nil, reportError("cashDeposit is required and must be specified")
	}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.underlyingAsin == nil {
		return localVarReturnValue, nil, reportError("underlyingAsin is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "cashDeposit", r.cashDeposit, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "underlyingAsin", r.underlyingAsin, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWarrantUsingGETRequest struct {
	ctx context.Context
	ApiService *DerivativeControllerAPIService
	warrantId string
}

func (r ApiGetWarrantUsingGETRequest) Execute() (*WarrantView, *http.Response, error) {
	return r.ApiService.GetWarrantUsingGETExecute(r)
}

/*
GetWarrantUsingGET Returns warrant

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param warrantId Warrant Id
 @return ApiGetWarrantUsingGETRequest
*/
func (a *DerivativeControllerAPIService) GetWarrantUsingGET(ctx context.Context, warrantId string) ApiGetWarrantUsingGETRequest {
	return ApiGetWarrantUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		warrantId: warrantId,
	}
}

// Execute executes the request
//  @return WarrantView
func (a *DerivativeControllerAPIService) GetWarrantUsingGETExecute(r ApiGetWarrantUsingGETRequest) (*WarrantView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WarrantView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DerivativeControllerAPIService.GetWarrantUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/warrants/{warrantId}"
	localVarPath = strings.Replace(localVarPath, "{"+"warrantId"+"}", url.PathEscape(parameterValueToString(r.warrantId, "warrantId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWarrantsUsingGETRequest struct {
	ctx context.Context
	ApiService *DerivativeControllerAPIService
	underlyingAsin *string
	page *int32
	size *int32
	sort *[]string
}

// Underlying ASIN
func (r ApiListWarrantsUsingGETRequest) UnderlyingAsin(underlyingAsin string) ApiListWarrantsUsingGETRequest {
	r.underlyingAsin = &underlyingAsin
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListWarrantsUsingGETRequest) Page(page int32) ApiListWarrantsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListWarrantsUsingGETRequest) Size(size int32) ApiListWarrantsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListWarrantsUsingGETRequest) Sort(sort []string) ApiListWarrantsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListWarrantsUsingGETRequest) Execute() (*PageWarrantView, *http.Response, error) {
	return r.ApiService.ListWarrantsUsingGETExecute(r)
}

/*
ListWarrantsUsingGET Lists all warrants for underlying

Sorted ascending by subscriptionPeriodDate as default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWarrantsUsingGETRequest
*/
func (a *DerivativeControllerAPIService) ListWarrantsUsingGET(ctx context.Context) ApiListWarrantsUsingGETRequest {
	return ApiListWarrantsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageWarrantView
func (a *DerivativeControllerAPIService) ListWarrantsUsingGETExecute(r ApiListWarrantsUsingGETRequest) (*PageWarrantView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageWarrantView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DerivativeControllerAPIService.ListWarrantsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/warrants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.underlyingAsin == nil {
		return localVarReturnValue, nil, reportError("underlyingAsin is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "underlyingAsin", r.underlyingAsin, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
