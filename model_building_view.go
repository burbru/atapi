/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the BuildingView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildingView{}

// BuildingView struct for BuildingView
type BuildingView struct {
	HtmlSource *string `json:"htmlSource,omitempty"`
	Listing *ListingView `json:"listing,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewBuildingView instantiates a new BuildingView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildingView() *BuildingView {
	this := BuildingView{}
	return &this
}

// NewBuildingViewWithDefaults instantiates a new BuildingView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildingViewWithDefaults() *BuildingView {
	this := BuildingView{}
	return &this
}

// GetHtmlSource returns the HtmlSource field value if set, zero value otherwise.
func (o *BuildingView) GetHtmlSource() string {
	if o == nil || IsNil(o.HtmlSource) {
		var ret string
		return ret
	}
	return *o.HtmlSource
}

// GetHtmlSourceOk returns a tuple with the HtmlSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingView) GetHtmlSourceOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlSource) {
		return nil, false
	}
	return o.HtmlSource, true
}

// HasHtmlSource returns a boolean if a field has been set.
func (o *BuildingView) HasHtmlSource() bool {
	if o != nil && !IsNil(o.HtmlSource) {
		return true
	}

	return false
}

// SetHtmlSource gets a reference to the given string and assigns it to the HtmlSource field.
func (o *BuildingView) SetHtmlSource(v string) {
	o.HtmlSource = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *BuildingView) GetListing() ListingView {
	if o == nil || IsNil(o.Listing) {
		var ret ListingView
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingView) GetListingOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *BuildingView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given ListingView and assigns it to the Listing field.
func (o *BuildingView) SetListing(v ListingView) {
	o.Listing = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *BuildingView) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingView) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *BuildingView) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *BuildingView) SetSize(v int64) {
	o.Size = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BuildingView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildingView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BuildingView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *BuildingView) SetType(v string) {
	o.Type = &v
}

func (o BuildingView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildingView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HtmlSource) {
		toSerialize["htmlSource"] = o.HtmlSource
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableBuildingView struct {
	value *BuildingView
	isSet bool
}

func (v NullableBuildingView) Get() *BuildingView {
	return v.value
}

func (v *NullableBuildingView) Set(val *BuildingView) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildingView) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildingView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildingView(val *BuildingView) *NullableBuildingView {
	return &NullableBuildingView{value: val, isSet: true}
}

func (v NullableBuildingView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildingView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


