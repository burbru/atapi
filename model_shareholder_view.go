/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the ShareholderView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShareholderView{}

// ShareholderView struct for ShareholderView
type ShareholderView struct {
	Company *CompactCompanyView `json:"company,omitempty"`
	NumberOfShares *int64 `json:"numberOfShares,omitempty"`
	OutstandingShares *int64 `json:"outstandingShares,omitempty"`
	SecurityIdentifier *string `json:"securityIdentifier,omitempty"`
	ShareInPercent *float32 `json:"shareInPercent,omitempty"`
	User *UsernameView `json:"user,omitempty"`
}

// NewShareholderView instantiates a new ShareholderView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShareholderView() *ShareholderView {
	this := ShareholderView{}
	return &this
}

// NewShareholderViewWithDefaults instantiates a new ShareholderView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareholderViewWithDefaults() *ShareholderView {
	this := ShareholderView{}
	return &this
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *ShareholderView) GetCompany() CompactCompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompactCompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetCompanyOk() (*CompactCompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *ShareholderView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompactCompanyView and assigns it to the Company field.
func (o *ShareholderView) SetCompany(v CompactCompanyView) {
	o.Company = &v
}

// GetNumberOfShares returns the NumberOfShares field value if set, zero value otherwise.
func (o *ShareholderView) GetNumberOfShares() int64 {
	if o == nil || IsNil(o.NumberOfShares) {
		var ret int64
		return ret
	}
	return *o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetNumberOfSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfShares) {
		return nil, false
	}
	return o.NumberOfShares, true
}

// HasNumberOfShares returns a boolean if a field has been set.
func (o *ShareholderView) HasNumberOfShares() bool {
	if o != nil && !IsNil(o.NumberOfShares) {
		return true
	}

	return false
}

// SetNumberOfShares gets a reference to the given int64 and assigns it to the NumberOfShares field.
func (o *ShareholderView) SetNumberOfShares(v int64) {
	o.NumberOfShares = &v
}

// GetOutstandingShares returns the OutstandingShares field value if set, zero value otherwise.
func (o *ShareholderView) GetOutstandingShares() int64 {
	if o == nil || IsNil(o.OutstandingShares) {
		var ret int64
		return ret
	}
	return *o.OutstandingShares
}

// GetOutstandingSharesOk returns a tuple with the OutstandingShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetOutstandingSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.OutstandingShares) {
		return nil, false
	}
	return o.OutstandingShares, true
}

// HasOutstandingShares returns a boolean if a field has been set.
func (o *ShareholderView) HasOutstandingShares() bool {
	if o != nil && !IsNil(o.OutstandingShares) {
		return true
	}

	return false
}

// SetOutstandingShares gets a reference to the given int64 and assigns it to the OutstandingShares field.
func (o *ShareholderView) SetOutstandingShares(v int64) {
	o.OutstandingShares = &v
}

// GetSecurityIdentifier returns the SecurityIdentifier field value if set, zero value otherwise.
func (o *ShareholderView) GetSecurityIdentifier() string {
	if o == nil || IsNil(o.SecurityIdentifier) {
		var ret string
		return ret
	}
	return *o.SecurityIdentifier
}

// GetSecurityIdentifierOk returns a tuple with the SecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetSecurityIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityIdentifier) {
		return nil, false
	}
	return o.SecurityIdentifier, true
}

// HasSecurityIdentifier returns a boolean if a field has been set.
func (o *ShareholderView) HasSecurityIdentifier() bool {
	if o != nil && !IsNil(o.SecurityIdentifier) {
		return true
	}

	return false
}

// SetSecurityIdentifier gets a reference to the given string and assigns it to the SecurityIdentifier field.
func (o *ShareholderView) SetSecurityIdentifier(v string) {
	o.SecurityIdentifier = &v
}

// GetShareInPercent returns the ShareInPercent field value if set, zero value otherwise.
func (o *ShareholderView) GetShareInPercent() float32 {
	if o == nil || IsNil(o.ShareInPercent) {
		var ret float32
		return ret
	}
	return *o.ShareInPercent
}

// GetShareInPercentOk returns a tuple with the ShareInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetShareInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.ShareInPercent) {
		return nil, false
	}
	return o.ShareInPercent, true
}

// HasShareInPercent returns a boolean if a field has been set.
func (o *ShareholderView) HasShareInPercent() bool {
	if o != nil && !IsNil(o.ShareInPercent) {
		return true
	}

	return false
}

// SetShareInPercent gets a reference to the given float32 and assigns it to the ShareInPercent field.
func (o *ShareholderView) SetShareInPercent(v float32) {
	o.ShareInPercent = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ShareholderView) GetUser() UsernameView {
	if o == nil || IsNil(o.User) {
		var ret UsernameView
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShareholderView) GetUserOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ShareholderView) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UsernameView and assigns it to the User field.
func (o *ShareholderView) SetUser(v UsernameView) {
	o.User = &v
}

func (o ShareholderView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShareholderView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.NumberOfShares) {
		toSerialize["numberOfShares"] = o.NumberOfShares
	}
	if !IsNil(o.OutstandingShares) {
		toSerialize["outstandingShares"] = o.OutstandingShares
	}
	if !IsNil(o.SecurityIdentifier) {
		toSerialize["securityIdentifier"] = o.SecurityIdentifier
	}
	if !IsNil(o.ShareInPercent) {
		toSerialize["shareInPercent"] = o.ShareInPercent
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableShareholderView struct {
	value *ShareholderView
	isSet bool
}

func (v NullableShareholderView) Get() *ShareholderView {
	return v.value
}

func (v *NullableShareholderView) Set(val *ShareholderView) {
	v.value = val
	v.isSet = true
}

func (v NullableShareholderView) IsSet() bool {
	return v.isSet
}

func (v *NullableShareholderView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareholderView(val *ShareholderView) *NullableShareholderView {
	return &NullableShareholderView{value: val, isSet: true}
}

func (v NullableShareholderView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareholderView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


