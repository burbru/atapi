/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the AbstractPollView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbstractPollView{}

// AbstractPollView struct for AbstractPollView
type AbstractPollView struct {
	AbstentionRule *string `json:"abstentionRule,omitempty"`
	CastVotesPercentage *float32 `json:"castVotesPercentage,omitempty"`
	EndDate *int64 `json:"endDate,omitempty"`
	Group []VoiceNumberView `json:"group,omitempty"`
	Id *string `json:"id,omitempty"`
	Motion *string `json:"motion,omitempty"`
	PollInitiator *UsernameView `json:"pollInitiator,omitempty"`
	ResultExpireDate *int64 `json:"resultExpireDate,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	TotalNumberOfCastVotes *int64 `json:"totalNumberOfCastVotes,omitempty"`
	TotalNumberOfVoices *int64 `json:"totalNumberOfVoices,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *int64 `json:"version,omitempty"`
	Votes []VoteView `json:"votes,omitempty"`
}

// NewAbstractPollView instantiates a new AbstractPollView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbstractPollView() *AbstractPollView {
	this := AbstractPollView{}
	return &this
}

// NewAbstractPollViewWithDefaults instantiates a new AbstractPollView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbstractPollViewWithDefaults() *AbstractPollView {
	this := AbstractPollView{}
	return &this
}

// GetAbstentionRule returns the AbstentionRule field value if set, zero value otherwise.
func (o *AbstractPollView) GetAbstentionRule() string {
	if o == nil || IsNil(o.AbstentionRule) {
		var ret string
		return ret
	}
	return *o.AbstentionRule
}

// GetAbstentionRuleOk returns a tuple with the AbstentionRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetAbstentionRuleOk() (*string, bool) {
	if o == nil || IsNil(o.AbstentionRule) {
		return nil, false
	}
	return o.AbstentionRule, true
}

// HasAbstentionRule returns a boolean if a field has been set.
func (o *AbstractPollView) HasAbstentionRule() bool {
	if o != nil && !IsNil(o.AbstentionRule) {
		return true
	}

	return false
}

// SetAbstentionRule gets a reference to the given string and assigns it to the AbstentionRule field.
func (o *AbstractPollView) SetAbstentionRule(v string) {
	o.AbstentionRule = &v
}

// GetCastVotesPercentage returns the CastVotesPercentage field value if set, zero value otherwise.
func (o *AbstractPollView) GetCastVotesPercentage() float32 {
	if o == nil || IsNil(o.CastVotesPercentage) {
		var ret float32
		return ret
	}
	return *o.CastVotesPercentage
}

// GetCastVotesPercentageOk returns a tuple with the CastVotesPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetCastVotesPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.CastVotesPercentage) {
		return nil, false
	}
	return o.CastVotesPercentage, true
}

// HasCastVotesPercentage returns a boolean if a field has been set.
func (o *AbstractPollView) HasCastVotesPercentage() bool {
	if o != nil && !IsNil(o.CastVotesPercentage) {
		return true
	}

	return false
}

// SetCastVotesPercentage gets a reference to the given float32 and assigns it to the CastVotesPercentage field.
func (o *AbstractPollView) SetCastVotesPercentage(v float32) {
	o.CastVotesPercentage = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AbstractPollView) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AbstractPollView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *AbstractPollView) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AbstractPollView) GetGroup() []VoiceNumberView {
	if o == nil || IsNil(o.Group) {
		var ret []VoiceNumberView
		return ret
	}
	return o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetGroupOk() ([]VoiceNumberView, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AbstractPollView) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given []VoiceNumberView and assigns it to the Group field.
func (o *AbstractPollView) SetGroup(v []VoiceNumberView) {
	o.Group = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AbstractPollView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AbstractPollView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AbstractPollView) SetId(v string) {
	o.Id = &v
}

// GetMotion returns the Motion field value if set, zero value otherwise.
func (o *AbstractPollView) GetMotion() string {
	if o == nil || IsNil(o.Motion) {
		var ret string
		return ret
	}
	return *o.Motion
}

// GetMotionOk returns a tuple with the Motion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetMotionOk() (*string, bool) {
	if o == nil || IsNil(o.Motion) {
		return nil, false
	}
	return o.Motion, true
}

// HasMotion returns a boolean if a field has been set.
func (o *AbstractPollView) HasMotion() bool {
	if o != nil && !IsNil(o.Motion) {
		return true
	}

	return false
}

// SetMotion gets a reference to the given string and assigns it to the Motion field.
func (o *AbstractPollView) SetMotion(v string) {
	o.Motion = &v
}

// GetPollInitiator returns the PollInitiator field value if set, zero value otherwise.
func (o *AbstractPollView) GetPollInitiator() UsernameView {
	if o == nil || IsNil(o.PollInitiator) {
		var ret UsernameView
		return ret
	}
	return *o.PollInitiator
}

// GetPollInitiatorOk returns a tuple with the PollInitiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetPollInitiatorOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.PollInitiator) {
		return nil, false
	}
	return o.PollInitiator, true
}

// HasPollInitiator returns a boolean if a field has been set.
func (o *AbstractPollView) HasPollInitiator() bool {
	if o != nil && !IsNil(o.PollInitiator) {
		return true
	}

	return false
}

// SetPollInitiator gets a reference to the given UsernameView and assigns it to the PollInitiator field.
func (o *AbstractPollView) SetPollInitiator(v UsernameView) {
	o.PollInitiator = &v
}

// GetResultExpireDate returns the ResultExpireDate field value if set, zero value otherwise.
func (o *AbstractPollView) GetResultExpireDate() int64 {
	if o == nil || IsNil(o.ResultExpireDate) {
		var ret int64
		return ret
	}
	return *o.ResultExpireDate
}

// GetResultExpireDateOk returns a tuple with the ResultExpireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetResultExpireDateOk() (*int64, bool) {
	if o == nil || IsNil(o.ResultExpireDate) {
		return nil, false
	}
	return o.ResultExpireDate, true
}

// HasResultExpireDate returns a boolean if a field has been set.
func (o *AbstractPollView) HasResultExpireDate() bool {
	if o != nil && !IsNil(o.ResultExpireDate) {
		return true
	}

	return false
}

// SetResultExpireDate gets a reference to the given int64 and assigns it to the ResultExpireDate field.
func (o *AbstractPollView) SetResultExpireDate(v int64) {
	o.ResultExpireDate = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *AbstractPollView) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *AbstractPollView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *AbstractPollView) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetTotalNumberOfCastVotes returns the TotalNumberOfCastVotes field value if set, zero value otherwise.
func (o *AbstractPollView) GetTotalNumberOfCastVotes() int64 {
	if o == nil || IsNil(o.TotalNumberOfCastVotes) {
		var ret int64
		return ret
	}
	return *o.TotalNumberOfCastVotes
}

// GetTotalNumberOfCastVotesOk returns a tuple with the TotalNumberOfCastVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetTotalNumberOfCastVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalNumberOfCastVotes) {
		return nil, false
	}
	return o.TotalNumberOfCastVotes, true
}

// HasTotalNumberOfCastVotes returns a boolean if a field has been set.
func (o *AbstractPollView) HasTotalNumberOfCastVotes() bool {
	if o != nil && !IsNil(o.TotalNumberOfCastVotes) {
		return true
	}

	return false
}

// SetTotalNumberOfCastVotes gets a reference to the given int64 and assigns it to the TotalNumberOfCastVotes field.
func (o *AbstractPollView) SetTotalNumberOfCastVotes(v int64) {
	o.TotalNumberOfCastVotes = &v
}

// GetTotalNumberOfVoices returns the TotalNumberOfVoices field value if set, zero value otherwise.
func (o *AbstractPollView) GetTotalNumberOfVoices() int64 {
	if o == nil || IsNil(o.TotalNumberOfVoices) {
		var ret int64
		return ret
	}
	return *o.TotalNumberOfVoices
}

// GetTotalNumberOfVoicesOk returns a tuple with the TotalNumberOfVoices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetTotalNumberOfVoicesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalNumberOfVoices) {
		return nil, false
	}
	return o.TotalNumberOfVoices, true
}

// HasTotalNumberOfVoices returns a boolean if a field has been set.
func (o *AbstractPollView) HasTotalNumberOfVoices() bool {
	if o != nil && !IsNil(o.TotalNumberOfVoices) {
		return true
	}

	return false
}

// SetTotalNumberOfVoices gets a reference to the given int64 and assigns it to the TotalNumberOfVoices field.
func (o *AbstractPollView) SetTotalNumberOfVoices(v int64) {
	o.TotalNumberOfVoices = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AbstractPollView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AbstractPollView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AbstractPollView) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AbstractPollView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AbstractPollView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AbstractPollView) SetVersion(v int64) {
	o.Version = &v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *AbstractPollView) GetVotes() []VoteView {
	if o == nil || IsNil(o.Votes) {
		var ret []VoteView
		return ret
	}
	return o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbstractPollView) GetVotesOk() ([]VoteView, bool) {
	if o == nil || IsNil(o.Votes) {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *AbstractPollView) HasVotes() bool {
	if o != nil && !IsNil(o.Votes) {
		return true
	}

	return false
}

// SetVotes gets a reference to the given []VoteView and assigns it to the Votes field.
func (o *AbstractPollView) SetVotes(v []VoteView) {
	o.Votes = v
}

func (o AbstractPollView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbstractPollView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbstentionRule) {
		toSerialize["abstentionRule"] = o.AbstentionRule
	}
	if !IsNil(o.CastVotesPercentage) {
		toSerialize["castVotesPercentage"] = o.CastVotesPercentage
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Motion) {
		toSerialize["motion"] = o.Motion
	}
	if !IsNil(o.PollInitiator) {
		toSerialize["pollInitiator"] = o.PollInitiator
	}
	if !IsNil(o.ResultExpireDate) {
		toSerialize["resultExpireDate"] = o.ResultExpireDate
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.TotalNumberOfCastVotes) {
		toSerialize["totalNumberOfCastVotes"] = o.TotalNumberOfCastVotes
	}
	if !IsNil(o.TotalNumberOfVoices) {
		toSerialize["totalNumberOfVoices"] = o.TotalNumberOfVoices
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Votes) {
		toSerialize["votes"] = o.Votes
	}
	return toSerialize, nil
}

type NullableAbstractPollView struct {
	value *AbstractPollView
	isSet bool
}

func (v NullableAbstractPollView) Get() *AbstractPollView {
	return v.value
}

func (v *NullableAbstractPollView) Set(val *AbstractPollView) {
	v.value = val
	v.isSet = true
}

func (v NullableAbstractPollView) IsSet() bool {
	return v.isSet
}

func (v *NullableAbstractPollView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbstractPollView(val *AbstractPollView) *NullableAbstractPollView {
	return &NullableAbstractPollView{value: val, isSet: true}
}

func (v NullableAbstractPollView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbstractPollView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


