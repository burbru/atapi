/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the UserAchievementView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAchievementView{}

// UserAchievementView struct for UserAchievementView
type UserAchievementView struct {
	AchievedDate *int64 `json:"achievedDate,omitempty"`
	Claimed *bool `json:"claimed,omitempty"`
	CoinReward *int64 `json:"coinReward,omitempty"`
	Description *string `json:"description,omitempty"`
	EndDate *int64 `json:"endDate,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewUserAchievementView instantiates a new UserAchievementView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAchievementView() *UserAchievementView {
	this := UserAchievementView{}
	return &this
}

// NewUserAchievementViewWithDefaults instantiates a new UserAchievementView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAchievementViewWithDefaults() *UserAchievementView {
	this := UserAchievementView{}
	return &this
}

// GetAchievedDate returns the AchievedDate field value if set, zero value otherwise.
func (o *UserAchievementView) GetAchievedDate() int64 {
	if o == nil || IsNil(o.AchievedDate) {
		var ret int64
		return ret
	}
	return *o.AchievedDate
}

// GetAchievedDateOk returns a tuple with the AchievedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetAchievedDateOk() (*int64, bool) {
	if o == nil || IsNil(o.AchievedDate) {
		return nil, false
	}
	return o.AchievedDate, true
}

// HasAchievedDate returns a boolean if a field has been set.
func (o *UserAchievementView) HasAchievedDate() bool {
	if o != nil && !IsNil(o.AchievedDate) {
		return true
	}

	return false
}

// SetAchievedDate gets a reference to the given int64 and assigns it to the AchievedDate field.
func (o *UserAchievementView) SetAchievedDate(v int64) {
	o.AchievedDate = &v
}

// GetClaimed returns the Claimed field value if set, zero value otherwise.
func (o *UserAchievementView) GetClaimed() bool {
	if o == nil || IsNil(o.Claimed) {
		var ret bool
		return ret
	}
	return *o.Claimed
}

// GetClaimedOk returns a tuple with the Claimed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetClaimedOk() (*bool, bool) {
	if o == nil || IsNil(o.Claimed) {
		return nil, false
	}
	return o.Claimed, true
}

// HasClaimed returns a boolean if a field has been set.
func (o *UserAchievementView) HasClaimed() bool {
	if o != nil && !IsNil(o.Claimed) {
		return true
	}

	return false
}

// SetClaimed gets a reference to the given bool and assigns it to the Claimed field.
func (o *UserAchievementView) SetClaimed(v bool) {
	o.Claimed = &v
}

// GetCoinReward returns the CoinReward field value if set, zero value otherwise.
func (o *UserAchievementView) GetCoinReward() int64 {
	if o == nil || IsNil(o.CoinReward) {
		var ret int64
		return ret
	}
	return *o.CoinReward
}

// GetCoinRewardOk returns a tuple with the CoinReward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetCoinRewardOk() (*int64, bool) {
	if o == nil || IsNil(o.CoinReward) {
		return nil, false
	}
	return o.CoinReward, true
}

// HasCoinReward returns a boolean if a field has been set.
func (o *UserAchievementView) HasCoinReward() bool {
	if o != nil && !IsNil(o.CoinReward) {
		return true
	}

	return false
}

// SetCoinReward gets a reference to the given int64 and assigns it to the CoinReward field.
func (o *UserAchievementView) SetCoinReward(v int64) {
	o.CoinReward = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserAchievementView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserAchievementView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserAchievementView) SetDescription(v string) {
	o.Description = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *UserAchievementView) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *UserAchievementView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *UserAchievementView) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserAchievementView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserAchievementView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserAchievementView) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAchievementView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAchievementView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAchievementView) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UserAchievementView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAchievementView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UserAchievementView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *UserAchievementView) SetVersion(v int64) {
	o.Version = &v
}

func (o UserAchievementView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAchievementView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AchievedDate) {
		toSerialize["achievedDate"] = o.AchievedDate
	}
	if !IsNil(o.Claimed) {
		toSerialize["claimed"] = o.Claimed
	}
	if !IsNil(o.CoinReward) {
		toSerialize["coinReward"] = o.CoinReward
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableUserAchievementView struct {
	value *UserAchievementView
	isSet bool
}

func (v NullableUserAchievementView) Get() *UserAchievementView {
	return v.value
}

func (v *NullableUserAchievementView) Set(val *UserAchievementView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAchievementView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAchievementView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAchievementView(val *UserAchievementView) *NullableUserAchievementView {
	return &NullableUserAchievementView{value: val, isSet: true}
}

func (v NullableUserAchievementView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAchievementView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


