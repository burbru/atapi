/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the AllianceWithDetailsView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllianceWithDetailsView{}

// AllianceWithDetailsView struct for AllianceWithDetailsView
type AllianceWithDetailsView struct {
	AchievementCount *int64 `json:"achievementCount,omitempty"`
	AchievementTotal *int64 `json:"achievementTotal,omitempty"`
	ChatId *string `json:"chatId,omitempty"`
	DateCreated *int64 `json:"dateCreated,omitempty"`
	Description *string `json:"description,omitempty"`
	Id *string `json:"id,omitempty"`
	Index *ListingView `json:"index,omitempty"`
	Locale *string `json:"locale,omitempty"`
	LogoUrl *string `json:"logoUrl,omitempty"`
	MessageBoard *string `json:"messageBoard,omitempty"`
	Name *string `json:"name,omitempty"`
	NumberOfMembers *int64 `json:"numberOfMembers,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewAllianceWithDetailsView instantiates a new AllianceWithDetailsView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllianceWithDetailsView() *AllianceWithDetailsView {
	this := AllianceWithDetailsView{}
	return &this
}

// NewAllianceWithDetailsViewWithDefaults instantiates a new AllianceWithDetailsView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllianceWithDetailsViewWithDefaults() *AllianceWithDetailsView {
	this := AllianceWithDetailsView{}
	return &this
}

// GetAchievementCount returns the AchievementCount field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetAchievementCount() int64 {
	if o == nil || IsNil(o.AchievementCount) {
		var ret int64
		return ret
	}
	return *o.AchievementCount
}

// GetAchievementCountOk returns a tuple with the AchievementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetAchievementCountOk() (*int64, bool) {
	if o == nil || IsNil(o.AchievementCount) {
		return nil, false
	}
	return o.AchievementCount, true
}

// HasAchievementCount returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasAchievementCount() bool {
	if o != nil && !IsNil(o.AchievementCount) {
		return true
	}

	return false
}

// SetAchievementCount gets a reference to the given int64 and assigns it to the AchievementCount field.
func (o *AllianceWithDetailsView) SetAchievementCount(v int64) {
	o.AchievementCount = &v
}

// GetAchievementTotal returns the AchievementTotal field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetAchievementTotal() int64 {
	if o == nil || IsNil(o.AchievementTotal) {
		var ret int64
		return ret
	}
	return *o.AchievementTotal
}

// GetAchievementTotalOk returns a tuple with the AchievementTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetAchievementTotalOk() (*int64, bool) {
	if o == nil || IsNil(o.AchievementTotal) {
		return nil, false
	}
	return o.AchievementTotal, true
}

// HasAchievementTotal returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasAchievementTotal() bool {
	if o != nil && !IsNil(o.AchievementTotal) {
		return true
	}

	return false
}

// SetAchievementTotal gets a reference to the given int64 and assigns it to the AchievementTotal field.
func (o *AllianceWithDetailsView) SetAchievementTotal(v int64) {
	o.AchievementTotal = &v
}

// GetChatId returns the ChatId field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetChatId() string {
	if o == nil || IsNil(o.ChatId) {
		var ret string
		return ret
	}
	return *o.ChatId
}

// GetChatIdOk returns a tuple with the ChatId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetChatIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChatId) {
		return nil, false
	}
	return o.ChatId, true
}

// HasChatId returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasChatId() bool {
	if o != nil && !IsNil(o.ChatId) {
		return true
	}

	return false
}

// SetChatId gets a reference to the given string and assigns it to the ChatId field.
func (o *AllianceWithDetailsView) SetChatId(v string) {
	o.ChatId = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetDateCreated() int64 {
	if o == nil || IsNil(o.DateCreated) {
		var ret int64
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetDateCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given int64 and assigns it to the DateCreated field.
func (o *AllianceWithDetailsView) SetDateCreated(v int64) {
	o.DateCreated = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AllianceWithDetailsView) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AllianceWithDetailsView) SetId(v string) {
	o.Id = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetIndex() ListingView {
	if o == nil || IsNil(o.Index) {
		var ret ListingView
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetIndexOk() (*ListingView, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given ListingView and assigns it to the Index field.
func (o *AllianceWithDetailsView) SetIndex(v ListingView) {
	o.Index = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *AllianceWithDetailsView) SetLocale(v string) {
	o.Locale = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *AllianceWithDetailsView) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetMessageBoard returns the MessageBoard field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetMessageBoard() string {
	if o == nil || IsNil(o.MessageBoard) {
		var ret string
		return ret
	}
	return *o.MessageBoard
}

// GetMessageBoardOk returns a tuple with the MessageBoard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetMessageBoardOk() (*string, bool) {
	if o == nil || IsNil(o.MessageBoard) {
		return nil, false
	}
	return o.MessageBoard, true
}

// HasMessageBoard returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasMessageBoard() bool {
	if o != nil && !IsNil(o.MessageBoard) {
		return true
	}

	return false
}

// SetMessageBoard gets a reference to the given string and assigns it to the MessageBoard field.
func (o *AllianceWithDetailsView) SetMessageBoard(v string) {
	o.MessageBoard = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AllianceWithDetailsView) SetName(v string) {
	o.Name = &v
}

// GetNumberOfMembers returns the NumberOfMembers field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetNumberOfMembers() int64 {
	if o == nil || IsNil(o.NumberOfMembers) {
		var ret int64
		return ret
	}
	return *o.NumberOfMembers
}

// GetNumberOfMembersOk returns a tuple with the NumberOfMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetNumberOfMembersOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfMembers) {
		return nil, false
	}
	return o.NumberOfMembers, true
}

// HasNumberOfMembers returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasNumberOfMembers() bool {
	if o != nil && !IsNil(o.NumberOfMembers) {
		return true
	}

	return false
}

// SetNumberOfMembers gets a reference to the given int64 and assigns it to the NumberOfMembers field.
func (o *AllianceWithDetailsView) SetNumberOfMembers(v int64) {
	o.NumberOfMembers = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AllianceWithDetailsView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllianceWithDetailsView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AllianceWithDetailsView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AllianceWithDetailsView) SetVersion(v int64) {
	o.Version = &v
}

func (o AllianceWithDetailsView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllianceWithDetailsView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AchievementCount) {
		toSerialize["achievementCount"] = o.AchievementCount
	}
	if !IsNil(o.AchievementTotal) {
		toSerialize["achievementTotal"] = o.AchievementTotal
	}
	if !IsNil(o.ChatId) {
		toSerialize["chatId"] = o.ChatId
	}
	if !IsNil(o.DateCreated) {
		toSerialize["dateCreated"] = o.DateCreated
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if !IsNil(o.MessageBoard) {
		toSerialize["messageBoard"] = o.MessageBoard
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NumberOfMembers) {
		toSerialize["numberOfMembers"] = o.NumberOfMembers
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableAllianceWithDetailsView struct {
	value *AllianceWithDetailsView
	isSet bool
}

func (v NullableAllianceWithDetailsView) Get() *AllianceWithDetailsView {
	return v.value
}

func (v *NullableAllianceWithDetailsView) Set(val *AllianceWithDetailsView) {
	v.value = val
	v.isSet = true
}

func (v NullableAllianceWithDetailsView) IsSet() bool {
	return v.isSet
}

func (v *NullableAllianceWithDetailsView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllianceWithDetailsView(val *AllianceWithDetailsView) *NullableAllianceWithDetailsView {
	return &NullableAllianceWithDetailsView{value: val, isSet: true}
}

func (v NullableAllianceWithDetailsView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllianceWithDetailsView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


