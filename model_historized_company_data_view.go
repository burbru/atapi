/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
	"time"
)

// checks if the HistorizedCompanyDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistorizedCompanyDataView{}

// HistorizedCompanyDataView struct for HistorizedCompanyDataView
type HistorizedCompanyDataView struct {
	BondsVolume *float32 `json:"bondsVolume,omitempty"`
	BookValue *float32 `json:"bookValue,omitempty"`
	BookValuePerShare *float32 `json:"bookValuePerShare,omitempty"`
	Cash *float32 `json:"cash,omitempty"`
	CashFlow *float32 `json:"cashFlow,omitempty"`
	CentralBankReserves *float32 `json:"centralBankReserves,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	FairValuePerShare *float32 `json:"fairValuePerShare,omitempty"`
	FreeFloatInPercent *float32 `json:"freeFloatInPercent,omitempty"`
	Id *string `json:"id,omitempty"`
	NetCash *float32 `json:"netCash,omitempty"`
	NetCashPerShare *float32 `json:"netCashPerShare,omitempty"`
	ReposVolume *float32 `json:"reposVolume,omitempty"`
	SystemReposVolume *float32 `json:"systemReposVolume,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewHistorizedCompanyDataView instantiates a new HistorizedCompanyDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistorizedCompanyDataView() *HistorizedCompanyDataView {
	this := HistorizedCompanyDataView{}
	return &this
}

// NewHistorizedCompanyDataViewWithDefaults instantiates a new HistorizedCompanyDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistorizedCompanyDataViewWithDefaults() *HistorizedCompanyDataView {
	this := HistorizedCompanyDataView{}
	return &this
}

// GetBondsVolume returns the BondsVolume field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetBondsVolume() float32 {
	if o == nil || IsNil(o.BondsVolume) {
		var ret float32
		return ret
	}
	return *o.BondsVolume
}

// GetBondsVolumeOk returns a tuple with the BondsVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetBondsVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.BondsVolume) {
		return nil, false
	}
	return o.BondsVolume, true
}

// HasBondsVolume returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasBondsVolume() bool {
	if o != nil && !IsNil(o.BondsVolume) {
		return true
	}

	return false
}

// SetBondsVolume gets a reference to the given float32 and assigns it to the BondsVolume field.
func (o *HistorizedCompanyDataView) SetBondsVolume(v float32) {
	o.BondsVolume = &v
}

// GetBookValue returns the BookValue field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetBookValue() float32 {
	if o == nil || IsNil(o.BookValue) {
		var ret float32
		return ret
	}
	return *o.BookValue
}

// GetBookValueOk returns a tuple with the BookValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetBookValueOk() (*float32, bool) {
	if o == nil || IsNil(o.BookValue) {
		return nil, false
	}
	return o.BookValue, true
}

// HasBookValue returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasBookValue() bool {
	if o != nil && !IsNil(o.BookValue) {
		return true
	}

	return false
}

// SetBookValue gets a reference to the given float32 and assigns it to the BookValue field.
func (o *HistorizedCompanyDataView) SetBookValue(v float32) {
	o.BookValue = &v
}

// GetBookValuePerShare returns the BookValuePerShare field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetBookValuePerShare() float32 {
	if o == nil || IsNil(o.BookValuePerShare) {
		var ret float32
		return ret
	}
	return *o.BookValuePerShare
}

// GetBookValuePerShareOk returns a tuple with the BookValuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetBookValuePerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.BookValuePerShare) {
		return nil, false
	}
	return o.BookValuePerShare, true
}

// HasBookValuePerShare returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasBookValuePerShare() bool {
	if o != nil && !IsNil(o.BookValuePerShare) {
		return true
	}

	return false
}

// SetBookValuePerShare gets a reference to the given float32 and assigns it to the BookValuePerShare field.
func (o *HistorizedCompanyDataView) SetBookValuePerShare(v float32) {
	o.BookValuePerShare = &v
}

// GetCash returns the Cash field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetCash() float32 {
	if o == nil || IsNil(o.Cash) {
		var ret float32
		return ret
	}
	return *o.Cash
}

// GetCashOk returns a tuple with the Cash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetCashOk() (*float32, bool) {
	if o == nil || IsNil(o.Cash) {
		return nil, false
	}
	return o.Cash, true
}

// HasCash returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasCash() bool {
	if o != nil && !IsNil(o.Cash) {
		return true
	}

	return false
}

// SetCash gets a reference to the given float32 and assigns it to the Cash field.
func (o *HistorizedCompanyDataView) SetCash(v float32) {
	o.Cash = &v
}

// GetCashFlow returns the CashFlow field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetCashFlow() float32 {
	if o == nil || IsNil(o.CashFlow) {
		var ret float32
		return ret
	}
	return *o.CashFlow
}

// GetCashFlowOk returns a tuple with the CashFlow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetCashFlowOk() (*float32, bool) {
	if o == nil || IsNil(o.CashFlow) {
		return nil, false
	}
	return o.CashFlow, true
}

// HasCashFlow returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasCashFlow() bool {
	if o != nil && !IsNil(o.CashFlow) {
		return true
	}

	return false
}

// SetCashFlow gets a reference to the given float32 and assigns it to the CashFlow field.
func (o *HistorizedCompanyDataView) SetCashFlow(v float32) {
	o.CashFlow = &v
}

// GetCentralBankReserves returns the CentralBankReserves field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetCentralBankReserves() float32 {
	if o == nil || IsNil(o.CentralBankReserves) {
		var ret float32
		return ret
	}
	return *o.CentralBankReserves
}

// GetCentralBankReservesOk returns a tuple with the CentralBankReserves field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetCentralBankReservesOk() (*float32, bool) {
	if o == nil || IsNil(o.CentralBankReserves) {
		return nil, false
	}
	return o.CentralBankReserves, true
}

// HasCentralBankReserves returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasCentralBankReserves() bool {
	if o != nil && !IsNil(o.CentralBankReserves) {
		return true
	}

	return false
}

// SetCentralBankReserves gets a reference to the given float32 and assigns it to the CentralBankReserves field.
func (o *HistorizedCompanyDataView) SetCentralBankReserves(v float32) {
	o.CentralBankReserves = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *HistorizedCompanyDataView) SetDate(v time.Time) {
	o.Date = &v
}

// GetFairValuePerShare returns the FairValuePerShare field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetFairValuePerShare() float32 {
	if o == nil || IsNil(o.FairValuePerShare) {
		var ret float32
		return ret
	}
	return *o.FairValuePerShare
}

// GetFairValuePerShareOk returns a tuple with the FairValuePerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetFairValuePerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.FairValuePerShare) {
		return nil, false
	}
	return o.FairValuePerShare, true
}

// HasFairValuePerShare returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasFairValuePerShare() bool {
	if o != nil && !IsNil(o.FairValuePerShare) {
		return true
	}

	return false
}

// SetFairValuePerShare gets a reference to the given float32 and assigns it to the FairValuePerShare field.
func (o *HistorizedCompanyDataView) SetFairValuePerShare(v float32) {
	o.FairValuePerShare = &v
}

// GetFreeFloatInPercent returns the FreeFloatInPercent field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetFreeFloatInPercent() float32 {
	if o == nil || IsNil(o.FreeFloatInPercent) {
		var ret float32
		return ret
	}
	return *o.FreeFloatInPercent
}

// GetFreeFloatInPercentOk returns a tuple with the FreeFloatInPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetFreeFloatInPercentOk() (*float32, bool) {
	if o == nil || IsNil(o.FreeFloatInPercent) {
		return nil, false
	}
	return o.FreeFloatInPercent, true
}

// HasFreeFloatInPercent returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasFreeFloatInPercent() bool {
	if o != nil && !IsNil(o.FreeFloatInPercent) {
		return true
	}

	return false
}

// SetFreeFloatInPercent gets a reference to the given float32 and assigns it to the FreeFloatInPercent field.
func (o *HistorizedCompanyDataView) SetFreeFloatInPercent(v float32) {
	o.FreeFloatInPercent = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HistorizedCompanyDataView) SetId(v string) {
	o.Id = &v
}

// GetNetCash returns the NetCash field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetNetCash() float32 {
	if o == nil || IsNil(o.NetCash) {
		var ret float32
		return ret
	}
	return *o.NetCash
}

// GetNetCashOk returns a tuple with the NetCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetNetCashOk() (*float32, bool) {
	if o == nil || IsNil(o.NetCash) {
		return nil, false
	}
	return o.NetCash, true
}

// HasNetCash returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasNetCash() bool {
	if o != nil && !IsNil(o.NetCash) {
		return true
	}

	return false
}

// SetNetCash gets a reference to the given float32 and assigns it to the NetCash field.
func (o *HistorizedCompanyDataView) SetNetCash(v float32) {
	o.NetCash = &v
}

// GetNetCashPerShare returns the NetCashPerShare field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetNetCashPerShare() float32 {
	if o == nil || IsNil(o.NetCashPerShare) {
		var ret float32
		return ret
	}
	return *o.NetCashPerShare
}

// GetNetCashPerShareOk returns a tuple with the NetCashPerShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetNetCashPerShareOk() (*float32, bool) {
	if o == nil || IsNil(o.NetCashPerShare) {
		return nil, false
	}
	return o.NetCashPerShare, true
}

// HasNetCashPerShare returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasNetCashPerShare() bool {
	if o != nil && !IsNil(o.NetCashPerShare) {
		return true
	}

	return false
}

// SetNetCashPerShare gets a reference to the given float32 and assigns it to the NetCashPerShare field.
func (o *HistorizedCompanyDataView) SetNetCashPerShare(v float32) {
	o.NetCashPerShare = &v
}

// GetReposVolume returns the ReposVolume field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetReposVolume() float32 {
	if o == nil || IsNil(o.ReposVolume) {
		var ret float32
		return ret
	}
	return *o.ReposVolume
}

// GetReposVolumeOk returns a tuple with the ReposVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetReposVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.ReposVolume) {
		return nil, false
	}
	return o.ReposVolume, true
}

// HasReposVolume returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasReposVolume() bool {
	if o != nil && !IsNil(o.ReposVolume) {
		return true
	}

	return false
}

// SetReposVolume gets a reference to the given float32 and assigns it to the ReposVolume field.
func (o *HistorizedCompanyDataView) SetReposVolume(v float32) {
	o.ReposVolume = &v
}

// GetSystemReposVolume returns the SystemReposVolume field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetSystemReposVolume() float32 {
	if o == nil || IsNil(o.SystemReposVolume) {
		var ret float32
		return ret
	}
	return *o.SystemReposVolume
}

// GetSystemReposVolumeOk returns a tuple with the SystemReposVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetSystemReposVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.SystemReposVolume) {
		return nil, false
	}
	return o.SystemReposVolume, true
}

// HasSystemReposVolume returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasSystemReposVolume() bool {
	if o != nil && !IsNil(o.SystemReposVolume) {
		return true
	}

	return false
}

// SetSystemReposVolume gets a reference to the given float32 and assigns it to the SystemReposVolume field.
func (o *HistorizedCompanyDataView) SetSystemReposVolume(v float32) {
	o.SystemReposVolume = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HistorizedCompanyDataView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedCompanyDataView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HistorizedCompanyDataView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *HistorizedCompanyDataView) SetVersion(v int64) {
	o.Version = &v
}

func (o HistorizedCompanyDataView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistorizedCompanyDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BondsVolume) {
		toSerialize["bondsVolume"] = o.BondsVolume
	}
	if !IsNil(o.BookValue) {
		toSerialize["bookValue"] = o.BookValue
	}
	if !IsNil(o.BookValuePerShare) {
		toSerialize["bookValuePerShare"] = o.BookValuePerShare
	}
	if !IsNil(o.Cash) {
		toSerialize["cash"] = o.Cash
	}
	if !IsNil(o.CashFlow) {
		toSerialize["cashFlow"] = o.CashFlow
	}
	if !IsNil(o.CentralBankReserves) {
		toSerialize["centralBankReserves"] = o.CentralBankReserves
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.FairValuePerShare) {
		toSerialize["fairValuePerShare"] = o.FairValuePerShare
	}
	if !IsNil(o.FreeFloatInPercent) {
		toSerialize["freeFloatInPercent"] = o.FreeFloatInPercent
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NetCash) {
		toSerialize["netCash"] = o.NetCash
	}
	if !IsNil(o.NetCashPerShare) {
		toSerialize["netCashPerShare"] = o.NetCashPerShare
	}
	if !IsNil(o.ReposVolume) {
		toSerialize["reposVolume"] = o.ReposVolume
	}
	if !IsNil(o.SystemReposVolume) {
		toSerialize["systemReposVolume"] = o.SystemReposVolume
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableHistorizedCompanyDataView struct {
	value *HistorizedCompanyDataView
	isSet bool
}

func (v NullableHistorizedCompanyDataView) Get() *HistorizedCompanyDataView {
	return v.value
}

func (v *NullableHistorizedCompanyDataView) Set(val *HistorizedCompanyDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableHistorizedCompanyDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableHistorizedCompanyDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistorizedCompanyDataView(val *HistorizedCompanyDataView) *NullableHistorizedCompanyDataView {
	return &NullableHistorizedCompanyDataView{value: val, isSet: true}
}

func (v NullableHistorizedCompanyDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistorizedCompanyDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


