/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the AsinWithLogoUrlView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsinWithLogoUrlView{}

// AsinWithLogoUrlView struct for AsinWithLogoUrlView
type AsinWithLogoUrlView struct {
	Asin *string `json:"asin,omitempty"`
	LogoUrl *string `json:"logoUrl,omitempty"`
}

// NewAsinWithLogoUrlView instantiates a new AsinWithLogoUrlView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsinWithLogoUrlView() *AsinWithLogoUrlView {
	this := AsinWithLogoUrlView{}
	return &this
}

// NewAsinWithLogoUrlViewWithDefaults instantiates a new AsinWithLogoUrlView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsinWithLogoUrlViewWithDefaults() *AsinWithLogoUrlView {
	this := AsinWithLogoUrlView{}
	return &this
}

// GetAsin returns the Asin field value if set, zero value otherwise.
func (o *AsinWithLogoUrlView) GetAsin() string {
	if o == nil || IsNil(o.Asin) {
		var ret string
		return ret
	}
	return *o.Asin
}

// GetAsinOk returns a tuple with the Asin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsinWithLogoUrlView) GetAsinOk() (*string, bool) {
	if o == nil || IsNil(o.Asin) {
		return nil, false
	}
	return o.Asin, true
}

// HasAsin returns a boolean if a field has been set.
func (o *AsinWithLogoUrlView) HasAsin() bool {
	if o != nil && !IsNil(o.Asin) {
		return true
	}

	return false
}

// SetAsin gets a reference to the given string and assigns it to the Asin field.
func (o *AsinWithLogoUrlView) SetAsin(v string) {
	o.Asin = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *AsinWithLogoUrlView) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsinWithLogoUrlView) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *AsinWithLogoUrlView) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *AsinWithLogoUrlView) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

func (o AsinWithLogoUrlView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsinWithLogoUrlView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asin) {
		toSerialize["asin"] = o.Asin
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	return toSerialize, nil
}

type NullableAsinWithLogoUrlView struct {
	value *AsinWithLogoUrlView
	isSet bool
}

func (v NullableAsinWithLogoUrlView) Get() *AsinWithLogoUrlView {
	return v.value
}

func (v *NullableAsinWithLogoUrlView) Set(val *AsinWithLogoUrlView) {
	v.value = val
	v.isSet = true
}

func (v NullableAsinWithLogoUrlView) IsSet() bool {
	return v.isSet
}

func (v *NullableAsinWithLogoUrlView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsinWithLogoUrlView(val *AsinWithLogoUrlView) *NullableAsinWithLogoUrlView {
	return &NullableAsinWithLogoUrlView{value: val, isSet: true}
}

func (v NullableAsinWithLogoUrlView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsinWithLogoUrlView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


