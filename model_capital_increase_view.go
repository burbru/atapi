/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the CapitalIncreaseView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapitalIncreaseView{}

// CapitalIncreaseView struct for CapitalIncreaseView
type CapitalIncreaseView struct {
	CashVolume *float32 `json:"cashVolume,omitempty"`
	Company *CompactCompanyView `json:"company,omitempty"`
	EndDate *int64 `json:"endDate,omitempty"`
	Id *string `json:"id,omitempty"`
	NumberOfShares *int64 `json:"numberOfShares,omitempty"`
	Price *float32 `json:"price,omitempty"`
	StartDate *int64 `json:"startDate,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewCapitalIncreaseView instantiates a new CapitalIncreaseView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapitalIncreaseView() *CapitalIncreaseView {
	this := CapitalIncreaseView{}
	return &this
}

// NewCapitalIncreaseViewWithDefaults instantiates a new CapitalIncreaseView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapitalIncreaseViewWithDefaults() *CapitalIncreaseView {
	this := CapitalIncreaseView{}
	return &this
}

// GetCashVolume returns the CashVolume field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetCashVolume() float32 {
	if o == nil || IsNil(o.CashVolume) {
		var ret float32
		return ret
	}
	return *o.CashVolume
}

// GetCashVolumeOk returns a tuple with the CashVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetCashVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.CashVolume) {
		return nil, false
	}
	return o.CashVolume, true
}

// HasCashVolume returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasCashVolume() bool {
	if o != nil && !IsNil(o.CashVolume) {
		return true
	}

	return false
}

// SetCashVolume gets a reference to the given float32 and assigns it to the CashVolume field.
func (o *CapitalIncreaseView) SetCashVolume(v float32) {
	o.CashVolume = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetCompany() CompactCompanyView {
	if o == nil || IsNil(o.Company) {
		var ret CompactCompanyView
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetCompanyOk() (*CompactCompanyView, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given CompactCompanyView and assigns it to the Company field.
func (o *CapitalIncreaseView) SetCompany(v CompactCompanyView) {
	o.Company = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetEndDate() int64 {
	if o == nil || IsNil(o.EndDate) {
		var ret int64
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetEndDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given int64 and assigns it to the EndDate field.
func (o *CapitalIncreaseView) SetEndDate(v int64) {
	o.EndDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CapitalIncreaseView) SetId(v string) {
	o.Id = &v
}

// GetNumberOfShares returns the NumberOfShares field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetNumberOfShares() int64 {
	if o == nil || IsNil(o.NumberOfShares) {
		var ret int64
		return ret
	}
	return *o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetNumberOfSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfShares) {
		return nil, false
	}
	return o.NumberOfShares, true
}

// HasNumberOfShares returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasNumberOfShares() bool {
	if o != nil && !IsNil(o.NumberOfShares) {
		return true
	}

	return false
}

// SetNumberOfShares gets a reference to the given int64 and assigns it to the NumberOfShares field.
func (o *CapitalIncreaseView) SetNumberOfShares(v int64) {
	o.NumberOfShares = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *CapitalIncreaseView) SetPrice(v float32) {
	o.Price = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetStartDate() int64 {
	if o == nil || IsNil(o.StartDate) {
		var ret int64
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetStartDateOk() (*int64, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given int64 and assigns it to the StartDate field.
func (o *CapitalIncreaseView) SetStartDate(v int64) {
	o.StartDate = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CapitalIncreaseView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapitalIncreaseView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CapitalIncreaseView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CapitalIncreaseView) SetType(v string) {
	o.Type = &v
}

func (o CapitalIncreaseView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapitalIncreaseView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CashVolume) {
		toSerialize["cashVolume"] = o.CashVolume
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.NumberOfShares) {
		toSerialize["numberOfShares"] = o.NumberOfShares
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCapitalIncreaseView struct {
	value *CapitalIncreaseView
	isSet bool
}

func (v NullableCapitalIncreaseView) Get() *CapitalIncreaseView {
	return v.value
}

func (v *NullableCapitalIncreaseView) Set(val *CapitalIncreaseView) {
	v.value = val
	v.isSet = true
}

func (v NullableCapitalIncreaseView) IsSet() bool {
	return v.isSet
}

func (v *NullableCapitalIncreaseView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapitalIncreaseView(val *CapitalIncreaseView) *NullableCapitalIncreaseView {
	return &NullableCapitalIncreaseView{value: val, isSet: true}
}

func (v NullableCapitalIncreaseView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapitalIncreaseView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


