/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
	"time"
)

// checks if the HistorizedListingDataView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HistorizedListingDataView{}

// HistorizedListingDataView struct for HistorizedListingDataView
type HistorizedListingDataView struct {
	AskPrice *float32 `json:"askPrice,omitempty"`
	BidPrice *float32 `json:"bidPrice,omitempty"`
	ClosePrice *float32 `json:"closePrice,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	HighPrice *float32 `json:"highPrice,omitempty"`
	Id *string `json:"id,omitempty"`
	LowPrice *float32 `json:"lowPrice,omitempty"`
	OpenPrice *float32 `json:"openPrice,omitempty"`
	OutstandingShares *int64 `json:"outstandingShares,omitempty"`
	SharesInBuys *int64 `json:"sharesInBuys,omitempty"`
	SharesInSells *int64 `json:"sharesInSells,omitempty"`
	TradeVolume *float32 `json:"tradeVolume,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewHistorizedListingDataView instantiates a new HistorizedListingDataView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistorizedListingDataView() *HistorizedListingDataView {
	this := HistorizedListingDataView{}
	return &this
}

// NewHistorizedListingDataViewWithDefaults instantiates a new HistorizedListingDataView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistorizedListingDataViewWithDefaults() *HistorizedListingDataView {
	this := HistorizedListingDataView{}
	return &this
}

// GetAskPrice returns the AskPrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetAskPrice() float32 {
	if o == nil || IsNil(o.AskPrice) {
		var ret float32
		return ret
	}
	return *o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetAskPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.AskPrice) {
		return nil, false
	}
	return o.AskPrice, true
}

// HasAskPrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasAskPrice() bool {
	if o != nil && !IsNil(o.AskPrice) {
		return true
	}

	return false
}

// SetAskPrice gets a reference to the given float32 and assigns it to the AskPrice field.
func (o *HistorizedListingDataView) SetAskPrice(v float32) {
	o.AskPrice = &v
}

// GetBidPrice returns the BidPrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetBidPrice() float32 {
	if o == nil || IsNil(o.BidPrice) {
		var ret float32
		return ret
	}
	return *o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetBidPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.BidPrice) {
		return nil, false
	}
	return o.BidPrice, true
}

// HasBidPrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasBidPrice() bool {
	if o != nil && !IsNil(o.BidPrice) {
		return true
	}

	return false
}

// SetBidPrice gets a reference to the given float32 and assigns it to the BidPrice field.
func (o *HistorizedListingDataView) SetBidPrice(v float32) {
	o.BidPrice = &v
}

// GetClosePrice returns the ClosePrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetClosePrice() float32 {
	if o == nil || IsNil(o.ClosePrice) {
		var ret float32
		return ret
	}
	return *o.ClosePrice
}

// GetClosePriceOk returns a tuple with the ClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetClosePriceOk() (*float32, bool) {
	if o == nil || IsNil(o.ClosePrice) {
		return nil, false
	}
	return o.ClosePrice, true
}

// HasClosePrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasClosePrice() bool {
	if o != nil && !IsNil(o.ClosePrice) {
		return true
	}

	return false
}

// SetClosePrice gets a reference to the given float32 and assigns it to the ClosePrice field.
func (o *HistorizedListingDataView) SetClosePrice(v float32) {
	o.ClosePrice = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetDate() time.Time {
	if o == nil || IsNil(o.Date) {
		var ret time.Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given time.Time and assigns it to the Date field.
func (o *HistorizedListingDataView) SetDate(v time.Time) {
	o.Date = &v
}

// GetHighPrice returns the HighPrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetHighPrice() float32 {
	if o == nil || IsNil(o.HighPrice) {
		var ret float32
		return ret
	}
	return *o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetHighPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.HighPrice) {
		return nil, false
	}
	return o.HighPrice, true
}

// HasHighPrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasHighPrice() bool {
	if o != nil && !IsNil(o.HighPrice) {
		return true
	}

	return false
}

// SetHighPrice gets a reference to the given float32 and assigns it to the HighPrice field.
func (o *HistorizedListingDataView) SetHighPrice(v float32) {
	o.HighPrice = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HistorizedListingDataView) SetId(v string) {
	o.Id = &v
}

// GetLowPrice returns the LowPrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetLowPrice() float32 {
	if o == nil || IsNil(o.LowPrice) {
		var ret float32
		return ret
	}
	return *o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetLowPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.LowPrice) {
		return nil, false
	}
	return o.LowPrice, true
}

// HasLowPrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasLowPrice() bool {
	if o != nil && !IsNil(o.LowPrice) {
		return true
	}

	return false
}

// SetLowPrice gets a reference to the given float32 and assigns it to the LowPrice field.
func (o *HistorizedListingDataView) SetLowPrice(v float32) {
	o.LowPrice = &v
}

// GetOpenPrice returns the OpenPrice field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetOpenPrice() float32 {
	if o == nil || IsNil(o.OpenPrice) {
		var ret float32
		return ret
	}
	return *o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetOpenPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.OpenPrice) {
		return nil, false
	}
	return o.OpenPrice, true
}

// HasOpenPrice returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasOpenPrice() bool {
	if o != nil && !IsNil(o.OpenPrice) {
		return true
	}

	return false
}

// SetOpenPrice gets a reference to the given float32 and assigns it to the OpenPrice field.
func (o *HistorizedListingDataView) SetOpenPrice(v float32) {
	o.OpenPrice = &v
}

// GetOutstandingShares returns the OutstandingShares field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetOutstandingShares() int64 {
	if o == nil || IsNil(o.OutstandingShares) {
		var ret int64
		return ret
	}
	return *o.OutstandingShares
}

// GetOutstandingSharesOk returns a tuple with the OutstandingShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetOutstandingSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.OutstandingShares) {
		return nil, false
	}
	return o.OutstandingShares, true
}

// HasOutstandingShares returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasOutstandingShares() bool {
	if o != nil && !IsNil(o.OutstandingShares) {
		return true
	}

	return false
}

// SetOutstandingShares gets a reference to the given int64 and assigns it to the OutstandingShares field.
func (o *HistorizedListingDataView) SetOutstandingShares(v int64) {
	o.OutstandingShares = &v
}

// GetSharesInBuys returns the SharesInBuys field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetSharesInBuys() int64 {
	if o == nil || IsNil(o.SharesInBuys) {
		var ret int64
		return ret
	}
	return *o.SharesInBuys
}

// GetSharesInBuysOk returns a tuple with the SharesInBuys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetSharesInBuysOk() (*int64, bool) {
	if o == nil || IsNil(o.SharesInBuys) {
		return nil, false
	}
	return o.SharesInBuys, true
}

// HasSharesInBuys returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasSharesInBuys() bool {
	if o != nil && !IsNil(o.SharesInBuys) {
		return true
	}

	return false
}

// SetSharesInBuys gets a reference to the given int64 and assigns it to the SharesInBuys field.
func (o *HistorizedListingDataView) SetSharesInBuys(v int64) {
	o.SharesInBuys = &v
}

// GetSharesInSells returns the SharesInSells field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetSharesInSells() int64 {
	if o == nil || IsNil(o.SharesInSells) {
		var ret int64
		return ret
	}
	return *o.SharesInSells
}

// GetSharesInSellsOk returns a tuple with the SharesInSells field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetSharesInSellsOk() (*int64, bool) {
	if o == nil || IsNil(o.SharesInSells) {
		return nil, false
	}
	return o.SharesInSells, true
}

// HasSharesInSells returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasSharesInSells() bool {
	if o != nil && !IsNil(o.SharesInSells) {
		return true
	}

	return false
}

// SetSharesInSells gets a reference to the given int64 and assigns it to the SharesInSells field.
func (o *HistorizedListingDataView) SetSharesInSells(v int64) {
	o.SharesInSells = &v
}

// GetTradeVolume returns the TradeVolume field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetTradeVolume() float32 {
	if o == nil || IsNil(o.TradeVolume) {
		var ret float32
		return ret
	}
	return *o.TradeVolume
}

// GetTradeVolumeOk returns a tuple with the TradeVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetTradeVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.TradeVolume) {
		return nil, false
	}
	return o.TradeVolume, true
}

// HasTradeVolume returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasTradeVolume() bool {
	if o != nil && !IsNil(o.TradeVolume) {
		return true
	}

	return false
}

// SetTradeVolume gets a reference to the given float32 and assigns it to the TradeVolume field.
func (o *HistorizedListingDataView) SetTradeVolume(v float32) {
	o.TradeVolume = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *HistorizedListingDataView) GetVersion() int64 {
	if o == nil || IsNil(o.Version) {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistorizedListingDataView) GetVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *HistorizedListingDataView) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *HistorizedListingDataView) SetVersion(v int64) {
	o.Version = &v
}

func (o HistorizedListingDataView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HistorizedListingDataView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AskPrice) {
		toSerialize["askPrice"] = o.AskPrice
	}
	if !IsNil(o.BidPrice) {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if !IsNil(o.ClosePrice) {
		toSerialize["closePrice"] = o.ClosePrice
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.HighPrice) {
		toSerialize["highPrice"] = o.HighPrice
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LowPrice) {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if !IsNil(o.OpenPrice) {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if !IsNil(o.OutstandingShares) {
		toSerialize["outstandingShares"] = o.OutstandingShares
	}
	if !IsNil(o.SharesInBuys) {
		toSerialize["sharesInBuys"] = o.SharesInBuys
	}
	if !IsNil(o.SharesInSells) {
		toSerialize["sharesInSells"] = o.SharesInSells
	}
	if !IsNil(o.TradeVolume) {
		toSerialize["tradeVolume"] = o.TradeVolume
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableHistorizedListingDataView struct {
	value *HistorizedListingDataView
	isSet bool
}

func (v NullableHistorizedListingDataView) Get() *HistorizedListingDataView {
	return v.value
}

func (v *NullableHistorizedListingDataView) Set(val *HistorizedListingDataView) {
	v.value = val
	v.isSet = true
}

func (v NullableHistorizedListingDataView) IsSet() bool {
	return v.isSet
}

func (v *NullableHistorizedListingDataView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistorizedListingDataView(val *HistorizedListingDataView) *NullableHistorizedListingDataView {
	return &NullableHistorizedListingDataView{value: val, isSet: true}
}

func (v NullableHistorizedListingDataView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistorizedListingDataView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


