/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the Suggestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Suggestion{}

// Suggestion struct for Suggestion
type Suggestion struct {
	ActionData map[string]interface{} `json:"actionData,omitempty"`
	Text *MessagePrototype `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewSuggestion instantiates a new Suggestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggestion() *Suggestion {
	this := Suggestion{}
	return &this
}

// NewSuggestionWithDefaults instantiates a new Suggestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestionWithDefaults() *Suggestion {
	this := Suggestion{}
	return &this
}

// GetActionData returns the ActionData field value if set, zero value otherwise.
func (o *Suggestion) GetActionData() map[string]interface{} {
	if o == nil || IsNil(o.ActionData) {
		var ret map[string]interface{}
		return ret
	}
	return o.ActionData
}

// GetActionDataOk returns a tuple with the ActionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetActionDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ActionData) {
		return map[string]interface{}{}, false
	}
	return o.ActionData, true
}

// HasActionData returns a boolean if a field has been set.
func (o *Suggestion) HasActionData() bool {
	if o != nil && !IsNil(o.ActionData) {
		return true
	}

	return false
}

// SetActionData gets a reference to the given map[string]interface{} and assigns it to the ActionData field.
func (o *Suggestion) SetActionData(v map[string]interface{}) {
	o.ActionData = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *Suggestion) GetText() MessagePrototype {
	if o == nil || IsNil(o.Text) {
		var ret MessagePrototype
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetTextOk() (*MessagePrototype, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *Suggestion) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given MessagePrototype and assigns it to the Text field.
func (o *Suggestion) SetText(v MessagePrototype) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Suggestion) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Suggestion) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Suggestion) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *Suggestion) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Suggestion) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *Suggestion) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *Suggestion) SetUnit(v string) {
	o.Unit = &v
}

func (o Suggestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Suggestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionData) {
		toSerialize["actionData"] = o.ActionData
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableSuggestion struct {
	value *Suggestion
	isSet bool
}

func (v NullableSuggestion) Get() *Suggestion {
	return v.value
}

func (v *NullableSuggestion) Set(val *Suggestion) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestion) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestion(val *Suggestion) *NullableSuggestion {
	return &NullableSuggestion{value: val, isSet: true}
}

func (v NullableSuggestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


