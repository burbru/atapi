/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the PremiumOrderEventView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PremiumOrderEventView{}

// PremiumOrderEventView struct for PremiumOrderEventView
type PremiumOrderEventView struct {
	EventCreated *int64 `json:"eventCreated,omitempty"`
	EventReceived *int64 `json:"eventReceived,omitempty"`
	Live *bool `json:"live,omitempty"`
	ProcessedByFastSpring *bool `json:"processedByFastSpring,omitempty"`
	ProcessedByVendor *bool `json:"processedByVendor,omitempty"`
	ProcessingState *string `json:"processingState,omitempty"`
	Reference *string `json:"reference,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewPremiumOrderEventView instantiates a new PremiumOrderEventView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPremiumOrderEventView() *PremiumOrderEventView {
	this := PremiumOrderEventView{}
	return &this
}

// NewPremiumOrderEventViewWithDefaults instantiates a new PremiumOrderEventView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPremiumOrderEventViewWithDefaults() *PremiumOrderEventView {
	this := PremiumOrderEventView{}
	return &this
}

// GetEventCreated returns the EventCreated field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetEventCreated() int64 {
	if o == nil || IsNil(o.EventCreated) {
		var ret int64
		return ret
	}
	return *o.EventCreated
}

// GetEventCreatedOk returns a tuple with the EventCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetEventCreatedOk() (*int64, bool) {
	if o == nil || IsNil(o.EventCreated) {
		return nil, false
	}
	return o.EventCreated, true
}

// HasEventCreated returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasEventCreated() bool {
	if o != nil && !IsNil(o.EventCreated) {
		return true
	}

	return false
}

// SetEventCreated gets a reference to the given int64 and assigns it to the EventCreated field.
func (o *PremiumOrderEventView) SetEventCreated(v int64) {
	o.EventCreated = &v
}

// GetEventReceived returns the EventReceived field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetEventReceived() int64 {
	if o == nil || IsNil(o.EventReceived) {
		var ret int64
		return ret
	}
	return *o.EventReceived
}

// GetEventReceivedOk returns a tuple with the EventReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetEventReceivedOk() (*int64, bool) {
	if o == nil || IsNil(o.EventReceived) {
		return nil, false
	}
	return o.EventReceived, true
}

// HasEventReceived returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasEventReceived() bool {
	if o != nil && !IsNil(o.EventReceived) {
		return true
	}

	return false
}

// SetEventReceived gets a reference to the given int64 and assigns it to the EventReceived field.
func (o *PremiumOrderEventView) SetEventReceived(v int64) {
	o.EventReceived = &v
}

// GetLive returns the Live field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetLive() bool {
	if o == nil || IsNil(o.Live) {
		var ret bool
		return ret
	}
	return *o.Live
}

// GetLiveOk returns a tuple with the Live field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetLiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Live) {
		return nil, false
	}
	return o.Live, true
}

// HasLive returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasLive() bool {
	if o != nil && !IsNil(o.Live) {
		return true
	}

	return false
}

// SetLive gets a reference to the given bool and assigns it to the Live field.
func (o *PremiumOrderEventView) SetLive(v bool) {
	o.Live = &v
}

// GetProcessedByFastSpring returns the ProcessedByFastSpring field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetProcessedByFastSpring() bool {
	if o == nil || IsNil(o.ProcessedByFastSpring) {
		var ret bool
		return ret
	}
	return *o.ProcessedByFastSpring
}

// GetProcessedByFastSpringOk returns a tuple with the ProcessedByFastSpring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetProcessedByFastSpringOk() (*bool, bool) {
	if o == nil || IsNil(o.ProcessedByFastSpring) {
		return nil, false
	}
	return o.ProcessedByFastSpring, true
}

// HasProcessedByFastSpring returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasProcessedByFastSpring() bool {
	if o != nil && !IsNil(o.ProcessedByFastSpring) {
		return true
	}

	return false
}

// SetProcessedByFastSpring gets a reference to the given bool and assigns it to the ProcessedByFastSpring field.
func (o *PremiumOrderEventView) SetProcessedByFastSpring(v bool) {
	o.ProcessedByFastSpring = &v
}

// GetProcessedByVendor returns the ProcessedByVendor field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetProcessedByVendor() bool {
	if o == nil || IsNil(o.ProcessedByVendor) {
		var ret bool
		return ret
	}
	return *o.ProcessedByVendor
}

// GetProcessedByVendorOk returns a tuple with the ProcessedByVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetProcessedByVendorOk() (*bool, bool) {
	if o == nil || IsNil(o.ProcessedByVendor) {
		return nil, false
	}
	return o.ProcessedByVendor, true
}

// HasProcessedByVendor returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasProcessedByVendor() bool {
	if o != nil && !IsNil(o.ProcessedByVendor) {
		return true
	}

	return false
}

// SetProcessedByVendor gets a reference to the given bool and assigns it to the ProcessedByVendor field.
func (o *PremiumOrderEventView) SetProcessedByVendor(v bool) {
	o.ProcessedByVendor = &v
}

// GetProcessingState returns the ProcessingState field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetProcessingState() string {
	if o == nil || IsNil(o.ProcessingState) {
		var ret string
		return ret
	}
	return *o.ProcessingState
}

// GetProcessingStateOk returns a tuple with the ProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetProcessingStateOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessingState) {
		return nil, false
	}
	return o.ProcessingState, true
}

// HasProcessingState returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasProcessingState() bool {
	if o != nil && !IsNil(o.ProcessingState) {
		return true
	}

	return false
}

// SetProcessingState gets a reference to the given string and assigns it to the ProcessingState field.
func (o *PremiumOrderEventView) SetProcessingState(v string) {
	o.ProcessingState = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PremiumOrderEventView) SetReference(v string) {
	o.Reference = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PremiumOrderEventView) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PremiumOrderEventView) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PremiumOrderEventView) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PremiumOrderEventView) SetType(v string) {
	o.Type = &v
}

func (o PremiumOrderEventView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PremiumOrderEventView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventCreated) {
		toSerialize["eventCreated"] = o.EventCreated
	}
	if !IsNil(o.EventReceived) {
		toSerialize["eventReceived"] = o.EventReceived
	}
	if !IsNil(o.Live) {
		toSerialize["live"] = o.Live
	}
	if !IsNil(o.ProcessedByFastSpring) {
		toSerialize["processedByFastSpring"] = o.ProcessedByFastSpring
	}
	if !IsNil(o.ProcessedByVendor) {
		toSerialize["processedByVendor"] = o.ProcessedByVendor
	}
	if !IsNil(o.ProcessingState) {
		toSerialize["processingState"] = o.ProcessingState
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePremiumOrderEventView struct {
	value *PremiumOrderEventView
	isSet bool
}

func (v NullablePremiumOrderEventView) Get() *PremiumOrderEventView {
	return v.value
}

func (v *NullablePremiumOrderEventView) Set(val *PremiumOrderEventView) {
	v.value = val
	v.isSet = true
}

func (v NullablePremiumOrderEventView) IsSet() bool {
	return v.isSet
}

func (v *NullablePremiumOrderEventView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremiumOrderEventView(val *PremiumOrderEventView) *NullablePremiumOrderEventView {
	return &NullablePremiumOrderEventView{value: val, isSet: true}
}

func (v NullablePremiumOrderEventView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremiumOrderEventView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


