/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// CashTransferLogControllerAPIService CashTransferLogControllerAPI service
type CashTransferLogControllerAPIService service

type ApiListLogsUsingGETRequest struct {
	ctx context.Context
	ApiService *CashTransferLogControllerAPIService
	bankAccountId string
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListLogsUsingGETRequest) Page(page int32) ApiListLogsUsingGETRequest {
	r.page = &page
	return r
}

// Fulltext search (be aware of non-localized subject and content and be aware of MessagePrototype&#39;s structure with substitutions; useful for security identifiers)
func (r ApiListLogsUsingGETRequest) Search(search string) ApiListLogsUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListLogsUsingGETRequest) Size(size int32) ApiListLogsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListLogsUsingGETRequest) Sort(sort []string) ApiListLogsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListLogsUsingGETRequest) Execute() (*CashTransferLogEntryView, *http.Response, error) {
	return r.ApiService.ListLogsUsingGETExecute(r)
}

/*
ListLogsUsingGET Lists cash transfer logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bankAccountId Bank account id
 @return ApiListLogsUsingGETRequest
*/
func (a *CashTransferLogControllerAPIService) ListLogsUsingGET(ctx context.Context, bankAccountId string) ApiListLogsUsingGETRequest {
	return ApiListLogsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		bankAccountId: bankAccountId,
	}
}

// Execute executes the request
//  @return CashTransferLogEntryView
func (a *CashTransferLogControllerAPIService) ListLogsUsingGETExecute(r ApiListLogsUsingGETRequest) (*CashTransferLogEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CashTransferLogEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashTransferLogControllerAPIService.ListLogsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/cashtransferlogs/{bankAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bankAccountId"+"}", url.PathEscape(parameterValueToString(r.bankAccountId, "bankAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLogsV1UsingGETRequest struct {
	ctx context.Context
	ApiService *CashTransferLogControllerAPIService
	endDate *string
	receiverBankAccountId *string
	senderBankAccountId *string
	startDate *string
}

// End date
func (r ApiListLogsV1UsingGETRequest) EndDate(endDate string) ApiListLogsV1UsingGETRequest {
	r.endDate = &endDate
	return r
}

// Receiver&#39;s bank account id
func (r ApiListLogsV1UsingGETRequest) ReceiverBankAccountId(receiverBankAccountId string) ApiListLogsV1UsingGETRequest {
	r.receiverBankAccountId = &receiverBankAccountId
	return r
}

// Sender&#39;s bank account id
func (r ApiListLogsV1UsingGETRequest) SenderBankAccountId(senderBankAccountId string) ApiListLogsV1UsingGETRequest {
	r.senderBankAccountId = &senderBankAccountId
	return r
}

// Start date
func (r ApiListLogsV1UsingGETRequest) StartDate(startDate string) ApiListLogsV1UsingGETRequest {
	r.startDate = &startDate
	return r
}

func (r ApiListLogsV1UsingGETRequest) Execute() (*CashTransferLogEntryView, *http.Response, error) {
	return r.ApiService.ListLogsV1UsingGETExecute(r)
}

/*
ListLogsV1UsingGET Lists cash transfer logs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLogsV1UsingGETRequest

Deprecated
*/
func (a *CashTransferLogControllerAPIService) ListLogsV1UsingGET(ctx context.Context) ApiListLogsV1UsingGETRequest {
	return ApiListLogsV1UsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CashTransferLogEntryView
// Deprecated
func (a *CashTransferLogControllerAPIService) ListLogsV1UsingGETExecute(r ApiListLogsV1UsingGETRequest) (*CashTransferLogEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CashTransferLogEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CashTransferLogControllerAPIService.ListLogsV1UsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/cashtransferlogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.receiverBankAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "receiverBankAccountId", r.receiverBankAccountId, "")
	}
	if r.senderBankAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "senderBankAccountId", r.senderBankAccountId, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
