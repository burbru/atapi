/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the Filter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Filter{}

// Filter struct for Filter
type Filter struct {
	NextFilters []Filter `json:"nextFilters,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Predicate *FilterPredicate `json:"predicate,omitempty"`
}

// NewFilter instantiates a new Filter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilter() *Filter {
	this := Filter{}
	return &this
}

// NewFilterWithDefaults instantiates a new Filter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterWithDefaults() *Filter {
	this := Filter{}
	return &this
}

// GetNextFilters returns the NextFilters field value if set, zero value otherwise.
func (o *Filter) GetNextFilters() []Filter {
	if o == nil || IsNil(o.NextFilters) {
		var ret []Filter
		return ret
	}
	return o.NextFilters
}

// GetNextFiltersOk returns a tuple with the NextFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetNextFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.NextFilters) {
		return nil, false
	}
	return o.NextFilters, true
}

// HasNextFilters returns a boolean if a field has been set.
func (o *Filter) HasNextFilters() bool {
	if o != nil && !IsNil(o.NextFilters) {
		return true
	}

	return false
}

// SetNextFilters gets a reference to the given []Filter and assigns it to the NextFilters field.
func (o *Filter) SetNextFilters(v []Filter) {
	o.NextFilters = v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *Filter) GetOperator() string {
	if o == nil || IsNil(o.Operator) {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.Operator) {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *Filter) HasOperator() bool {
	if o != nil && !IsNil(o.Operator) {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *Filter) SetOperator(v string) {
	o.Operator = &v
}

// GetPredicate returns the Predicate field value if set, zero value otherwise.
func (o *Filter) GetPredicate() FilterPredicate {
	if o == nil || IsNil(o.Predicate) {
		var ret FilterPredicate
		return ret
	}
	return *o.Predicate
}

// GetPredicateOk returns a tuple with the Predicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Filter) GetPredicateOk() (*FilterPredicate, bool) {
	if o == nil || IsNil(o.Predicate) {
		return nil, false
	}
	return o.Predicate, true
}

// HasPredicate returns a boolean if a field has been set.
func (o *Filter) HasPredicate() bool {
	if o != nil && !IsNil(o.Predicate) {
		return true
	}

	return false
}

// SetPredicate gets a reference to the given FilterPredicate and assigns it to the Predicate field.
func (o *Filter) SetPredicate(v FilterPredicate) {
	o.Predicate = &v
}

func (o Filter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Filter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextFilters) {
		toSerialize["nextFilters"] = o.NextFilters
	}
	if !IsNil(o.Operator) {
		toSerialize["operator"] = o.Operator
	}
	if !IsNil(o.Predicate) {
		toSerialize["predicate"] = o.Predicate
	}
	return toSerialize, nil
}

type NullableFilter struct {
	value *Filter
	isSet bool
}

func (v NullableFilter) Get() *Filter {
	return v.value
}

func (v *NullableFilter) Set(val *Filter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilter(val *Filter) *NullableFilter {
	return &NullableFilter{value: val, isSet: true}
}

func (v NullableFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


