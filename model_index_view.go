/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the IndexView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexView{}

// IndexView struct for IndexView
type IndexView struct {
	BaseValue *float32 `json:"baseValue,omitempty"`
	ChainingFactor *float32 `json:"chainingFactor,omitempty"`
	Listing *Listing `json:"listing,omitempty"`
	Members []IndexMemberValuesView `json:"members,omitempty"`
	Name *string `json:"name,omitempty"`
	NextChainingDate *int64 `json:"nextChainingDate,omitempty"`
	Owner *UsernameView `json:"owner,omitempty"`
}

// NewIndexView instantiates a new IndexView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexView() *IndexView {
	this := IndexView{}
	return &this
}

// NewIndexViewWithDefaults instantiates a new IndexView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexViewWithDefaults() *IndexView {
	this := IndexView{}
	return &this
}

// GetBaseValue returns the BaseValue field value if set, zero value otherwise.
func (o *IndexView) GetBaseValue() float32 {
	if o == nil || IsNil(o.BaseValue) {
		var ret float32
		return ret
	}
	return *o.BaseValue
}

// GetBaseValueOk returns a tuple with the BaseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetBaseValueOk() (*float32, bool) {
	if o == nil || IsNil(o.BaseValue) {
		return nil, false
	}
	return o.BaseValue, true
}

// HasBaseValue returns a boolean if a field has been set.
func (o *IndexView) HasBaseValue() bool {
	if o != nil && !IsNil(o.BaseValue) {
		return true
	}

	return false
}

// SetBaseValue gets a reference to the given float32 and assigns it to the BaseValue field.
func (o *IndexView) SetBaseValue(v float32) {
	o.BaseValue = &v
}

// GetChainingFactor returns the ChainingFactor field value if set, zero value otherwise.
func (o *IndexView) GetChainingFactor() float32 {
	if o == nil || IsNil(o.ChainingFactor) {
		var ret float32
		return ret
	}
	return *o.ChainingFactor
}

// GetChainingFactorOk returns a tuple with the ChainingFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetChainingFactorOk() (*float32, bool) {
	if o == nil || IsNil(o.ChainingFactor) {
		return nil, false
	}
	return o.ChainingFactor, true
}

// HasChainingFactor returns a boolean if a field has been set.
func (o *IndexView) HasChainingFactor() bool {
	if o != nil && !IsNil(o.ChainingFactor) {
		return true
	}

	return false
}

// SetChainingFactor gets a reference to the given float32 and assigns it to the ChainingFactor field.
func (o *IndexView) SetChainingFactor(v float32) {
	o.ChainingFactor = &v
}

// GetListing returns the Listing field value if set, zero value otherwise.
func (o *IndexView) GetListing() Listing {
	if o == nil || IsNil(o.Listing) {
		var ret Listing
		return ret
	}
	return *o.Listing
}

// GetListingOk returns a tuple with the Listing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetListingOk() (*Listing, bool) {
	if o == nil || IsNil(o.Listing) {
		return nil, false
	}
	return o.Listing, true
}

// HasListing returns a boolean if a field has been set.
func (o *IndexView) HasListing() bool {
	if o != nil && !IsNil(o.Listing) {
		return true
	}

	return false
}

// SetListing gets a reference to the given Listing and assigns it to the Listing field.
func (o *IndexView) SetListing(v Listing) {
	o.Listing = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *IndexView) GetMembers() []IndexMemberValuesView {
	if o == nil || IsNil(o.Members) {
		var ret []IndexMemberValuesView
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetMembersOk() ([]IndexMemberValuesView, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *IndexView) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []IndexMemberValuesView and assigns it to the Members field.
func (o *IndexView) SetMembers(v []IndexMemberValuesView) {
	o.Members = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IndexView) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IndexView) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IndexView) SetName(v string) {
	o.Name = &v
}

// GetNextChainingDate returns the NextChainingDate field value if set, zero value otherwise.
func (o *IndexView) GetNextChainingDate() int64 {
	if o == nil || IsNil(o.NextChainingDate) {
		var ret int64
		return ret
	}
	return *o.NextChainingDate
}

// GetNextChainingDateOk returns a tuple with the NextChainingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetNextChainingDateOk() (*int64, bool) {
	if o == nil || IsNil(o.NextChainingDate) {
		return nil, false
	}
	return o.NextChainingDate, true
}

// HasNextChainingDate returns a boolean if a field has been set.
func (o *IndexView) HasNextChainingDate() bool {
	if o != nil && !IsNil(o.NextChainingDate) {
		return true
	}

	return false
}

// SetNextChainingDate gets a reference to the given int64 and assigns it to the NextChainingDate field.
func (o *IndexView) SetNextChainingDate(v int64) {
	o.NextChainingDate = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IndexView) GetOwner() UsernameView {
	if o == nil || IsNil(o.Owner) {
		var ret UsernameView
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexView) GetOwnerOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IndexView) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UsernameView and assigns it to the Owner field.
func (o *IndexView) SetOwner(v UsernameView) {
	o.Owner = &v
}

func (o IndexView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseValue) {
		toSerialize["baseValue"] = o.BaseValue
	}
	if !IsNil(o.ChainingFactor) {
		toSerialize["chainingFactor"] = o.ChainingFactor
	}
	if !IsNil(o.Listing) {
		toSerialize["listing"] = o.Listing
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextChainingDate) {
		toSerialize["nextChainingDate"] = o.NextChainingDate
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	return toSerialize, nil
}

type NullableIndexView struct {
	value *IndexView
	isSet bool
}

func (v NullableIndexView) Get() *IndexView {
	return v.value
}

func (v *NullableIndexView) Set(val *IndexView) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexView) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexView(val *IndexView) *NullableIndexView {
	return &NullableIndexView{value: val, isSet: true}
}

func (v NullableIndexView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


