/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// BondControllerAPIService BondControllerAPI service
type BondControllerAPIService service

type ApiGetBondBySecIdentUsingGETRequest struct {
	ctx context.Context
	ApiService *BondControllerAPIService
	securityIdentifier string
}

func (r ApiGetBondBySecIdentUsingGETRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.GetBondBySecIdentUsingGETExecute(r)
}

/*
GetBondBySecIdentUsingGET Returns bond by its security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityIdentifier Security Identifier
 @return ApiGetBondBySecIdentUsingGETRequest
*/
func (a *BondControllerAPIService) GetBondBySecIdentUsingGET(ctx context.Context, securityIdentifier string) ApiGetBondBySecIdentUsingGETRequest {
	return ApiGetBondBySecIdentUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		securityIdentifier: securityIdentifier,
	}
}

// Execute executes the request
//  @return BondView
func (a *BondControllerAPIService) GetBondBySecIdentUsingGETExecute(r ApiGetBondBySecIdentUsingGETRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BondControllerAPIService.GetBondBySecIdentUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bonds/securityidentifier/{securityIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityIdentifier"+"}", url.PathEscape(parameterValueToString(r.securityIdentifier, "securityIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBondUsingGETRequest struct {
	ctx context.Context
	ApiService *BondControllerAPIService
	bondId string
}

func (r ApiGetBondUsingGETRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.GetBondUsingGETExecute(r)
}

/*
GetBondUsingGET Returns bond

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bondId Bond id
 @return ApiGetBondUsingGETRequest
*/
func (a *BondControllerAPIService) GetBondUsingGET(ctx context.Context, bondId string) ApiGetBondUsingGETRequest {
	return ApiGetBondUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		bondId: bondId,
	}
}

// Execute executes the request
//  @return BondView
func (a *BondControllerAPIService) GetBondUsingGETExecute(r ApiGetBondUsingGETRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BondControllerAPIService.GetBondUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bonds/{bondId}"
	localVarPath = strings.Replace(localVarPath, "{"+"bondId"+"}", url.PathEscape(parameterValueToString(r.bondId, "bondId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIssueBondsUsingPOSTRequest struct {
	ctx context.Context
	ApiService *BondControllerAPIService
	companyId *string
	faceValue *string
	interestRate *string
	maturityDate *string
	numberOfBonds *string
}

// Company id
func (r ApiIssueBondsUsingPOSTRequest) CompanyId(companyId string) ApiIssueBondsUsingPOSTRequest {
	r.companyId = &companyId
	return r
}

// Face value
func (r ApiIssueBondsUsingPOSTRequest) FaceValue(faceValue string) ApiIssueBondsUsingPOSTRequest {
	r.faceValue = &faceValue
	return r
}

// Interest Rate in percent to pay at maturity date
func (r ApiIssueBondsUsingPOSTRequest) InterestRate(interestRate string) ApiIssueBondsUsingPOSTRequest {
	r.interestRate = &interestRate
	return r
}

// Maturity date
func (r ApiIssueBondsUsingPOSTRequest) MaturityDate(maturityDate string) ApiIssueBondsUsingPOSTRequest {
	r.maturityDate = &maturityDate
	return r
}

// Number of bonds to emit
func (r ApiIssueBondsUsingPOSTRequest) NumberOfBonds(numberOfBonds string) ApiIssueBondsUsingPOSTRequest {
	r.numberOfBonds = &numberOfBonds
	return r
}

func (r ApiIssueBondsUsingPOSTRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.IssueBondsUsingPOSTExecute(r)
}

/*
IssueBondsUsingPOST Issues new corporate bonds

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIssueBondsUsingPOSTRequest
*/
func (a *BondControllerAPIService) IssueBondsUsingPOST(ctx context.Context) ApiIssueBondsUsingPOSTRequest {
	return ApiIssueBondsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BondView
func (a *BondControllerAPIService) IssueBondsUsingPOSTExecute(r ApiIssueBondsUsingPOSTRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BondControllerAPIService.IssueBondsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bonds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyId == nil {
		return localVarReturnValue, nil, reportError("companyId is required and must be specified")
	}
	if r.faceValue == nil {
		return localVarReturnValue, nil, reportError("faceValue is required and must be specified")
	}
	if r.interestRate == nil {
		return localVarReturnValue, nil, reportError("interestRate is required and must be specified")
	}
	if r.maturityDate == nil {
		return localVarReturnValue, nil, reportError("maturityDate is required and must be specified")
	}
	if r.numberOfBonds == nil {
		return localVarReturnValue, nil, reportError("numberOfBonds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "companyId", r.companyId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "faceValue", r.faceValue, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "interestRate", r.interestRate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "maturityDate", r.maturityDate, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "numberOfBonds", r.numberOfBonds, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBondsUsingGETRequest struct {
	ctx context.Context
	ApiService *BondControllerAPIService
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListBondsUsingGETRequest) Page(page int32) ApiListBondsUsingGETRequest {
	r.page = &page
	return r
}

// Fulltext search
func (r ApiListBondsUsingGETRequest) Search(search string) ApiListBondsUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListBondsUsingGETRequest) Size(size int32) ApiListBondsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListBondsUsingGETRequest) Sort(sort []string) ApiListBondsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListBondsUsingGETRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.ListBondsUsingGETExecute(r)
}

/*
ListBondsUsingGET Lists all bonds

Sorted ascending by maturityDate as default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBondsUsingGETRequest
*/
func (a *BondControllerAPIService) ListBondsUsingGET(ctx context.Context) ApiListBondsUsingGETRequest {
	return ApiListBondsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BondView
func (a *BondControllerAPIService) ListBondsUsingGETExecute(r ApiListBondsUsingGETRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BondControllerAPIService.ListBondsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/bonds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListBondsV1UsingGETRequest struct {
	ctx context.Context
	ApiService *BondControllerAPIService
}

func (r ApiListBondsV1UsingGETRequest) Execute() (*BondView, *http.Response, error) {
	return r.ApiService.ListBondsV1UsingGETExecute(r)
}

/*
ListBondsV1UsingGET Lists all bonds (200 max.)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListBondsV1UsingGETRequest

Deprecated
*/
func (a *BondControllerAPIService) ListBondsV1UsingGET(ctx context.Context) ApiListBondsV1UsingGETRequest {
	return ApiListBondsV1UsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BondView
// Deprecated
func (a *BondControllerAPIService) ListBondsV1UsingGETExecute(r ApiListBondsV1UsingGETRequest) (*BondView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BondView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BondControllerAPIService.ListBondsV1UsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/bonds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
