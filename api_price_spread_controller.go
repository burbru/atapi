/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// PriceSpreadControllerAPIService PriceSpreadControllerAPI service
type PriceSpreadControllerAPIService service

type ApiDeleteFilterUsingDELETERequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	filterId string
}

func (r ApiDeleteFilterUsingDELETERequest) Execute() (*MessagePrototype, *http.Response, error) {
	return r.ApiService.DeleteFilterUsingDELETEExecute(r)
}

/*
DeleteFilterUsingDELETE Deletes filter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filterId Id of persistent filter
 @return ApiDeleteFilterUsingDELETERequest
*/
func (a *PriceSpreadControllerAPIService) DeleteFilterUsingDELETE(ctx context.Context, filterId string) ApiDeleteFilterUsingDELETERequest {
	return ApiDeleteFilterUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		filterId: filterId,
	}
}

// Execute executes the request
//  @return MessagePrototype
func (a *PriceSpreadControllerAPIService) DeleteFilterUsingDELETEExecute(r ApiDeleteFilterUsingDELETERequest) (*MessagePrototype, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MessagePrototype
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.DeleteFilterUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/filter/pricespreads/{filterId}"
	localVarPath = strings.Replace(localVarPath, "{"+"filterId"+"}", url.PathEscape(parameterValueToString(r.filterId, "filterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilterSpreadsUsingPOSTRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	filterId *string
	filter *PriceSpreadListingViewFilter
}

// Filter ID (duplicates the filter, can be used for other user&#39;s filter too)
func (r ApiFilterSpreadsUsingPOSTRequest) FilterId(filterId string) ApiFilterSpreadsUsingPOSTRequest {
	r.filterId = &filterId
	return r
}

// Filter
func (r ApiFilterSpreadsUsingPOSTRequest) Filter(filter PriceSpreadListingViewFilter) ApiFilterSpreadsUsingPOSTRequest {
	r.filter = &filter
	return r
}

func (r ApiFilterSpreadsUsingPOSTRequest) Execute() (*ListingMarketFilterResultView, *http.Response, error) {
	return r.ApiService.FilterSpreadsUsingPOSTExecute(r)
}

/*
FilterSpreadsUsingPOST Filters price spreads

Filter price spreads, allows persisting of filter by adding a filter name to its JSON or importing another index by setting filterId

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilterSpreadsUsingPOSTRequest
*/
func (a *PriceSpreadControllerAPIService) FilterSpreadsUsingPOST(ctx context.Context) ApiFilterSpreadsUsingPOSTRequest {
	return ApiFilterSpreadsUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListingMarketFilterResultView
func (a *PriceSpreadControllerAPIService) FilterSpreadsUsingPOSTExecute(r ApiFilterSpreadsUsingPOSTRequest) (*ListingMarketFilterResultView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListingMarketFilterResultView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.FilterSpreadsUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/filter/pricespreads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterId", r.filterId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBiggestTradedSecuritiesUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	page *int32
	size *int32
	sort *[]string
	type_ *string
}

// Results page you want to retrieve (0..N)
func (r ApiGetBiggestTradedSecuritiesUsingGETRequest) Page(page int32) ApiGetBiggestTradedSecuritiesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetBiggestTradedSecuritiesUsingGETRequest) Size(size int32) ApiGetBiggestTradedSecuritiesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetBiggestTradedSecuritiesUsingGETRequest) Sort(sort []string) ApiGetBiggestTradedSecuritiesUsingGETRequest {
	r.sort = &sort
	return r
}

// Listing type
func (r ApiGetBiggestTradedSecuritiesUsingGETRequest) Type_(type_ string) ApiGetBiggestTradedSecuritiesUsingGETRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetBiggestTradedSecuritiesUsingGETRequest) Execute() (*ListingWithTradingCountView, *http.Response, error) {
	return r.ApiService.GetBiggestTradedSecuritiesUsingGETExecute(r)
}

/*
GetBiggestTradedSecuritiesUsingGET Lists traded securities with the biggest trading volume of the last 24h

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBiggestTradedSecuritiesUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetBiggestTradedSecuritiesUsingGET(ctx context.Context) ApiGetBiggestTradedSecuritiesUsingGETRequest {
	return ApiGetBiggestTradedSecuritiesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListingWithTradingCountView
func (a *PriceSpreadControllerAPIService) GetBiggestTradedSecuritiesUsingGETExecute(r ApiGetBiggestTradedSecuritiesUsingGETRequest) (*ListingWithTradingCountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListingWithTradingCountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetBiggestTradedSecuritiesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/biggesttradedsecurities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFilterDefinitionUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
}

func (r ApiGetFilterDefinitionUsingGETRequest) Execute() (*PriceSpreadListingFilterDefinition, *http.Response, error) {
	return r.ApiService.GetFilterDefinitionUsingGETExecute(r)
}

/*
GetFilterDefinitionUsingGET Price spread filter definition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFilterDefinitionUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetFilterDefinitionUsingGET(ctx context.Context) ApiGetFilterDefinitionUsingGETRequest {
	return ApiGetFilterDefinitionUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PriceSpreadListingFilterDefinition
func (a *PriceSpreadControllerAPIService) GetFilterDefinitionUsingGETExecute(r ApiGetFilterDefinitionUsingGETRequest) (*PriceSpreadListingFilterDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PriceSpreadListingFilterDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetFilterDefinitionUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/filterdefinition/pricespreads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFilterUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	filterId string
}

func (r ApiGetFilterUsingGETRequest) Execute() (*PriceSpreadListingViewFilter, *http.Response, error) {
	return r.ApiService.GetFilterUsingGETExecute(r)
}

/*
GetFilterUsingGET Returns filter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filterId Id of persistent filter
 @return ApiGetFilterUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetFilterUsingGET(ctx context.Context, filterId string) ApiGetFilterUsingGETRequest {
	return ApiGetFilterUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		filterId: filterId,
	}
}

// Execute executes the request
//  @return PriceSpreadListingViewFilter
func (a *PriceSpreadControllerAPIService) GetFilterUsingGETExecute(r ApiGetFilterUsingGETRequest) (*PriceSpreadListingViewFilter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PriceSpreadListingViewFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetFilterUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/filter/pricespreads/{filterId}"
	localVarPath = strings.Replace(localVarPath, "{"+"filterId"+"}", url.PathEscape(parameterValueToString(r.filterId, "filterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	page *int32
	size *int32
	sort *[]string
	type_ *string
}

// Results page you want to retrieve (0..N)
func (r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) Page(page int32) ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) Size(size int32) ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) Sort(sort []string) ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest {
	r.sort = &sort
	return r
}

// Listing type
func (r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) Type_(type_ string) ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest {
	r.type_ = &type_
	return r
}

func (r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) Execute() (*ListingWithTradingCountView, *http.Response, error) {
	return r.ApiService.GetMostFrequentlyTradedSecuritiesUsingGETExecute(r)
}

/*
GetMostFrequentlyTradedSecuritiesUsingGET Lists most frequently traded securities of the last 24h

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetMostFrequentlyTradedSecuritiesUsingGET(ctx context.Context) ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest {
	return ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListingWithTradingCountView
func (a *PriceSpreadControllerAPIService) GetMostFrequentlyTradedSecuritiesUsingGETExecute(r ApiGetMostFrequentlyTradedSecuritiesUsingGETRequest) (*ListingWithTradingCountView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListingWithTradingCountView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetMostFrequentlyTradedSecuritiesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/mostfrequentlytradedsecurities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSecuritiesWithBigPriceChangesUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	losersFirst *bool
	page *int32
	size *int32
	sort *[]string
}

// List losers first
func (r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) LosersFirst(losersFirst bool) ApiGetSecuritiesWithBigPriceChangesUsingGETRequest {
	r.losersFirst = &losersFirst
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) Page(page int32) ApiGetSecuritiesWithBigPriceChangesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) Size(size int32) ApiGetSecuritiesWithBigPriceChangesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) Sort(sort []string) ApiGetSecuritiesWithBigPriceChangesUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) Execute() (*ListingWithPriceChangeView, *http.Response, error) {
	return r.ApiService.GetSecuritiesWithBigPriceChangesUsingGETExecute(r)
}

/*
GetSecuritiesWithBigPriceChangesUsingGET Lists securities sorted by their price change between the last two closing prices

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSecuritiesWithBigPriceChangesUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetSecuritiesWithBigPriceChangesUsingGET(ctx context.Context) ApiGetSecuritiesWithBigPriceChangesUsingGETRequest {
	return ApiGetSecuritiesWithBigPriceChangesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListingWithPriceChangeView
func (a *PriceSpreadControllerAPIService) GetSecuritiesWithBigPriceChangesUsingGETExecute(r ApiGetSecuritiesWithBigPriceChangesUsingGETRequest) (*ListingWithPriceChangeView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListingWithPriceChangeView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetSecuritiesWithBigPriceChangesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/securitieswithbigpricechanges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.losersFirst != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "losersFirst", r.losersFirst, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSpreadUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	securityIdentifier string
}

func (r ApiGetSpreadUsingGETRequest) Execute() (*PriceSpreadListingView, *http.Response, error) {
	return r.ApiService.GetSpreadUsingGETExecute(r)
}

/*
GetSpreadUsingGET Returns price spread

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityIdentifier Security identifier
 @return ApiGetSpreadUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) GetSpreadUsingGET(ctx context.Context, securityIdentifier string) ApiGetSpreadUsingGETRequest {
	return ApiGetSpreadUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		securityIdentifier: securityIdentifier,
	}
}

// Execute executes the request
//  @return PriceSpreadListingView
func (a *PriceSpreadControllerAPIService) GetSpreadUsingGETExecute(r ApiGetSpreadUsingGETRequest) (*PriceSpreadListingView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PriceSpreadListingView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.GetSpreadUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pricespreads/{securityIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityIdentifier"+"}", url.PathEscape(parameterValueToString(r.securityIdentifier, "securityIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSpreadsUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListSpreadsUsingGETRequest) Page(page int32) ApiListSpreadsUsingGETRequest {
	r.page = &page
	return r
}

// Fulltext search in listing&#39;s name and security identifier
func (r ApiListSpreadsUsingGETRequest) Search(search string) ApiListSpreadsUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListSpreadsUsingGETRequest) Size(size int32) ApiListSpreadsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListSpreadsUsingGETRequest) Sort(sort []string) ApiListSpreadsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListSpreadsUsingGETRequest) Execute() (*PagePriceSpreadListingView, *http.Response, error) {
	return r.ApiService.ListSpreadsUsingGETExecute(r)
}

/*
ListSpreadsUsingGET Lists all price spreads

Sorted ascending by startDate as default

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSpreadsUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) ListSpreadsUsingGET(ctx context.Context) ApiListSpreadsUsingGETRequest {
	return ApiListSpreadsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PagePriceSpreadListingView
func (a *PriceSpreadControllerAPIService) ListSpreadsUsingGETExecute(r ApiListSpreadsUsingGETRequest) (*PagePriceSpreadListingView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PagePriceSpreadListingView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.ListSpreadsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/pricespreads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSpreadsV1UsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
}

func (r ApiListSpreadsV1UsingGETRequest) Execute() (*PriceSpreadListingView, *http.Response, error) {
	return r.ApiService.ListSpreadsV1UsingGETExecute(r)
}

/*
ListSpreadsV1UsingGET Lists all price spreads

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSpreadsV1UsingGETRequest

Deprecated
*/
func (a *PriceSpreadControllerAPIService) ListSpreadsV1UsingGET(ctx context.Context) ApiListSpreadsV1UsingGETRequest {
	return ApiListSpreadsV1UsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PriceSpreadListingView
// Deprecated
func (a *PriceSpreadControllerAPIService) ListSpreadsV1UsingGETExecute(r ApiListSpreadsV1UsingGETRequest) (*PriceSpreadListingView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PriceSpreadListingView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.ListSpreadsV1UsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/pricespreads/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListsFilterUsingGETRequest struct {
	ctx context.Context
	ApiService *PriceSpreadControllerAPIService
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListsFilterUsingGETRequest) Page(page int32) ApiListsFilterUsingGETRequest {
	r.page = &page
	return r
}

// Search for name parts (optional)
func (r ApiListsFilterUsingGETRequest) Search(search string) ApiListsFilterUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListsFilterUsingGETRequest) Size(size int32) ApiListsFilterUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListsFilterUsingGETRequest) Sort(sort []string) ApiListsFilterUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListsFilterUsingGETRequest) Execute() (*PagePersistentFilterView, *http.Response, error) {
	return r.ApiService.ListsFilterUsingGETExecute(r)
}

/*
ListsFilterUsingGET Lists current user's filters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListsFilterUsingGETRequest
*/
func (a *PriceSpreadControllerAPIService) ListsFilterUsingGET(ctx context.Context) ApiListsFilterUsingGETRequest {
	return ApiListsFilterUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PagePersistentFilterView
func (a *PriceSpreadControllerAPIService) ListsFilterUsingGETExecute(r ApiListsFilterUsingGETRequest) (*PagePersistentFilterView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PagePersistentFilterView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PriceSpreadControllerAPIService.ListsFilterUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/filter/pricespreads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
