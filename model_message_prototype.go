/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the MessagePrototype type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessagePrototype{}

// MessagePrototype struct for MessagePrototype
type MessagePrototype struct {
	FilledString *string `json:"filledString,omitempty"`
	Message *string `json:"message,omitempty"`
	Substitutions []string `json:"substitutions,omitempty"`
}

// NewMessagePrototype instantiates a new MessagePrototype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagePrototype() *MessagePrototype {
	this := MessagePrototype{}
	return &this
}

// NewMessagePrototypeWithDefaults instantiates a new MessagePrototype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagePrototypeWithDefaults() *MessagePrototype {
	this := MessagePrototype{}
	return &this
}

// GetFilledString returns the FilledString field value if set, zero value otherwise.
func (o *MessagePrototype) GetFilledString() string {
	if o == nil || IsNil(o.FilledString) {
		var ret string
		return ret
	}
	return *o.FilledString
}

// GetFilledStringOk returns a tuple with the FilledString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePrototype) GetFilledStringOk() (*string, bool) {
	if o == nil || IsNil(o.FilledString) {
		return nil, false
	}
	return o.FilledString, true
}

// HasFilledString returns a boolean if a field has been set.
func (o *MessagePrototype) HasFilledString() bool {
	if o != nil && !IsNil(o.FilledString) {
		return true
	}

	return false
}

// SetFilledString gets a reference to the given string and assigns it to the FilledString field.
func (o *MessagePrototype) SetFilledString(v string) {
	o.FilledString = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MessagePrototype) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePrototype) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MessagePrototype) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *MessagePrototype) SetMessage(v string) {
	o.Message = &v
}

// GetSubstitutions returns the Substitutions field value if set, zero value otherwise.
func (o *MessagePrototype) GetSubstitutions() []string {
	if o == nil || IsNil(o.Substitutions) {
		var ret []string
		return ret
	}
	return o.Substitutions
}

// GetSubstitutionsOk returns a tuple with the Substitutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePrototype) GetSubstitutionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Substitutions) {
		return nil, false
	}
	return o.Substitutions, true
}

// HasSubstitutions returns a boolean if a field has been set.
func (o *MessagePrototype) HasSubstitutions() bool {
	if o != nil && !IsNil(o.Substitutions) {
		return true
	}

	return false
}

// SetSubstitutions gets a reference to the given []string and assigns it to the Substitutions field.
func (o *MessagePrototype) SetSubstitutions(v []string) {
	o.Substitutions = v
}

func (o MessagePrototype) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessagePrototype) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilledString) {
		toSerialize["filledString"] = o.FilledString
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Substitutions) {
		toSerialize["substitutions"] = o.Substitutions
	}
	return toSerialize, nil
}

type NullableMessagePrototype struct {
	value *MessagePrototype
	isSet bool
}

func (v NullableMessagePrototype) Get() *MessagePrototype {
	return v.value
}

func (v *NullableMessagePrototype) Set(val *MessagePrototype) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagePrototype) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagePrototype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagePrototype(val *MessagePrototype) *NullableMessagePrototype {
	return &NullableMessagePrototype{value: val, isSet: true}
}

func (v NullableMessagePrototype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagePrototype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


