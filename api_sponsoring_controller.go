/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// SponsoringControllerAPIService SponsoringControllerAPI service
type SponsoringControllerAPIService service

type ApiListGoalsUsingGETRequest struct {
	ctx context.Context
	ApiService *SponsoringControllerAPIService
	page *int32
	size *int32
	sort *[]string
	type_ *string
}

// Results page you want to retrieve (0..N)
func (r ApiListGoalsUsingGETRequest) Page(page int32) ApiListGoalsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListGoalsUsingGETRequest) Size(size int32) ApiListGoalsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListGoalsUsingGETRequest) Sort(sort []string) ApiListGoalsUsingGETRequest {
	r.sort = &sort
	return r
}

// type
func (r ApiListGoalsUsingGETRequest) Type_(type_ string) ApiListGoalsUsingGETRequest {
	r.type_ = &type_
	return r
}

func (r ApiListGoalsUsingGETRequest) Execute() (*PageSponsoringGoalView, *http.Response, error) {
	return r.ApiService.ListGoalsUsingGETExecute(r)
}

/*
ListGoalsUsingGET Lists all sponsoring goals

Sorted descending by percentage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListGoalsUsingGETRequest
*/
func (a *SponsoringControllerAPIService) ListGoalsUsingGET(ctx context.Context) ApiListGoalsUsingGETRequest {
	return ApiListGoalsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageSponsoringGoalView
func (a *SponsoringControllerAPIService) ListGoalsUsingGETExecute(r ApiListGoalsUsingGETRequest) (*PageSponsoringGoalView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageSponsoringGoalView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SponsoringControllerAPIService.ListGoalsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sponsoringgoals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSponsorsUsingGETRequest struct {
	ctx context.Context
	ApiService *SponsoringControllerAPIService
	afterDate *int64
	page *int32
	size *int32
	sort *[]string
}

// Only lists sponsored hours after Date
func (r ApiListSponsorsUsingGETRequest) AfterDate(afterDate int64) ApiListSponsorsUsingGETRequest {
	r.afterDate = &afterDate
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListSponsorsUsingGETRequest) Page(page int32) ApiListSponsorsUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListSponsorsUsingGETRequest) Size(size int32) ApiListSponsorsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListSponsorsUsingGETRequest) Sort(sort []string) ApiListSponsorsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListSponsorsUsingGETRequest) Execute() (*PageSponsorView, *http.Response, error) {
	return r.ApiService.ListSponsorsUsingGETExecute(r)
}

/*
ListSponsorsUsingGET Lists all sponsors

Sorted descending by number of sponsored hours

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListSponsorsUsingGETRequest
*/
func (a *SponsoringControllerAPIService) ListSponsorsUsingGET(ctx context.Context) ApiListSponsorsUsingGETRequest {
	return ApiListSponsorsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageSponsorView
func (a *SponsoringControllerAPIService) ListSponsorsUsingGETExecute(r ApiListSponsorsUsingGETRequest) (*PageSponsorView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageSponsorView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SponsoringControllerAPIService.ListSponsorsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/sponsors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.afterDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "afterDate", r.afterDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
