/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the UserProfileView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserProfileView{}

// UserProfileView struct for UserProfileView
type UserProfileView struct {
	BankAccount *BankAccountView `json:"bankAccount,omitempty"`
	CashTransferLogs []CashTransferLogEntryView `json:"cashTransferLogs,omitempty"`
	Employments []EmploymentAgreementCompactCompanyView `json:"employments,omitempty"`
	InitiatedPolls []AbstractPollView `json:"initiatedPolls,omitempty"`
	Locale *string `json:"locale,omitempty"`
	Polls []AbstractPollView `json:"polls,omitempty"`
	SalaryPayments []SalaryPaymentView `json:"salaryPayments,omitempty"`
	User *UsernameView `json:"user,omitempty"`
}

// NewUserProfileView instantiates a new UserProfileView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserProfileView() *UserProfileView {
	this := UserProfileView{}
	return &this
}

// NewUserProfileViewWithDefaults instantiates a new UserProfileView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserProfileViewWithDefaults() *UserProfileView {
	this := UserProfileView{}
	return &this
}

// GetBankAccount returns the BankAccount field value if set, zero value otherwise.
func (o *UserProfileView) GetBankAccount() BankAccountView {
	if o == nil || IsNil(o.BankAccount) {
		var ret BankAccountView
		return ret
	}
	return *o.BankAccount
}

// GetBankAccountOk returns a tuple with the BankAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetBankAccountOk() (*BankAccountView, bool) {
	if o == nil || IsNil(o.BankAccount) {
		return nil, false
	}
	return o.BankAccount, true
}

// HasBankAccount returns a boolean if a field has been set.
func (o *UserProfileView) HasBankAccount() bool {
	if o != nil && !IsNil(o.BankAccount) {
		return true
	}

	return false
}

// SetBankAccount gets a reference to the given BankAccountView and assigns it to the BankAccount field.
func (o *UserProfileView) SetBankAccount(v BankAccountView) {
	o.BankAccount = &v
}

// GetCashTransferLogs returns the CashTransferLogs field value if set, zero value otherwise.
func (o *UserProfileView) GetCashTransferLogs() []CashTransferLogEntryView {
	if o == nil || IsNil(o.CashTransferLogs) {
		var ret []CashTransferLogEntryView
		return ret
	}
	return o.CashTransferLogs
}

// GetCashTransferLogsOk returns a tuple with the CashTransferLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetCashTransferLogsOk() ([]CashTransferLogEntryView, bool) {
	if o == nil || IsNil(o.CashTransferLogs) {
		return nil, false
	}
	return o.CashTransferLogs, true
}

// HasCashTransferLogs returns a boolean if a field has been set.
func (o *UserProfileView) HasCashTransferLogs() bool {
	if o != nil && !IsNil(o.CashTransferLogs) {
		return true
	}

	return false
}

// SetCashTransferLogs gets a reference to the given []CashTransferLogEntryView and assigns it to the CashTransferLogs field.
func (o *UserProfileView) SetCashTransferLogs(v []CashTransferLogEntryView) {
	o.CashTransferLogs = v
}

// GetEmployments returns the Employments field value if set, zero value otherwise.
func (o *UserProfileView) GetEmployments() []EmploymentAgreementCompactCompanyView {
	if o == nil || IsNil(o.Employments) {
		var ret []EmploymentAgreementCompactCompanyView
		return ret
	}
	return o.Employments
}

// GetEmploymentsOk returns a tuple with the Employments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetEmploymentsOk() ([]EmploymentAgreementCompactCompanyView, bool) {
	if o == nil || IsNil(o.Employments) {
		return nil, false
	}
	return o.Employments, true
}

// HasEmployments returns a boolean if a field has been set.
func (o *UserProfileView) HasEmployments() bool {
	if o != nil && !IsNil(o.Employments) {
		return true
	}

	return false
}

// SetEmployments gets a reference to the given []EmploymentAgreementCompactCompanyView and assigns it to the Employments field.
func (o *UserProfileView) SetEmployments(v []EmploymentAgreementCompactCompanyView) {
	o.Employments = v
}

// GetInitiatedPolls returns the InitiatedPolls field value if set, zero value otherwise.
func (o *UserProfileView) GetInitiatedPolls() []AbstractPollView {
	if o == nil || IsNil(o.InitiatedPolls) {
		var ret []AbstractPollView
		return ret
	}
	return o.InitiatedPolls
}

// GetInitiatedPollsOk returns a tuple with the InitiatedPolls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetInitiatedPollsOk() ([]AbstractPollView, bool) {
	if o == nil || IsNil(o.InitiatedPolls) {
		return nil, false
	}
	return o.InitiatedPolls, true
}

// HasInitiatedPolls returns a boolean if a field has been set.
func (o *UserProfileView) HasInitiatedPolls() bool {
	if o != nil && !IsNil(o.InitiatedPolls) {
		return true
	}

	return false
}

// SetInitiatedPolls gets a reference to the given []AbstractPollView and assigns it to the InitiatedPolls field.
func (o *UserProfileView) SetInitiatedPolls(v []AbstractPollView) {
	o.InitiatedPolls = v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *UserProfileView) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *UserProfileView) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *UserProfileView) SetLocale(v string) {
	o.Locale = &v
}

// GetPolls returns the Polls field value if set, zero value otherwise.
func (o *UserProfileView) GetPolls() []AbstractPollView {
	if o == nil || IsNil(o.Polls) {
		var ret []AbstractPollView
		return ret
	}
	return o.Polls
}

// GetPollsOk returns a tuple with the Polls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetPollsOk() ([]AbstractPollView, bool) {
	if o == nil || IsNil(o.Polls) {
		return nil, false
	}
	return o.Polls, true
}

// HasPolls returns a boolean if a field has been set.
func (o *UserProfileView) HasPolls() bool {
	if o != nil && !IsNil(o.Polls) {
		return true
	}

	return false
}

// SetPolls gets a reference to the given []AbstractPollView and assigns it to the Polls field.
func (o *UserProfileView) SetPolls(v []AbstractPollView) {
	o.Polls = v
}

// GetSalaryPayments returns the SalaryPayments field value if set, zero value otherwise.
func (o *UserProfileView) GetSalaryPayments() []SalaryPaymentView {
	if o == nil || IsNil(o.SalaryPayments) {
		var ret []SalaryPaymentView
		return ret
	}
	return o.SalaryPayments
}

// GetSalaryPaymentsOk returns a tuple with the SalaryPayments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetSalaryPaymentsOk() ([]SalaryPaymentView, bool) {
	if o == nil || IsNil(o.SalaryPayments) {
		return nil, false
	}
	return o.SalaryPayments, true
}

// HasSalaryPayments returns a boolean if a field has been set.
func (o *UserProfileView) HasSalaryPayments() bool {
	if o != nil && !IsNil(o.SalaryPayments) {
		return true
	}

	return false
}

// SetSalaryPayments gets a reference to the given []SalaryPaymentView and assigns it to the SalaryPayments field.
func (o *UserProfileView) SetSalaryPayments(v []SalaryPaymentView) {
	o.SalaryPayments = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserProfileView) GetUser() UsernameView {
	if o == nil || IsNil(o.User) {
		var ret UsernameView
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserProfileView) GetUserOk() (*UsernameView, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserProfileView) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UsernameView and assigns it to the User field.
func (o *UserProfileView) SetUser(v UsernameView) {
	o.User = &v
}

func (o UserProfileView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserProfileView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BankAccount) {
		toSerialize["bankAccount"] = o.BankAccount
	}
	if !IsNil(o.CashTransferLogs) {
		toSerialize["cashTransferLogs"] = o.CashTransferLogs
	}
	if !IsNil(o.Employments) {
		toSerialize["employments"] = o.Employments
	}
	if !IsNil(o.InitiatedPolls) {
		toSerialize["initiatedPolls"] = o.InitiatedPolls
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !IsNil(o.Polls) {
		toSerialize["polls"] = o.Polls
	}
	if !IsNil(o.SalaryPayments) {
		toSerialize["salaryPayments"] = o.SalaryPayments
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableUserProfileView struct {
	value *UserProfileView
	isSet bool
}

func (v NullableUserProfileView) Get() *UserProfileView {
	return v.value
}

func (v *NullableUserProfileView) Set(val *UserProfileView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserProfileView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserProfileView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserProfileView(val *UserProfileView) *NullableUserProfileView {
	return &NullableUserProfileView{value: val, isSet: true}
}

func (v NullableUserProfileView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserProfileView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


