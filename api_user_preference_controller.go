/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// UserPreferenceControllerAPIService UserPreferenceControllerAPI service
type UserPreferenceControllerAPIService service

type ApiCreateUserPreferenceUsingPOSTRequest struct {
	ctx context.Context
	ApiService *UserPreferenceControllerAPIService
	content *string
	identifier *string
	type_ *string
}

// Content of the user preference
func (r ApiCreateUserPreferenceUsingPOSTRequest) Content(content string) ApiCreateUserPreferenceUsingPOSTRequest {
	r.content = &content
	return r
}

// Identifier of the user preference
func (r ApiCreateUserPreferenceUsingPOSTRequest) Identifier(identifier string) ApiCreateUserPreferenceUsingPOSTRequest {
	r.identifier = &identifier
	return r
}

// Type of the user preference
func (r ApiCreateUserPreferenceUsingPOSTRequest) Type_(type_ string) ApiCreateUserPreferenceUsingPOSTRequest {
	r.type_ = &type_
	return r
}

func (r ApiCreateUserPreferenceUsingPOSTRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CreateUserPreferenceUsingPOSTExecute(r)
}

/*
CreateUserPreferenceUsingPOST Creates user preference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUserPreferenceUsingPOSTRequest
*/
func (a *UserPreferenceControllerAPIService) CreateUserPreferenceUsingPOST(ctx context.Context) ApiCreateUserPreferenceUsingPOSTRequest {
	return ApiCreateUserPreferenceUsingPOSTRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *UserPreferenceControllerAPIService) CreateUserPreferenceUsingPOSTExecute(r ApiCreateUserPreferenceUsingPOSTRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserPreferenceControllerAPIService.CreateUserPreferenceUsingPOST")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/userpreferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.content == nil {
		return localVarReturnValue, nil, reportError("content is required and must be specified")
	}
	if r.identifier == nil {
		return localVarReturnValue, nil, reportError("identifier is required and must be specified")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "content", r.content, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUserPreferenceUsingDELETERequest struct {
	ctx context.Context
	ApiService *UserPreferenceControllerAPIService
	prefId string
}

func (r ApiDeleteUserPreferenceUsingDELETERequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteUserPreferenceUsingDELETEExecute(r)
}

/*
DeleteUserPreferenceUsingDELETE Delete user preference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param prefId Preference id
 @return ApiDeleteUserPreferenceUsingDELETERequest
*/
func (a *UserPreferenceControllerAPIService) DeleteUserPreferenceUsingDELETE(ctx context.Context, prefId string) ApiDeleteUserPreferenceUsingDELETERequest {
	return ApiDeleteUserPreferenceUsingDELETERequest{
		ApiService: a,
		ctx: ctx,
		prefId: prefId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *UserPreferenceControllerAPIService) DeleteUserPreferenceUsingDELETEExecute(r ApiDeleteUserPreferenceUsingDELETERequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserPreferenceControllerAPIService.DeleteUserPreferenceUsingDELETE")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/userpreferences/{prefId}"
	localVarPath = strings.Replace(localVarPath, "{"+"prefId"+"}", url.PathEscape(parameterValueToString(r.prefId, "prefId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEditUserPreferenceUsingPUTRequest struct {
	ctx context.Context
	ApiService *UserPreferenceControllerAPIService
	prefId string
	content *string
	identifier *string
	type_ *string
}

// Content of the user preference
func (r ApiEditUserPreferenceUsingPUTRequest) Content(content string) ApiEditUserPreferenceUsingPUTRequest {
	r.content = &content
	return r
}

// Identifier of the user preference
func (r ApiEditUserPreferenceUsingPUTRequest) Identifier(identifier string) ApiEditUserPreferenceUsingPUTRequest {
	r.identifier = &identifier
	return r
}

// Type of the user preference
func (r ApiEditUserPreferenceUsingPUTRequest) Type_(type_ string) ApiEditUserPreferenceUsingPUTRequest {
	r.type_ = &type_
	return r
}

func (r ApiEditUserPreferenceUsingPUTRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.EditUserPreferenceUsingPUTExecute(r)
}

/*
EditUserPreferenceUsingPUT Edit user preference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param prefId Preference id
 @return ApiEditUserPreferenceUsingPUTRequest
*/
func (a *UserPreferenceControllerAPIService) EditUserPreferenceUsingPUT(ctx context.Context, prefId string) ApiEditUserPreferenceUsingPUTRequest {
	return ApiEditUserPreferenceUsingPUTRequest{
		ApiService: a,
		ctx: ctx,
		prefId: prefId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *UserPreferenceControllerAPIService) EditUserPreferenceUsingPUTExecute(r ApiEditUserPreferenceUsingPUTRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserPreferenceControllerAPIService.EditUserPreferenceUsingPUT")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/userpreferences/{prefId}"
	localVarPath = strings.Replace(localVarPath, "{"+"prefId"+"}", url.PathEscape(parameterValueToString(r.prefId, "prefId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.content != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "content", r.content, "")
	}
	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserPreferencesUsingGETRequest struct {
	ctx context.Context
	ApiService *UserPreferenceControllerAPIService
	identifier *string
	page *int32
	size *int32
	sort *[]string
	type_ *string
}

// Identifier of the user preference
func (r ApiListUserPreferencesUsingGETRequest) Identifier(identifier string) ApiListUserPreferencesUsingGETRequest {
	r.identifier = &identifier
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListUserPreferencesUsingGETRequest) Page(page int32) ApiListUserPreferencesUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListUserPreferencesUsingGETRequest) Size(size int32) ApiListUserPreferencesUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListUserPreferencesUsingGETRequest) Sort(sort []string) ApiListUserPreferencesUsingGETRequest {
	r.sort = &sort
	return r
}

// Type of the user preference
func (r ApiListUserPreferencesUsingGETRequest) Type_(type_ string) ApiListUserPreferencesUsingGETRequest {
	r.type_ = &type_
	return r
}

func (r ApiListUserPreferencesUsingGETRequest) Execute() (*PageUserPreferenceView, *http.Response, error) {
	return r.ApiService.ListUserPreferencesUsingGETExecute(r)
}

/*
ListUserPreferencesUsingGET List user preferences

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUserPreferencesUsingGETRequest
*/
func (a *UserPreferenceControllerAPIService) ListUserPreferencesUsingGET(ctx context.Context) ApiListUserPreferencesUsingGETRequest {
	return ApiListUserPreferencesUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PageUserPreferenceView
func (a *UserPreferenceControllerAPIService) ListUserPreferencesUsingGETExecute(r ApiListUserPreferencesUsingGETRequest) (*PageUserPreferenceView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PageUserPreferenceView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserPreferenceControllerAPIService.ListUserPreferencesUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/userpreferences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.identifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifier", r.identifier, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
