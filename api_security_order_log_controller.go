/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// SecurityOrderLogControllerAPIService SecurityOrderLogControllerAPI service
type SecurityOrderLogControllerAPIService service

type ApiCalculateAverageBuyingPriceUsingGETRequest struct {
	ctx context.Context
	ApiService *SecurityOrderLogControllerAPIService
	securitiesAccountId *string
	securityIdentifier *string
}

// Securities account id
func (r ApiCalculateAverageBuyingPriceUsingGETRequest) SecuritiesAccountId(securitiesAccountId string) ApiCalculateAverageBuyingPriceUsingGETRequest {
	r.securitiesAccountId = &securitiesAccountId
	return r
}

// Security Identifier
func (r ApiCalculateAverageBuyingPriceUsingGETRequest) SecurityIdentifier(securityIdentifier string) ApiCalculateAverageBuyingPriceUsingGETRequest {
	r.securityIdentifier = &securityIdentifier
	return r
}

func (r ApiCalculateAverageBuyingPriceUsingGETRequest) Execute() (float32, *http.Response, error) {
	return r.ApiService.CalculateAverageBuyingPriceUsingGETExecute(r)
}

/*
CalculateAverageBuyingPriceUsingGET Returns the average buying price based on security log entries

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCalculateAverageBuyingPriceUsingGETRequest
*/
func (a *SecurityOrderLogControllerAPIService) CalculateAverageBuyingPriceUsingGET(ctx context.Context) ApiCalculateAverageBuyingPriceUsingGETRequest {
	return ApiCalculateAverageBuyingPriceUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return float32
func (a *SecurityOrderLogControllerAPIService) CalculateAverageBuyingPriceUsingGETExecute(r ApiCalculateAverageBuyingPriceUsingGETRequest) (float32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  float32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityOrderLogControllerAPIService.CalculateAverageBuyingPriceUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/averagebuyingprice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securitiesAccountId == nil {
		return localVarReturnValue, nil, reportError("securitiesAccountId is required and must be specified")
	}
	if r.securityIdentifier == nil {
		return localVarReturnValue, nil, reportError("securityIdentifier is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "securitiesAccountId", r.securitiesAccountId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "securityIdentifier", r.securityIdentifier, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLiLoSecuIdentUsingGETRequest struct {
	ctx context.Context
	ApiService *SecurityOrderLogControllerAPIService
	buyerSecuritiesAccountId *string
	endDate *string
	securityIdentifier *string
	sellerSecuritiesAccountId *string
	startDate *string
}

// Buyer&#39;s securities account id
func (r ApiLiLoSecuIdentUsingGETRequest) BuyerSecuritiesAccountId(buyerSecuritiesAccountId string) ApiLiLoSecuIdentUsingGETRequest {
	r.buyerSecuritiesAccountId = &buyerSecuritiesAccountId
	return r
}

// End date
func (r ApiLiLoSecuIdentUsingGETRequest) EndDate(endDate string) ApiLiLoSecuIdentUsingGETRequest {
	r.endDate = &endDate
	return r
}

// Security identifier
func (r ApiLiLoSecuIdentUsingGETRequest) SecurityIdentifier(securityIdentifier string) ApiLiLoSecuIdentUsingGETRequest {
	r.securityIdentifier = &securityIdentifier
	return r
}

// Seller&#39;s securities account id
func (r ApiLiLoSecuIdentUsingGETRequest) SellerSecuritiesAccountId(sellerSecuritiesAccountId string) ApiLiLoSecuIdentUsingGETRequest {
	r.sellerSecuritiesAccountId = &sellerSecuritiesAccountId
	return r
}

// Start date
func (r ApiLiLoSecuIdentUsingGETRequest) StartDate(startDate string) ApiLiLoSecuIdentUsingGETRequest {
	r.startDate = &startDate
	return r
}

func (r ApiLiLoSecuIdentUsingGETRequest) Execute() (*SecurityOrderLogEntryView, *http.Response, error) {
	return r.ApiService.LiLoSecuIdentUsingGETExecute(r)
}

/*
LiLoSecuIdentUsingGET Lists security order log entries for trades of securities identified by security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLiLoSecuIdentUsingGETRequest
*/
func (a *SecurityOrderLogControllerAPIService) LiLoSecuIdentUsingGET(ctx context.Context) ApiLiLoSecuIdentUsingGETRequest {
	return ApiLiLoSecuIdentUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityOrderLogEntryView
func (a *SecurityOrderLogControllerAPIService) LiLoSecuIdentUsingGETExecute(r ApiLiLoSecuIdentUsingGETRequest) (*SecurityOrderLogEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityOrderLogEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityOrderLogControllerAPIService.LiLoSecuIdentUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/securityorderlogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.buyerSecuritiesAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buyerSecuritiesAccountId", r.buyerSecuritiesAccountId, "")
	}
	if r.endDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endDate", r.endDate, "")
	}
	if r.securityIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "securityIdentifier", r.securityIdentifier, "")
	}
	if r.sellerSecuritiesAccountId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sellerSecuritiesAccountId", r.sellerSecuritiesAccountId, "")
	}
	if r.startDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startDate", r.startDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrderLogsByAsinUsingGETRequest struct {
	ctx context.Context
	ApiService *SecurityOrderLogControllerAPIService
	asin string
	page *int32
	size *int32
	sort *[]string
}

// Results page you want to retrieve (0..N)
func (r ApiListOrderLogsByAsinUsingGETRequest) Page(page int32) ApiListOrderLogsByAsinUsingGETRequest {
	r.page = &page
	return r
}

// Number of records per page
func (r ApiListOrderLogsByAsinUsingGETRequest) Size(size int32) ApiListOrderLogsByAsinUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListOrderLogsByAsinUsingGETRequest) Sort(sort []string) ApiListOrderLogsByAsinUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListOrderLogsByAsinUsingGETRequest) Execute() (*SecurityOrderLogEntryView, *http.Response, error) {
	return r.ApiService.ListOrderLogsByAsinUsingGETExecute(r)
}

/*
ListOrderLogsByAsinUsingGET Lists security order log entries for trades of securities identified by security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param asin ASIN
 @return ApiListOrderLogsByAsinUsingGETRequest
*/
func (a *SecurityOrderLogControllerAPIService) ListOrderLogsByAsinUsingGET(ctx context.Context, asin string) ApiListOrderLogsByAsinUsingGETRequest {
	return ApiListOrderLogsByAsinUsingGETRequest{
		ApiService: a,
		ctx: ctx,
		asin: asin,
	}
}

// Execute executes the request
//  @return SecurityOrderLogEntryView
func (a *SecurityOrderLogControllerAPIService) ListOrderLogsByAsinUsingGETExecute(r ApiListOrderLogsByAsinUsingGETRequest) (*SecurityOrderLogEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityOrderLogEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityOrderLogControllerAPIService.ListOrderLogsByAsinUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/securityorderlogs/by-asin/{asin}"
	localVarPath = strings.Replace(localVarPath, "{"+"asin"+"}", url.PathEscape(parameterValueToString(r.asin, "asin")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrderLogsUsingGETRequest struct {
	ctx context.Context
	ApiService *SecurityOrderLogControllerAPIService
	securitiesAccountId *string
	page *int32
	search *string
	size *int32
	sort *[]string
}

// Securities account id
func (r ApiListOrderLogsUsingGETRequest) SecuritiesAccountId(securitiesAccountId string) ApiListOrderLogsUsingGETRequest {
	r.securitiesAccountId = &securitiesAccountId
	return r
}

// Results page you want to retrieve (0..N)
func (r ApiListOrderLogsUsingGETRequest) Page(page int32) ApiListOrderLogsUsingGETRequest {
	r.page = &page
	return r
}

// Fulltext search (be aware of non-localized subject and content and be aware of MessagePrototype&#39;s structure with substitutions; useful for security identifiers)
func (r ApiListOrderLogsUsingGETRequest) Search(search string) ApiListOrderLogsUsingGETRequest {
	r.search = &search
	return r
}

// Number of records per page
func (r ApiListOrderLogsUsingGETRequest) Size(size int32) ApiListOrderLogsUsingGETRequest {
	r.size = &size
	return r
}

// Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
func (r ApiListOrderLogsUsingGETRequest) Sort(sort []string) ApiListOrderLogsUsingGETRequest {
	r.sort = &sort
	return r
}

func (r ApiListOrderLogsUsingGETRequest) Execute() (*SecurityOrderLogEntryView, *http.Response, error) {
	return r.ApiService.ListOrderLogsUsingGETExecute(r)
}

/*
ListOrderLogsUsingGET Lists security order log entries for trades of securities identified by security identifier

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrderLogsUsingGETRequest
*/
func (a *SecurityOrderLogControllerAPIService) ListOrderLogsUsingGET(ctx context.Context) ApiListOrderLogsUsingGETRequest {
	return ApiListOrderLogsUsingGETRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityOrderLogEntryView
func (a *SecurityOrderLogControllerAPIService) ListOrderLogsUsingGETExecute(r ApiListOrderLogsUsingGETRequest) (*SecurityOrderLogEntryView, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityOrderLogEntryView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityOrderLogControllerAPIService.ListOrderLogsUsingGET")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/securityorderlogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securitiesAccountId == nil {
		return localVarReturnValue, nil, reportError("securitiesAccountId is required and must be specified")
	}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "securitiesAccountId", r.securitiesAccountId, "")
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
