/*
Api Documentation

Api Documentation

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package atapi

import (
	"encoding/json"
)

// checks if the OrderCheck type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderCheck{}

// OrderCheck struct for OrderCheck
type OrderCheck struct {
	CheckResult *SecurityOrderCheckResult `json:"checkResult,omitempty"`
	ExecutionPrice *float32 `json:"executionPrice,omitempty"`
	ExecutionVolume *float32 `json:"executionVolume,omitempty"`
	NumberOfShares *int64 `json:"numberOfShares,omitempty"`
	Spread *PriceSpreadView `json:"spread,omitempty"`
	UncommittedCash *float32 `json:"uncommittedCash,omitempty"`
}

// NewOrderCheck instantiates a new OrderCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderCheck() *OrderCheck {
	this := OrderCheck{}
	return &this
}

// NewOrderCheckWithDefaults instantiates a new OrderCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderCheckWithDefaults() *OrderCheck {
	this := OrderCheck{}
	return &this
}

// GetCheckResult returns the CheckResult field value if set, zero value otherwise.
func (o *OrderCheck) GetCheckResult() SecurityOrderCheckResult {
	if o == nil || IsNil(o.CheckResult) {
		var ret SecurityOrderCheckResult
		return ret
	}
	return *o.CheckResult
}

// GetCheckResultOk returns a tuple with the CheckResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetCheckResultOk() (*SecurityOrderCheckResult, bool) {
	if o == nil || IsNil(o.CheckResult) {
		return nil, false
	}
	return o.CheckResult, true
}

// HasCheckResult returns a boolean if a field has been set.
func (o *OrderCheck) HasCheckResult() bool {
	if o != nil && !IsNil(o.CheckResult) {
		return true
	}

	return false
}

// SetCheckResult gets a reference to the given SecurityOrderCheckResult and assigns it to the CheckResult field.
func (o *OrderCheck) SetCheckResult(v SecurityOrderCheckResult) {
	o.CheckResult = &v
}

// GetExecutionPrice returns the ExecutionPrice field value if set, zero value otherwise.
func (o *OrderCheck) GetExecutionPrice() float32 {
	if o == nil || IsNil(o.ExecutionPrice) {
		var ret float32
		return ret
	}
	return *o.ExecutionPrice
}

// GetExecutionPriceOk returns a tuple with the ExecutionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetExecutionPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.ExecutionPrice) {
		return nil, false
	}
	return o.ExecutionPrice, true
}

// HasExecutionPrice returns a boolean if a field has been set.
func (o *OrderCheck) HasExecutionPrice() bool {
	if o != nil && !IsNil(o.ExecutionPrice) {
		return true
	}

	return false
}

// SetExecutionPrice gets a reference to the given float32 and assigns it to the ExecutionPrice field.
func (o *OrderCheck) SetExecutionPrice(v float32) {
	o.ExecutionPrice = &v
}

// GetExecutionVolume returns the ExecutionVolume field value if set, zero value otherwise.
func (o *OrderCheck) GetExecutionVolume() float32 {
	if o == nil || IsNil(o.ExecutionVolume) {
		var ret float32
		return ret
	}
	return *o.ExecutionVolume
}

// GetExecutionVolumeOk returns a tuple with the ExecutionVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetExecutionVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.ExecutionVolume) {
		return nil, false
	}
	return o.ExecutionVolume, true
}

// HasExecutionVolume returns a boolean if a field has been set.
func (o *OrderCheck) HasExecutionVolume() bool {
	if o != nil && !IsNil(o.ExecutionVolume) {
		return true
	}

	return false
}

// SetExecutionVolume gets a reference to the given float32 and assigns it to the ExecutionVolume field.
func (o *OrderCheck) SetExecutionVolume(v float32) {
	o.ExecutionVolume = &v
}

// GetNumberOfShares returns the NumberOfShares field value if set, zero value otherwise.
func (o *OrderCheck) GetNumberOfShares() int64 {
	if o == nil || IsNil(o.NumberOfShares) {
		var ret int64
		return ret
	}
	return *o.NumberOfShares
}

// GetNumberOfSharesOk returns a tuple with the NumberOfShares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetNumberOfSharesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfShares) {
		return nil, false
	}
	return o.NumberOfShares, true
}

// HasNumberOfShares returns a boolean if a field has been set.
func (o *OrderCheck) HasNumberOfShares() bool {
	if o != nil && !IsNil(o.NumberOfShares) {
		return true
	}

	return false
}

// SetNumberOfShares gets a reference to the given int64 and assigns it to the NumberOfShares field.
func (o *OrderCheck) SetNumberOfShares(v int64) {
	o.NumberOfShares = &v
}

// GetSpread returns the Spread field value if set, zero value otherwise.
func (o *OrderCheck) GetSpread() PriceSpreadView {
	if o == nil || IsNil(o.Spread) {
		var ret PriceSpreadView
		return ret
	}
	return *o.Spread
}

// GetSpreadOk returns a tuple with the Spread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetSpreadOk() (*PriceSpreadView, bool) {
	if o == nil || IsNil(o.Spread) {
		return nil, false
	}
	return o.Spread, true
}

// HasSpread returns a boolean if a field has been set.
func (o *OrderCheck) HasSpread() bool {
	if o != nil && !IsNil(o.Spread) {
		return true
	}

	return false
}

// SetSpread gets a reference to the given PriceSpreadView and assigns it to the Spread field.
func (o *OrderCheck) SetSpread(v PriceSpreadView) {
	o.Spread = &v
}

// GetUncommittedCash returns the UncommittedCash field value if set, zero value otherwise.
func (o *OrderCheck) GetUncommittedCash() float32 {
	if o == nil || IsNil(o.UncommittedCash) {
		var ret float32
		return ret
	}
	return *o.UncommittedCash
}

// GetUncommittedCashOk returns a tuple with the UncommittedCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderCheck) GetUncommittedCashOk() (*float32, bool) {
	if o == nil || IsNil(o.UncommittedCash) {
		return nil, false
	}
	return o.UncommittedCash, true
}

// HasUncommittedCash returns a boolean if a field has been set.
func (o *OrderCheck) HasUncommittedCash() bool {
	if o != nil && !IsNil(o.UncommittedCash) {
		return true
	}

	return false
}

// SetUncommittedCash gets a reference to the given float32 and assigns it to the UncommittedCash field.
func (o *OrderCheck) SetUncommittedCash(v float32) {
	o.UncommittedCash = &v
}

func (o OrderCheck) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderCheck) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CheckResult) {
		toSerialize["checkResult"] = o.CheckResult
	}
	if !IsNil(o.ExecutionPrice) {
		toSerialize["executionPrice"] = o.ExecutionPrice
	}
	if !IsNil(o.ExecutionVolume) {
		toSerialize["executionVolume"] = o.ExecutionVolume
	}
	if !IsNil(o.NumberOfShares) {
		toSerialize["numberOfShares"] = o.NumberOfShares
	}
	if !IsNil(o.Spread) {
		toSerialize["spread"] = o.Spread
	}
	if !IsNil(o.UncommittedCash) {
		toSerialize["uncommittedCash"] = o.UncommittedCash
	}
	return toSerialize, nil
}

type NullableOrderCheck struct {
	value *OrderCheck
	isSet bool
}

func (v NullableOrderCheck) Get() *OrderCheck {
	return v.value
}

func (v *NullableOrderCheck) Set(val *OrderCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderCheck(val *OrderCheck) *NullableOrderCheck {
	return &NullableOrderCheck{value: val, isSet: true}
}

func (v NullableOrderCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


